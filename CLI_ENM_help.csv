Format - 5*@ is splitter for help block, 4*@ split help comand and help text into block
like "5*@help block name4*@help block text5*@next help block name4*@next help block text..."
@@@@@help@@@@
alarm 
    The alarm commandset is used to manage alarms
help alias 
    Create and Execute Aliases "alias" '"' ALIAS_NAME { ARGUMENT } '"' '"' COMMAND_CONTEXT COMMAND_STRING '"'
help ap 
    The ap commandset can be used to automatically integrate a node to the network.
help cmedit 
    The cmedit commandset can be used to read and manipulate Configuration Management data
help collection 
    The collection commandset can be used to manage collections.
help savedsearch 
    The savedsearch commandset can be used to manage Saved Searches.
help config 
    The config commandset manages CM Configurations
help credm 
    The credm commandset manages the security configuration and administration for the ENM services
help dhcp 
    The dhcp command set manages the dhcp server configuration and administration for the ENM services
help fmedit 
    The fmedit commandset can be used to perform Fault Management operations on alarms and nodes.
help fmsnmp 
    The fmsnmp commandset can be used to configure NMS clients on Nbi FM SNMP.
help 
    Explore and Describe available Commands: help [<commandset> [<command>]]
help lcmadm 
    The lcmadm commandset manages licenses operation and usage management.
help netlog 
    The netlog commandset can be used to manipulate network logs.
help nhc 
    The nhc commandset can be used to check the state of the nodes.
help pkiadm 
    The pkiadm commandset can be used to perform CRUD operations on profiles, entities and certificates.
help secadm 
    The secadm commandset manages the security configuration and administration on the network nodes
help ulsa 
    The ulsa commandset is used to start uplink spectrum sampling on nodes.
help shm 
    The SHM commandset manages the import of software packages and license key files on network nodes and the export of Inventory data from network nodes to an XML format
help nodecmd 
    The nodecmd commandset allows to execute bulk commands on multiple nodes and log the response of each command in a file.
@@@@@help alarm ack@@@@
Acknowledge alarms in the network
alarm ack <nodeName...> [quick_filter] [filter]

@@@@@help alarm clear@@@@
Clear alarms in the network
alarm clear <nodeName...> [quick_filter] [filter]

@@@@@help alarm comment@@@@
Add or view comments for the alarms in the network
alarm comment ''<comment_value>'' <nodeName...> [quick_filter] [filter]

@@@@@help alarm disable@@@@
Disable alarm supervision for the network nodes
alarm disable <nodeName...> [quick_filter]

@@@@@help alarm enable@@@@
Enable alarm supervision for the network nodes
alarm enable <nodeName...> [quick_filter] [attributes]

@@@@@help alarm get@@@@
Search both the open and active alarms in the network
alarm get <nodeName...> [quick_filter] [filter] [options]

@@@@@help alarm hist@@@@
Get alarm history in the network
alarm hist <nodeName...> [quick_filter] [filter] [options]

@@@@@help alarm status@@@@
Get alarm supervision status for the nodes in the network
alarm status <nodeName...> [quick_filter] [filter] [options]

@@@@@help alarm sync@@@@
Synchronize all the alarms for the network nodes
alarm sync <nodeName...> [quick_filter]

@@@@@help alarm unack@@@@
Unacknowledge alarms in the network
alarm unack <nodeName...> [quick_filter] [filter]

@@@@@help alias@@@@
Create and Execute Aliases
alias '' ALIAS_NAME { ARGUMENT } '' '' COMMAND_CONTEXT COMMAND_STRING ''

@@@@@help ap bind@@@@
Bind an individual node to a specific hardware serial number or bind multiple nodes using a batch file with hardware serial numbers
ap bind [ ( -n <nodeName> ) ( -s <hardwareSerialNumber> ) | ( file@@@@  @@@<fileName> ) ]

@@@@@help ap cancel@@@@
Cancel the integration of a node
ap cancel -n <nodeName>

@@@@@help ap delete@@@@
Delete a project or node from AP in ENM
ap delete ( -p <projectName> ) | ( -n <nodeName> ) | ( -i -p <projectName> ) | ( -i -n <nodeName> )

@@@@@help ap download@@@@
Download sample artifacts, initial artifacts or ordered artifact
ap download ( -x [ <nodeType> ] ) | ( -i -n <nodeName> ) | ( -o -n <nodeName> ) | ( -ciq file@@@@<fileName> )

@@@@@help ap order@@@@
Order a project file or individual node for integration
ap order ( [ -nv ] file@@@@  @@@<fileName> ) | ( -p <projectName> ) | ( -n <nodeName> )

@@@@@help ap replace@@@@
Automatically configures a node for hardware replace
ap replace -n <nodeName> -s <hardwareSerialNumber>

@@@@@help ap resume@@@@
Resume the integration of a node
ap resume -n <nodeName>

@@@@@help ap status@@@@
Display summary node state information for all projects, node state information for specific projects, deployments or nodes
ap status [ ( -p <projectName> ) | ( -d <deploymentName> ) | ( -n <nodeName> ) ]

@@@@@help ap upload@@@@
Uploads a configuration file for a node
ap upload -n <nodeName> file@@@@  @@@<fileName>

@@@@@help ap view@@@@
Display a list of all projects, individual project or individual node details
ap view [ ( -p <projectName> ) | ( -n <nodeName> ) ]

@@@@@help batch execute@@@@
Execute a Batch of CLI Commands
batch execute  <file-name>

@@@@@help cmedit action@@@@
Initiate a modeled action by FDN
cmedit action <FDN> action
Initiate a modeled action by FDN
cmedit action <FDN> criteria action [options]
Initiate a modeled action by Query
cmedit action [scope type] <nodename...> criteria action [options]

@@@@@help cmedit create@@@@
Create a Managed Object Instance
cmedit create <FDN> attributes [options]

@@@@@help cmedit delete@@@@
Syntax to delete an object by specifying the FDN
cmedit delete <FDN> [-ALL] [-c | --config]
Syntax to delete an object by specifying the FDN
cmedit delete <FDN> criteria [-ALL] [options]
Syntax to delete an object by query
cmedit delete [scope type] <nodename...> criteria [filter] [-ALL] [options]

@@@@@help cmedit describe@@@@
Syntax to describe the modeled data by NeType
cmedit describe -ne | --netype <neType>
Syntax to describe the modeled data by MO
cmedit describe criteria [options]

@@@@@help cmedit export@@@@
Syntax to run an export
cmedit export [scope type] <scope> --filetype <filetypeName> [filter] [options]
Syntax to get the status of an export job for a given job ID
cmedit export --status --job <jobID> [-v | --verbose]
Syntax to get the status of an export job for a given job name
cmedit export --status --jobname <jobName> [-v | --verbose]
Syntax to get the status of all export jobs
cmedit export --status [-v | --verbose]
Syntax to download an export file for a given job ID
cmedit export --download --job <jobID>
Syntax to download an export file for a given job ID
cmedit export --download --jobname <jobName>
Syntax to list pre-defined filters
cmedit export --remove --job <jobID>
Syntax to remove an export job for a given job name
cmedit export --remove --jobname <jobName>

@@@@@help cmedit get@@@@
Syntax to get an object by specifying the FDN
cmedit get <FDN> [-c | --config]
Syntax to get an object by specifying the FDN
cmedit get <FDN> <criteria> [filter] [options]
Syntax to get an object by query
cmedit get [scope type] <nodename...> <criteria> [filter] [options]
Syntax to get by node name or view contents of a collection
cmedit get [scope type] <node name or collection...> [node details option]

@@@@@help cmedit import@@@@
Bulk import configuration management data into a specified configuration
cmedit import ( RUN_IMPORT | GET_JOB_STATUS )

@@@@@help cmedit set@@@@
Set data by FDN
cmedit set <FDN> attributes [-c | --config]
Set data by FDN
cmedit set <FDN> criteria attributes [options]
Set data by query
cmedit set [scope type] <nodeName...> criteria attributes [options]

@@@@@help collection list@@@@
List collections visible to the logged in user.
collection list

@@@@@help collection get@@@@
Get the contents of a collection visible to the logged in user.
collection get <collection_name>

@@@@@help collection create@@@@
Create a collection from file for the logged in user.
collection create <collection_name> [-f file@@@@  @@@<file_name> ] [--public]

@@@@@help collection modify@@@@
Modify collection visible to the logged in user.
collection modify <collection_name> -f file@@@@  @@@<file_name> [--replace]

@@@@@help collection delete@@@@
Delete collection visible to the logged in user.
collection delete <collection_name>

@@@@@help savedsearch list@@@@
List Saved Searches visible to the logged in user.
savedsearch list

@@@@@help config activate@@@@
Activate Configuration
config activate RUN_ACTIVATE | GET_JOB_STATUS

@@@@@help config copy@@@@
Copy data from one Configuration to another
config copy RUN_COPY_NODES | GET_JOB_STATUS

@@@@@help config create@@@@
Create a Configuration
config create <configuration-name>

@@@@@help config delete@@@@
Delete a Configuration
config delete <configuration-name> | GET_JOB_STATUS

@@@@@help config diff@@@@
Compare Configurations
config diff SOURCE <source-configuration> TARGET <target-configuration> [INCLUDE] [VERBOSE] [NETWORK_ELEMENT]

@@@@@help config history@@@@
Shows Configuration History
config history -s <configuration-name> [NODE_SPECIFICATION] [ACTIVATION_STATUS] [BEGIN] [END] [USER] [ACTIVATION_JOB] [ACTIVATION_CONFIG] [VERBOSE]

@@@@@help config list@@@@
List Configurations
config list

@@@@@help config undo@@@@
Undo changes in the live configuration
config undo ( RUN_UNDO | GET_JOB_STATUS | DOWNLOAD_UNDO | REMOVE_UNDO_JOB )

@@@@@help credm reissue@@@@
The credm reissue commandset manages certificates for the ENM services
credm reissue [ TARGET_SERVICE | INPUT_FILE ]

@@@@@help credm list@@@@
The credm list command return the list of all the ENM and 3PP services
credm list [ -v | --verbose ] [ -tca | --trustCA ]

@@@@@help dhcp network@@@@
The dhcp network command set manages dhcp networks for the ENM services
dhcp network add | delete | update | view (OPTIONS)

@@@@@help dhcp range@@@@
The dhcp range command set manages ranges of dhcp networks
dhcp range add | delete (OPTIONS)

@@@@@help dhcp client@@@@
The dhcp network command set manages dhcp network clients for the ENM services
dhcp client add | delete | view (OPTIONS)

@@@@@help fmedit create@@@@
Create a AlarmRoutePolicy.
fmedit create NAME [ ATTRIBUTE_SETTER_LIST ]

@@@@@help fmedit delete@@@@
Delete one or more AlarmRoutePolicies.
fmedit delete SCOPE [FILTER]

@@@@@help fmedit get@@@@
Get alarms,nodes and AlarmRoutePolicies data for Fault Management.
fmedit get SCOPE { ; SCOPE } [FILTER] [OUTPUT_SPECIFICATIONS] [NAMESPACE] [VERSION] [NETYPE] [CONFIGURATION]

@@@@@help fmedit set@@@@
Set alarms,nodes and AlarmRoutePolicies data for Fault Management.
fmedit set SCOPE { ; SCOPE } [CLASS_FILTER] ATTRIBUTE_SETTER_LIST [NAMESPACE] [VERSION] [NETYPE] [CONFIGURATION]

@@@@@help fmsnmp create@@@@
Create a NMS client subscription.
fmsnmp create TYPE [ SEC ] NAME MANDATORY_PARAM_LIST [ SECURITY_LIST ] [ OPTIONAL_PARAM_LIST ]

@@@@@help fmsnmp delete@@@@
Delete a NMS client subscription.
fmsnmp delete NAME

@@@@@help fmsnmp get@@@@
Get agent or NMS client subscription parameters.
fmsnmp get POSITIONAL_ARG [NAME]

@@@@@help fmsnmp set@@@@
Set agent or NMS client subscription parameters.
fmsnmp set POSITIONAL_ARG [NAME] PARAMETERS_LIST

@@@@@help lcmadm install@@@@
Install license to the management system.
lcmadm install file@@@@  @@@<file-name>

@@@@@help lcmadm remove@@@@
Remove license from the management system.
lcmadm remove name=<license-name>

@@@@@help lcmadm list@@@@
List licenses which already installed in management system.
lcmadm list ( --current-usage | -cu )

@@@@@help lcmadm activate@@@@
Activate emergency unlock in the management system.
lcmadm activate ( --emergency-unlock | -eu )

@@@@@help lcmadm get@@@@
Get license relevant information.
lcmadm get THRESHOLD_PARAMETERS | EMERGENCY_UNLOCK_PARAMETERS | GRACE_PERIOD_PARAMETERS

@@@@@help lcmadm set@@@@
Set license relevant information.
lcmadm set LICENSE_NAME EXPIRATION_THRESHOLD CAPACITY_THRESHOLD

@@@@@help lcmadm export@@@@
Export license usage to user.
lcmadm export USAGE_OPTIONS

@@@@@help netlog describe@@@@
Syntax to get log types for a network element or a set of network elements.
netlog describe <nodeName>

@@@@@help netlog upload@@@@
Syntax to upload log files from a network element to ENM.
netlog upload <nodeName> <logtype...>

@@@@@help netlog status@@@@
Syntax to check the status of the upload action for the log types and the network element.
netlog status <nodeName> <logtype...>

@@@@@help netlog download@@@@
SSyntax to download the log files from ENM to a user device.
netlog download <nodeName> [<logtype...>]

@@@@@help netlog delete@@@@
Syntax to delete the collected log files for a network element.
netlog delete <nodeName> [<logtype...>]

@@@@@help nhc ac@@@@
Manage acceptance criteria.
nhc ac ( UPLOAD_AC | LIST_AC | DOWNLOAD_AC | DELETE_AC )

@@@@@help nhc rep@@@@
Run, manage NHC jobs and download the report.
nhc rep ( RUN_JOB | LIST_JOB_STATUS | DOWNLOAD_REPORT )

@@@@@help nhc compare_run@@@@
Syntax to create a NHC Comparison Job which compares selected NHC reports and generates a comparison report.
nhc compare run [criteria] filter <job_identification> <job_identification>

@@@@@help nhc compare_st@@@@
Syntax to list and display the Status of all NHC Comparison Jobs.
nhc compare ( -st | --status )
Syntax to display the detailed (verbose) Comparison Status of a specific NHC comparison job.
nhc compare ( -st | --status ) filter <job_identification> [option]

@@@@@help nhc compare_dl@@@@
Syntax to download a NHC Comparison Job report.
nhc compare ( -dl | --download ) filter <job_identification>

@@@@@help pkiadm certmgmt@@@@
To perform CRUD operations on certificates.
pkiadm certmgmt ( MANAGE | RETRIEVE )

@@@@@help pkiadm configmgmt@@@@
To perform CRUD operations on algorithms.
pkiadm configmgmt algo ( UPDATE | RETRIEVE )

@@@@@help pkiadm crlmgmt@@@@
To perform CRUD, publish and unpublish operations on CA Entity .
pkiadm crlmgmt ( MANAGE | RETRIEVE )

@@@@@help pkiadm entitymgmt@@@@
To perform CRUD operations on entities.
pkiadm entitymgmt ( MANAGE | RETRIEVE )

@@@@@help pkiadm extcaexport@@@@
To export a certificate associated to an external CA.
pkiadm extcaexport EXT_CA_NAME [ SERIAL_NUMBER ]

@@@@@help pkiadm extcaimport@@@@
To import an external CA certificate.
pkiadm extcaimport CERTIFICATE_FILE [ EXT_CA_NAME ]

@@@@@help pkiadm extcalist@@@@
To return a list of information reports about one or all the external Certificate Authorities imported in the ENM system.
pkiadm extcalist [ EXT_CA_NAME ]

@@@@@help pkiadm extcaremove@@@@
To remove an external CA from ENM, including all associated certificates and CRL files.
pkiadm extcaremove EXT_CA_NAME

@@@@@help pkiadm extcaremovecrl@@@@
To totally remove all the CRLs for an external CA from ENM
pkiadm extcaremovecrl --name <ca-name-value>
To remove from an external CA the CRL with the specified issuer name
pkiadm extcaremovecrl --issuername <issuer-name-value>

@@@@@help pkiadm extcaupdate@@@@
To add or update a CRL gile related to an existing external CA.
pkiadm extcaupdatecrl ( CRL_URL | CRL_FILE ) EXT_CA_NAME

@@@@@help pkiadm profilemgmt@@@@
To perform CRUD operations on profiles.
pkiadm profilemgmt ( MANAGE | RETRIEVE )

@@@@@help pkiadm revmgmt@@@@
To perform revoke operation on the CA and End Entity Certificate.
pkiadm revmgmt ( MANAGE | RETRIEVE )

@@@@@help pkiadm trustmgmt@@@@
To perform CRUD operations on Trusted Certificates.
pkiadm trustmgmt ( PUBLISH | UNPUBLISH | LIST )

@@@@@help secadm capability@@@@
The secadm capability commandset manages capabilities for specific node type and version
secadm ( capability | cap ) (GET)

@@@@@help secadm certificate@@@@
The secadm certificate commandset manages certificates in the nodes
secadm ( cert | certificate ) ( ISSUE | REISSUE | GET)

@@@@@help secadm credentials@@@@
Manages the usernames and the passwords for a node or a list of nodes
secadm ( CREATE | GET | UPDATE )

@@@@@help secadm crl@@@@
This Command can be used to download CRL on demand on a single or multiple nodes
secadm crl download TARGET_NODES

@@@@@help secadm disable@@@@
This Command can be used to set CrlCheck as deactivated on a single or multiple nodes
secadm disable crlcheck CERTIFICATE_TYPE TARGET_NODES

@@@@@help secadm enable@@@@
This Command can be used to set CrlCheck as activated on a single or multiple nodes
secadm enable crlcheck CERTIFICATE_TYPE TARGET_NODES

@@@@@help secadm get@@@@
This Command is used to list the supported and enabled ciphers on a single or multiple nodes for either SSH or TLS protocol
secadm get ciphers PROTOCOL_TYPE TARGET_NODES

@@@@@help secadm https@@@@
Manages (activate, deactivate or get status) HTTPS for node or a list of nodes
secadm https ( ACTIVATE | DEACTIVATE | GETSTATUS ) TARGET_NODES

@@@@@help secadm ftpes@@@@
Manages (activate, deactivate or get status) FTPES for node or a list of nodes
secadm ftpes ( ACTIVATE | DEACTIVATE | GETSTATUS ) TARGET_NODES

@@@@@help secadm job@@@@
This command is used to get the current status of job enrollments started after a a secadm certificate issue command
secadm job get (--all | -j JOB_ID)

@@@@@help secadm read@@@@
This Command can be used to read the status of CrlCheck on a single or multiple nodes
secadm read crlcheck CERTIFICATE_TYPE TARGET_NODES

@@@@@help secadm securitylevel_get@@@@
Get the Operational Security Level on a Cello Packet Platform (CPP) node
secadm sl get LEVEL_OPTION TARGET_NODES

@@@@@help secadm securitylevel_set@@@@
Set the Operational Security Level on a Cello Packet Platform (CPP) node
secadm sl set LEVEL_OPTION TARGET_NODES

@@@@@help secadm set@@@@
This Command is used to set ciphers on a single or multiple nodes for SSH and TLS protocols
secadm set ciphers ( XML_FILE ) | ( PROTOCOL_TYPE CIPHER_SUITE TARGET_NODES )

@@@@@help secadm sshkey@@@@
Manages (create and update) ssh keys to the nodes or to the list of nodes
secadm ( SSHKEY_CREATE | SSHKEY_UPDATE )

@@@@@help secadm snmp@@@@
Manages both the authnopriv and the authpriv SNMPv3 security levels
secadm snmp ( AUTHNOPRIV | AUTHPRIV ) TARGET_NODES

@@@@@help secadm trust@@@@
Manages trust certificate distribution to the nodes and trust certificate remove from the nodes
secadm trust ( DISTRIBUTE | REMOVE | GET)

@@@@@help ulsa start@@@@
This command is used to start uplink spectrum sampling
ulsa start attributes [options]

@@@@@help ulsa capabilities@@@@
Fetch uplink spectrum analyzer capabilities
ulsa capability attributes

@@@@@help shm import@@@@
Import Software packages and License key files of nodes
shm import ( SOFTWARE_PACKAGE_NAME | LICENSE_KEY_FILE_NAME )

@@@@@help shm export@@@@
Export of Inventory data from nodes to an XML format
shm export ( RUN_EXPORT )

@@@@@help shm listdomaintype@@@@
List domain and type attributes of nodes
shm listdomaintype <NeName> | <FDN>

@@@@@help shm backup@@@@
Perform Backup operations on nodes
shm backup <NE_Specification> <Backup_Name> ( OPTIONS )

@@@@@help shm restart@@@@
Perform restart operation on nodes
shm restart <NE_Specification> <Restart_Reason> ( OPTIONS )

@@@@@help shm status@@@@
View SHM Job status
shm status ( OPTIONS ) | ( ALL )

@@@@@help shm deleteup@@@@
Delete Upgrade Packages from nodes
shm deleteup <NE_Specification> <Product_Number> <Product_Revision> ( OPTIONS )

@@@@@help shm listups@@@@
Lists Upgrade Packages on the nodes
shm listups <NE_Specification> <Product_Number> <Product_Revision> ( OPTIONS )

@@@@@help shm installlkf@@@@
Install license key file on the nodes
shm installlkf <NE_Specification> ( OPTIONS )

@@@@@help nodecmd upload@@@@
Store the file in ENM repository.
nodecmd upload --blacklistfile | --bf | --cmdfile | --cf file@@@@  @@@<fileName>

@@@@@help nodecmd download@@@@
Download the blacklist file to user PC.
nodecmd download --blacklistfile | --bf
Download the commandlist file to user PC.
nodecmd download --cmdfile | --cf <fileName>
Download the output files to user PC.
nodecmd download --jobid | -j <jobid>

@@@@@help nodecmd list@@@@
List all the command list files saved in ENM repository.
nodecmd list --cmdfile | --cf

@@@@@help nodecmd delete@@@@
Delete the blacklist file from ENM repository.
nodecmd delete --blacklistfile | --bf
Delete the command list file from ENM repository.
nodecmd delete --cmdfile | --cf <fileName>

@@@@@help nodecmd status@@@@
To list all the bulk CLI jobs that are created.
nodecmd status (--all) | (--jobid <jobid>)

@@@@@help nodecmd execute@@@@
Execute node native CLI commands from command list file on savedsearch and log the responses in an output file.
nodecmd execute (--savedsearch | --ss) <savedSearchName> (--cmdfile | --cf) <fileName>
Execute node native CLI commands from command list file on collection and log the responses in an output file.
nodecmd execute (--collection | --c) <collectionName> (--cmdfile | --cf) <fileName>
Execute node native CLI commands from command list file on nodes and log the responses in an output file.
nodecmd execute --ne <nodeName...> (--cmdfile | --cf) <fileName>

@@@@@help nodecmd cancel@@@@
Cancel the ongoing bulk CLI job.
nodecmd cancel --jobid | --j <jobid>

@@@@@manual cmedit tutorial@@@@cmedit is a powerfull tool for configurig NE.@@@
Tutorial: Get Node Data by FDN
< Back To Cmedit

Get a ManagedElement by FDN

Example Command:

cmedit get MeContext=ERBS001,ManagedElement=1
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1
ManagedElementId : 1
applicationConfiguration : []
healthCheckResult : {startTime=, message=, healthCheckResultCode=INITIAL_VALUE}
healthCheckSchedule : []
logicalName :
mimInfo : {mimVersion=1, mimRelease=160, mimName=ERBS_NODE_MODEL_H}
neType : ERBS
platformType : null 
productName :
productNumber :
productRevision :
productType : Node
site :
userLabel : sampleUserLabel
1 instance(s)

Example Command Explanation: The above example command returns all persistent attributes for all Managed Object Instances (MOIs) for the provided FDN.
_______________________________________________________________________________________________________________________________________________________
Tutorial: Get Node Data
< Back To Cmedit

Note: If it is required to perform any of the following commands in an existing non-live configuration the -c=<configName> or --config=<configName> option can be appended to the end of the command. Please refer to create config

Get the managed object instance of type ENodeBFunction under a node with name "ERBS001", in namespace "ERBS_NODE_MODEL" (will return only FDN):

Example Command:

cmedit get ERBS001 ENodeBFunction --namespace=ERBS_NODE_MODEL 
(Note: the name of the namespace depends on the versions of the node in the deployed network and the type of managed object being looked for)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
1 instance(s)
Get all managed object instances of type ENodeBFunction and return their FDNs under nodes whose name starts with "ERBS" ie (Note: using 'short' notation for --namespace -ns)

Example Command:

cmedit get ERBS* ENodeBFunction -ns=ERBS_NODE_MODEL
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
FDN : MeContext=ERBS003,ManagedElement=1,ENodeBFunction=1
 
3 instance(s)
Get all managed object instances of type ENodeBFunction and return their FDNs from under each of the MeContexts in the collection "CollectionOne"

Example Command:

cmedit get CollectionOne ENodeBFunction
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
 
2 instance(s)
Get all managed object instances of type ENodeBFunction and return all their persistent attributes under nodes whose name ends with "01":

Example Command:

cmedit get *01 ENodeBFunction.* -ns=ERBS_NODE_MODEL
(Note: the use of the asterisk indicates that all persistent values shall be returned.)

Example Command Response:

FDN : MeContext= ERBS001,ManagedElement=1,ENodeBFunction=1
ENodeBFunctionId : 1
alignTtiBundWUlTrigSinr : OFF
altNasBackTo : DEFAULT_DCN
biasThpWifiMobility : 10
caAwareMfbiIntraCellHo : false
checkEmergencySoftLock : false
combCellSectorSelectThreshRx : 300
combCellSectorSelectThreshTx : 300
csfbMeasFromIdleMode : true
dlMaxWaitingTimeGlobal : 0
dnsLookupOnTai : ON
dnsLookupTimer : 0
dnsSelectionS1X2Ref : 
dscpLabel : 24
enabledUlTrigMeas : false
eNBId : 81
eNodeBPlmnId : {mcc=353, mnc=57, mncLength=2}
eranVlanPortRef : 
forcedSiTunnelingActive : false
gtpuErrorIndicationDscp : 40
initPreschedulingEnable : true
interEnbCaTunnelDscp : 14
ipsecEpAddressRef :
licCapDistrMethod : SYSTEM
licConnectedUsersPercentileConf : 90
licDlBbPercentileConf : 90
licDlPrbPercentileConf : 90
licUlBbPercentileConf : 90
licUlPrbPercentileConf : 90
maxRandc : 255
measuringEcgiWithAgActive : false
mfbiSupport : true
mfbiSupportPolicy : false
minRandc : 1
mtRreWithoutNeighborActive : true
nnsfMode : RPLMN_IF_SAME_AS_SPLMN
prioritizeAdditionalBands : false
pwsPersistentStorage : OFF
randUpdateInterval : 200
releaseInactiveUesInactTime : 1
releaseInactiveUesMpLoadLevel : VERY_HIGH_LOAD
rrcConnReestActive : false
s1GtpuEchoDscp : 14
s1GtpuEchoEnable : DISABLED
s1GtpuEchoFailureAction : NONE
s1HODirDataPathAvail : false
s1RetryTimer : 30
sctpRef : MeContext=ERBS001,ManagedElement=1,TransportNetwork=1,Sctp=1
sctpX2Ref : 
softLockRwRWaitTimerInternal : 60
softLockRwRWaitTimerOperator : 60
tddVoipDrxProfileId : -1
timeAndPhaseSynchAlignment : false
timeAndPhaseSynchCritical : false
timePhaseMaxDeviation : 100
timePhaseMaxDeviationCdma2000 : 100
timePhaseMaxDeviationEdrx : 10
timePhaseMaxDeviationIeNbCa : 30
timePhaseMaxDeviationMbms : 50
timePhaseMaxDeviationOtdoa : 9
timePhaseMaxDeviationSib16 : 100
timePhaseMaxDeviationTdd : 15
tOutgoingHoExecCdma1xRtt : 5
tRelocOverall : 5
tS1HoCancelTimer : 3
ulMaxWaitingTimeGlobal : 0
ulSchedulerDynamicBWAllocationEnabled : true
upIpAddressRef :
upX2IpAddressRef :
useBandPrioritiesInSCellEval : false
useBandPrioritiesInSib1 : false
userLabel : RegionA
x2BlackList : []
x2GtpuEchoDscp : 14
x2GtpuEchoEnable : DISABLED
x2IpAddrViaS1Active : true
x2retryTimerMaxAuto : 1440
x2retryTimerStart : 30
x2SetupTwoWayRelations : true
x2WhiteList : []
zzzTemporary1 :
zzzTemporary10 : -2000000000
zzzTemporary11 : -2000000000
zzzTemporary12 : -2000000000
zzzTemporary2 :
zzzTemporary3 :
zzzTemporary4 :
zzzTemporary5 :
zzzTemporary6 :
zzzTemporary7 :
zzzTemporary8 :
zzzTemporary9 : -2000000000
 
1 instance(s)
Get all managed object instances of type ManagedElement across all namespaces and return only the userLabel attribute under any node (will also return the FDNs):

Example Command:

cmedit get * ManagedElement.userLabel
(Note: omitting the namespace parameter may decrease the performance of the query)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1
userLabel : sampleUserLabel
 
1 instance(s)
(Note: Response will be received from all available nodes. If a node is not available an error will be received )

Get managed object instances of type GeranFreqGroup across all namespaces under node ERBS001 and under a given FDN: MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1

Example Command:

cmedit get MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1; ERBS001 GeranFreqGroup
Example Command Response:

 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=1
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=2
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=1
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=2
 
4 instance(s)
Get all managed object instances of type ENodeBFunction in the ERBS_NODE_MODEL namespace with version 3.1.72 and return the FDN, userLabel and dnsLookupOnTai attributes under any node:

Example Command:

cmedit get * ENodeBFunction.(userLabel,dnsLookupOnTai) -ns=ERBS_NODE_MODEL -v=3.1.72
(Note: the name of the namespace depends on the versions of the node in the deployed network and the type of managed object being looked for)

(Note: a list of attributes for a specified MO Class may be specified, contained within brackets and separated by a comma)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
dnsLookupOnTai : ON
userLabel : sampleUserLabel
 
1 instance(s)
Get all managed object instances of type ENodeBFunction across all namespaces and return the userLabel and dnsLookupOnTai attributes under any node where the value of userLabel equals to "Ireland":

Example Command:

cmedit get * ENodeBFunction.(userLabel=="Ireland",dnsLookupOnTai)
(Note: the value for a string object has to be enclosed in quotes when it contains any special characters like space, full stop or dollar sign)

(Note: when querying for attributes with a specified value a "double" equals is required. A single equals is used when setting a modeled value)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
dnsLookupOnTai : ON
userLabel : Ireland
 
1 instance(s)
Get all managed object instances of type EUtranCellFDD across all namespaces on the node ERBS001 and return only the FDNs with an latitudeDir facing North:

Example Command:

cmedit get ERBS001 EUtranCellFDD.(latitudeDir==NORTH)
(Note: the value for a string object has to be enclosed in quotes when it contains any special characters like space, full stop or dollar sign)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
latitudeDir : NORTH
 
1 instance(s)
Get all managed object instances of type ENodeBFunction across all nodes and namespaces along with userLabel attributes, whose value starts with "Ire"

Example Command:

cmedit get * ENodeBFunction.userLabel==Ire*
(Note: when querying on a partial value, the attribute dataType must be a string, that is, it is not possible to specify a partial enumerated dataType attribute)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,ENodeBFunction=1
userLabel : Ireland
 
1 instance(s)
Get all managed object instances of type ENodeBFunction under ERBS001, ERBS002 and ERBS003 with userLabel attributes, whose value starts with "Ire"

Example Command:

cmedit get ERBS001;ERBS002;ERBS003 ENodeBFunction.userLabel==Ire* -ns=ERBS_NODE_MODEL
(Note: the attribute must be a string)

(Note: a list of node identifiers is separated by a semi-colon)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
userLabel : Ireland
 
FDN : MeContext=ERBS003,ManagedElement=1,ENodeBFunction=1
userLabel : Ireland
 
2 instance(s)
Get all managed object instances of type EUtranCellFDD with a cellRange attribute, whose value is greater than 12

Example Command:

cmedit get * EUtranCellFDD.cellRange>12
(Note: the attribute dataType must be a numerical value)

Example Command Response:

FDN : MeContext=ERBS6003,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=2
cellRange : 15
 
1 instance(s)
Get all managed object instances of type ENodeBFunction under ERBS001 with userLabel attribute and all direct child managed object instances of type EUtranCellFDD (in the same namespace) with no attributes.

Example Command:

cmedit get ERBS001 ENodeBFunction.userLabel,EUtranCellFDD
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
userLabel : sampleUserLabel
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
2 instance(s)
Get all managed object instances of type ENodeBFunction under ERBS001 with userLabel attribute and all child MOs of any type (in any namespace)

Example Command:

cmedit get ERBS001 ENodeBFunction.userLabel,*
(Note: a wildcard asterix specified in-lieu of an MO will result in all MO Instances being returned in the query)

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
userLabel : sampleUserLabel
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,AnrFunction=1
 
4 instance(s)
Get all managed object instances of type ENodeBFunction under a list of node name IDs whose specified attribute matches a specified value

Example Command:

cmedit get ERBS001;ERBS002;ERBS003 ENodeBFunction.x2retryTimerMaxAuto==1440
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
x2retryTimerMaxAuto : 1440
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
x2retryTimerMaxAuto : 1440
 
FDN : MeContext=ERBS003,ManagedElement=1,ENodeBFunction=1
x2retryTimerMaxAuto : 1440
 
3 instance(s)
For a specified node, get the managed object instances of a specified parent MO, a specified child MO and that MO's child MOIs

Example Command:

cmedit get ERBS0001 ENodeBFunction,EUtranCellFDD,* 
Note: MO Classes seperated by a comma indicate that the MO is a child of the preceding parent MO.

Example Command Response:

FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=2
 
FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3,EUtranFreqRelation=1
 
FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3,EUtranFreqRelation=2
 
6 instance(s)
For all nodes with a specified MO that matches a specified condition, get all of that MO's children but only output the specified MO types

Note: When the user wants to query network data based on certain criteria, but wants to view different or additional data than the data specified in the search criteria, the data that is desired to be output from the search can be specified

Example Command:

cmedit get * EUtranCellFDD.userLabel==Cell001*,* EUtranFreqRelation; UeMeasControl
Note:The information that is displayed is independent of the information specified in the search criteria. In the example, the query is based on all EUtranCellFDD MOIs with userLabel starts with Cell001 and all it's child MOIs. The desired output is all EUtranFreqRelation MOIs and all UeMeasControl MOIs but as stated not the EUtranCellFDD MOIs.

Example Command Response:

FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1,UeMeasControl=1
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1,EUtranFreqRelation=1
 
FDN : MeContext=ERBS003,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1,EUtranFreqRelation=1
 
3 instance(s)
For all nodes of type ENodeB, get all specified MOIs along with the specified attributes

Note: When the user wants to contain a query across the network to return data only for a type of node, the netype optional command parameter can be specified to limit the data that is returned in the search criteria

Example Command:

cmedit get * EUtranCellFDD.(userLabel,ulInterferenceManagementActive,ulChannelBandwidth) -ne=ERBS
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
ulChannelBandwidth : 10000
userLabel : ulInterferenceManagementActive : true
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
ulChannelBandwidth : 10000
userLabel : ulInterferenceManagementActive : true
 
FDN : MeContext=ERBS003,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
ulChannelBandwidth : 10000
userLabel : ulInterferenceManagementActive : true
 
3 instance(s)
For all nodes get all instances of a parent MO Class that has a specified child MO

Note: The parent (and child) MO will only be returned if a child exists that fulfills the child cmObjectSpecification. If more then one child specification is specified then all of those need to be fulfilled for the parent and those children to be returned. An output specification can be used to return just the parent or child MO types as required.

Example Command:

cmedit get * ManagedElement,(Equipment;ENodeBFunction)
Note: MOs specified with in the brackets must be child MO's of the preceding MO

Example Command Response:

FDN : MeContext=ERBS0001,ManagedElement=1,Equipment
 
FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS0001,ManagedElement=1
 
3 instance(s)
Note: All commands and search options in ENM CLI are case sensitive - MO Class and attributes are as per modeled data

For ERBS001 get all instances of the MOs of type ManagedElement AND ENodeBFunction, specifying all persistent attributes on the ManagedElement

Note:The search shall be contained to look for all MO instances under MeContext=ERBS001

Example Command:

cmedit get ERBS001 ManagedElement.*;ENodeBFunction
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS001,ManagedElement=1
ManagedElementId : 1
applicationConfiguration : []
healthCheckResult : {startTime=, message=, healthCheckResultCode=INITIAL_VALUE}
healthCheckSchedule : []
logicalName :
mimInfo : {mimVersion=1, mimRelease=160, mimName=ERBS_NODE_MODEL_H}
neType : ERBS
platformType : null
productName :
productNumber :
productRevision :
productType : Node
site :
userLabel :
 
2 instance(s)
For ERBS001 get all instances of the MOs of type ManagedElement and ENodeBFunction, specifying all persisted attributes on the ManagedElement and PM Counters on ENodeBFunction MO

Note:The search shall be contained to look for all MO instances under MeContext=ERBS001

Example Command:

cmedit get ERBS001 ManagedElement.<p>;ENodeBFunction.<pm> 
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
pmIotConnectedUsersMax : 0
pmLic5MHzSectorCarrierActual : 0
pmLic5Plus5MHzScFddActual : 0
pmLic5Plus5MHzScTddActual : 0
pmLicConnectedUsersActual : 0
pmLicConnectedUsersDistr : []
pmLicConnectedUsersLevSamp : 0
pmLicConnectedUsersLevSum : 0
pmLicConnectedUsersLicense : 0
pmLicConnectedUsersMax : 0
pmLicConnectedUsersTimeCong : 0
pmLicDlCapLicense : 0
pmLicDlPrbCapLicense : 0
pmLicUlCapLicense : 0
pmLicUlPrbCapLicense : 0
pmMoFootprintMax : 0
pmPagS1Discarded : 0
pmPagS1DiscDistr : []
pmPagS1EdrxDiscarded : 0
pmPagS1EdrxReceived : 0
pmPagS1RecDistr : []
pmPagS1Received : 0
pmRimAssocMax : 0
pmRimReportErr : 0
pmZtemporary34 : 0
pmZtemporary35 : 0
 
FDN : MeContext=ERBS001,ManagedElement=1
ManagedElementId : 1
applicationConfiguration : []
healthCheckResult : {startTime=, message=, healthCheckResultCode=INITIAL_VALUE}
healthCheckSchedule : []
logicalName :
mimInfo : {mimVersion=1, mimRelease=160, mimName=ERBS_NODE_MODEL_H}
neType : ERBS
platformType : null
productName :
productNumber :
productRevision :
productType : Node
site :
userLabel :
 
2 instance(s)
For ERBS001 get all instances of the MOs of type ManagedElement, specifying all writable persistent attributes on the ManagedElement MO and displaying the output in Dynamic format

Note:The search shall be contained to look for all MO instances under MeContext=ERBS001

Example Command:

cmedit get ERBS001 ManagedElement.<w> --dynamic
Example Command Response:

FDN : "MeContext=ERBS001,ManagedElement=1"
ManagedElementId : "1"
applicationConfiguration : []
healthCheckSchedule : []
logicalName : ""
neType : ERBS
platformType : <empty>
productName : ""
productNumber : ""
productRevision : ""
productType : "Node"
site : ""
userLabel : "Label1"
 
1 instance(s)
For ERBS001 get all instances of the MOs of type ManagedElement, specifying all mandatory persistent attributes on the ManagedElement MO

Note:The search shall be contained to look for all MO instances under MeContext=ERBS001

Example Command:

cmedit get ERBS001 ManagedElement.<m> 
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1
ManagedElementId : 1
neType : ERBS
 
1 instance(s)
Count the MOs of type ManagedElement and ENodeBFunction

Example Command:

cmedit get * ManagedElement;ENodeBFunction --count
Example Command Response:

ManagedElement 4 instance(s) found
 
ENodeBFunction 4 instance(s) found
 
8 instance(s)
_______________________________________________________________________________________________________________________________________________________
Tutorial: Enable/Disable PmFunction on the Network Elements
PmFunction is used to switch on and off PMIC Mediation flows for each Network Element.

If PmFunction is on, all file collection, subscription activation, subscription deactivation, scanner polling and scanner master functionality is available for the Network Element. The Network Element is included in all compatible PM System Defined and Criteria Based subscriptions
If PmFunction is off, no file collection, subscription activation, subscription deactivation, scanner polling or scanner master functionality is available for the Network Element. The Network Element is removed from all subscriptions.
Notes
By default PmFunction is off for Network Elements added to ENM System. PmFunction is switched on by setting the PmEnabled attribute value to "true".
Network Elements must be software CM synchronized before setting pmEnabled to true for the Network Elements.
Only a user with administrator privilege can set the PmFunction on or off.
When switching on PmFunction without the "--force" option, a warning message is displayed to indicate that the Network Element will be included in all compatible PM System Defined and Criteria Based subscriptions.
When switching off PmFunction without the "--force" option, a warning message is displayed to indicate that the Network Element will be removed from all subscriptions.
Switch on PmFunction on a Single Network Element
Example of Command:

cmedit set NetworkElement=ERBS01,PmFunction=1 pmEnabled=true --force
Example of Command Response:

FDN : NetworkElement=ERBS01,PmFunction=1
1 instance(s) updated
Switch off PmFunction on a Single Network Element
Example of Command:

cmedit set NetworkElement=ERBS01,PmFunction=1 pmEnabled=false --force
Example of Command Response:

FDN : NetworkElement=ERBS01,PmFunction=1
1 instance(s) updated
Switch on PmFunction for all Network Elements
Command:

cmedit set * PmFunction.(PmFunctionId==1) pmEnabled=true --force
The output will be the complete list of the Network Elements in ENM on which the PmFunction is enabled.

Switch off PmFunction for all Network Elements
Command:

cmedit set * PmFunction.(PmFunctionId==1) pmEnabled=false --force
The output will be the complete list of the Network Elements in ENM on which the PmFunction is disabled.
_______________________________________________________________________________________________________________________________________________________
Tutorial: Create Node MOI Data
< Back To Cmedit

Note: If it is required to perform any of the following commands in an existing non-live configuration the -c=<configName> or --config=<configName> option can be appended to the end of the command. Please refer to create config

Example command to create an ENodeBFunction MO under a Managed Element.

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1 ENodeBFunctionId=1; userLabel="sampleUserLabel"; eNodeBPlmnId=(mcc=272,mnc=7,mncLength=2)
Note: a struct data type attribute is defined within round brackets, with members separated by commas.

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1

ENodeBFunctionId : 1
alarmSuppressed : false
collectTraceStatus : null
csfbMeasFromIdleMode : true
dnsLookupOnTai : ON
dnsLookupTimer : 0
dscpLabel : 24
eNBId : 1015
eNodeBPlmnId : {mcc=272, mnc=7, mncLength=2}
forcedSiTunnelingActive : false
initPreschedulingEnable : true
licCapDistrMethod : SYSTEM
maxRandc : 255
mfbiSupport : null
minRandc : 1
nnsfMode : RPLMN_IF_SAME_AS_SPLMN
oaMLinkSuperVisionActive : true
pwsPersistentStorage : OFF
randUpdateInterval : 200
rrcConnReestActive : false
s1HODirDataPathAvail : false
s1RetryTimer : 30
schedulingStrategy : ROUND_ROBIN
sctpRef : null
technicianPresent : null
tHODataFwdReordering : 50
timeAndPhaseSynchCritical : false
timePhaseMaxDeviation : 100
tOutgoingHoExecCdma1xRtt : 5
tRelocOverallValue : 5
ulSchedulerDynamicBWAllocationEnabled : true
upIpAccessHostRef : null
upIpAddressRef : null
userLabel : null
x2BlackList : null
x2IpAddrViaS1Active : true
x2retryTimerMaxAuto : 1440
x2retryTimerStart : 30
x2SetupTwoWayRelations : true
x2WhiteList : null
zzzTemporary1 : null
zzzTemporary10 : -2000000000
zzzTemporary11 : -2000000000
zzzTemporary12 : -2000000000
zzzTemporary13 : -2000000000
zzzTemporary14 : -2000000000
zzzTemporary15 : -2000000000
zzzTemporary16 : -2000000000
zzzTemporary17 : -2000000000
zzzTemporary18 : -2000000000
zzzTemporary19 : -2000000000
zzzTemporary2 : null
zzzTemporary20 : -2000000000
zzzTemporary21 : -2000000000
zzzTemporary22 : -2000000000
zzzTemporary23 : -2000000000
zzzTemporary24 : -2000000000
zzzTemporary25 : -2000000000
zzzTemporary26 : -2000000000
zzzTemporary27 : -2000000000
zzzTemporary3 : null
zzzTemporary4 : null
zzzTemporary5 : null
zzzTemporary6 : null
zzzTemporary7 : null
zzzTemporary8 : null
zzzTemporary9 : -2000000000

1 instance(s) updated
Example command to create a child MO under the ENodeBFunction MO created in step 2.

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1 GeraNetworkId=1
Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1
GeraNetworkId : 1
userLabel: null
1 instance(s) updated

Example command to create an MO with Complex Data Type Attribute ( Sequence Attributes ) under the ENodeBFunction MO created in step 1.

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1 ENodeBFunctionId=1, x2BlackList=[{enbId=1,mcc=1,mnc=123,mncLength=2}] 
Note: a sequence data type attribute is defined within square brackets.

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
ENodeBFunctionId : 1
alarmSuppressed : false
collectTraceStatus : null
csfbMeasFromIdleMode : true
dnsLookupOnTai : ON
dnsLookupTimer : 0
dscpLabel : 24
eNBId : 1015
eNodeBPlmnId : {mcc=272, mnc=7, mncLength=2}
forcedSiTunnelingActive : false
initPreschedulingEnable : true
licCapDistrMethod : SYSTEM
maxRandc : 255
mfbiSupport : null
minRandc : 1
nnsfMode : RPLMN_IF_SAME_AS_SPLMN
oaMLinkSuperVisionActive : true
pwsPersistentStorage : OFF
randUpdateInterval : 200
rrcConnReestActive : false
s1HODirDataPathAvail : false
s1RetryTimer : 30
schedulingStrategy : ROUND_ROBIN
sctpRef : null
technicianPresent : null
tHODataFwdReordering : 50
timePhaseMaxDeviation : 100
timeAndPhaseSynchCritical : false
tOutgoingHoExecCdma1xRtt : 5
tRelocOverallValue : 5
ulSchedulerDynamicBWAllocationEnabled : true
upIpAccessHostRef : null
upIpAddressRef : null
userLabel : null
x2BlackList : x2BlackList : [{mcc=1, mnc=123, mncLength=2, enbId=1}]
x2IpAddrViaS1Active : true
x2retryTimerMaxAuto : 1440
x2retryTimerStart : 30
x2SetupTwoWayRelations : true
x2WhiteList : null
zzzTemporary1 : null
zzzTemporary10 : -2000000000
zzzTemporary11 : -2000000000
zzzTemporary12 : -2000000000
zzzTemporary13 : -2000000000
zzzTemporary14 : -2000000000
zzzTemporary15 : -2000000000
zzzTemporary16 : -2000000000
zzzTemporary17 : -2000000000
zzzTemporary18 : -2000000000
zzzTemporary19 : -2000000000
zzzTemporary2 : null
zzzTemporary20 : -2000000000
zzzTemporary21 : -2000000000
zzzTemporary22 : -2000000000
zzzTemporary23 : -2000000000
zzzTemporary24 : -2000000000
zzzTemporary25 : -2000000000
zzzTemporary26 : -2000000000
zzzTemporary27 : -2000000000
zzzTemporary3 : null
zzzTemporary4 : null
zzzTemporary5 : null
zzzTemporary6 : null
zzzTemporary7 : null
zzzTemporary8 : null
zzzTemporary9 : -2000000000

1 instance(s) updated
Note: It is possible to supply any number of attribute names and values which are separated by commas. If creating a Managed Object with any mandatory attributes, these attributes must be supplied. When supplying string data type attribute values quotation marks are optional, however if quotation marks are not supplied only alphanumeric, dashes and underscore characters can be used.

Example command to create attributes of type MO ref under the ENodeBFunction MO created in step 1.

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1, QciTable=3 QciTableId=3, reservedBy=["MeContext=ERBS001,ManagedElement=1"]
Note: a list data type attribute is defined within square brackets.

Example Command Response:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,QciTable=3
QciTableId : 3
reservedBy : MeContext=ERBS001,ManagedElement=1

1 instance(s) updated

_______________________________________________________________________________________________________________________________________________________
Note: If it is required to perform any of the following commands in an existing non-live configuration the -c=<configName> or --config=<configName> option can be appended to the end of the command. Please refer to create config

Example command to modify a list of simple modeled attribute(s):

cmedit set MeContext=ERBS2000, ManagedElement=1 userLabel:sampleUserLabel, productNumber=CXC101101
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000,ManagedElement=1
			
1 instance(s) updated
Example command to modify a structured complex attribute:

cmedit set MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1 eNodeBPlmnId=(mcc=999,mnc=666,mncLength=2)
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1
			
1 instance(s) updated
Note: a STRUCT dataType attribute is specified within round or curly brackets, with members separated by commas

Example command to modify an enumerated attribute:

cmedit set MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1 dnsLookupOnTai:OFF
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1

1 instance(s) updated
Example command to modify a sequenced complex data attribute in the live configuration:

cmedit set MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1 x2BlackList:[{enbId=0,mcc=100,mnc=60,mncLength=2}, {enbId=100,mcc=999,mnc=999,mncLength=3}, {enbId=100000,mcc=500,mnc=10,mncLength=2}] --force 
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1

1 instance(s) updated
Note: a SEQUENCE dataType attribute is specified within square brackets

Example command to set an attribute to a null value in the live configuration:

cmedit set ManagedElement=SGSN-16A-CP01-V102,MmeFunction=1 userlabel=<null>
or
cmedit set ManagedElement=SGSN-16A-CP01-V102,MmeFunction=1 userlabel=<empty>
Example Command Response:

SUCCESS FDN : MeContext=SGSN-16A-CP01-V102,MmeBFunction=1

1 instance(s) updated
Note the angular brackets syntax for <null> and <empty>

_______________________________________________________________________________________________________________________________________________________
Tutorial: Set Node Data
< Back To Cmedit

Note: If it is required to perform any of the following commands in an existing non-live configuration the -c=<configName> or --config=<configName> option can be appended to the end of the command. Please refer to create config

Modify a list of simple modeled attribute(s)

Example Command:

cmedit set ERBS2000 ManagedElement userLabel=sampleUserLabel, productNumber=CXC101101
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000,ManagedElement=1
 
1 instance(s) updated
Modify an enumerated attribute in the live configuration

Example Command:

cmedit set ERBS2000 ENodeBFunction dnsLookupOnTai:OFF
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1
 
1 instance(s) updated
Set a simple modeled attribute for all instances of ENodeBFunction from under each of the MeContexts in the collection "CollectionOne"

Example Command:

cmedit set CollectionOne ENodeBFunction userLabel=sampleUserLabel --force
Example Command Response:

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
 
2 instance(s)
Filter for object instances of type EUtranCellFDD in the ERBS_NODE_MODEL namespace with version 3.1.72 across all nodes defined in the network and filtered on one attribute containing a partial String-value, to set one attribute on these Managed Objects

Example Command:

cmedit set * EUtranCellFDD.userLabel==*sample* tac=13254 -ns=ERBS_NODE_MODEL -v=3.1.72 --force
Example Command Response:

SUCCESS FDN : MeContext=Node001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=Node002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
2 instance(s) updated
Note: that == is used to specify the criteria. A single = (or a colon) is used to set data

Filter for object instances of type EUtranCellFDD under nodes with an ID starting with a partially specified value and filtered on one attribute value equal to a specific String-value, to set one attribute on these Managed Objects. The change is to be made across all node versions in the network

Example Command:

cmedit set ERBS* EUtranCellFDD.userLabel==sampleUserLabel userLabel:"User Label With Spaces" --force
(Note: the value for a string object has to be enclosed in quotes when it contains any special characters like space, full stop or dollar sign )

Example Command Response:

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
2 instance(s) updated
Set an attribute on instances of type GeranFreqGroup underneath 2 FDN's

Example Command:

cmedit set MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1; MeContext=ERBS002,ManagedElement=1 GeranFreqGroup userLabel="New Label" --force
(Note: the FDNs do not have to point to the direct parent of the MO to be modified, but can be any MO in the network tree above that MO)

Example Command Response:

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=1
 
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=1
 
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=2
 
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1,GeranFreqGroup=3
 
4 instance(s) updated
Filter for object instances of type EUtranCellFDD under nodes with an ID ending with a partially specified value filtered by one attribute with values ending with a specific String-value and filtered by another attribute with a value less-than or equal to a specific numeric value, to set multiple attributes on these Managed Objects. The change is to be made across all node versions in the network. However, one of the attributes the command is intending to set, earfcndl, is a restricted attribute. Once the value of this attribute is initialized, it cannot be modified

Example Command:

cmedit set *001 EUtranCellFDD.(userLabel==*"sampleUserLabel", earfcndl<=17000) earfcndl:17999, earfcnul=20000 --force
(Note: the value for a string object has to be enclosed in quotes when it contains any special characters like space)

Example Command Response:

FAILED FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS001-1
Error 9999 : Internal Error Model Constraint Violated: Reason: Attribute is immutable and was already set, Affected Entity=earfcndl; Supplied Value=17999
              
Note: multiple filters can be specified in the MOI search criteria. Data will be set only on the MOIs(s) which match the search criteria

Example command, filter for object instances of type EUtranCellFDD under all nodes and filtered by multiple attribute values, to set one attribute on these Managed Objects. The change is to be made across all node versions in the network

cmedit set * EUtranCellFDD.(userLabel==*, cellId==1) tac:13254 --force
Example Command Response:

SUCCESS FDN : MeContext=NODE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
3 instance(s) updated
Filter for object instances of type EUtranCellFDD under all nodes and filtered by an attribute value not-equal-to a specific value, to set one attribute on these Managed Objects. The change is to be made across all node versions in the network

Example Command:

cmedit set * EUtranCellFDD.(userLabel==*, cellId!=5) tac=13254 --force
Example Command Response:

SUCCESS FDN : MeContext=NODE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
3 instance(s) updated
Set different values on the same attribute used across multiple MOs for a given search filter

Example Command:

cmedit set * ManagedElement.userLabel==ERBS1,ENodeBFunction.dscpLabel>=36, EUtranCellFDD.earfcndl==17000 ManagedElement.userLabel=ERBS1_ME1, ENodeBFunction.userLabel:ERBS1_ENODEB1 --force
Example Command Response:

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
2 instance(s) updated
Set multiple attributes, specifying multiple node IDs in the ERBS_NODE_MODEL namespace with version 8.1.140 and filtered by one attribute value greater-than or equal to a specific value

Example Command:

cmedit set Node001;Node002 ENodeBFunction.dscpLabel>=27 userLabel=EQUAL; dscpLabel=27 -ns=ERBS_NODE_MODEL -v=8.1.140 --force
Example Command Response:

SUCCESS FDN : MeContext=Node001,ManagedElement=1,ENodeBFunction=1
 
SUCCESS FDN : MeContext=Node002,ManagedElement=1,ENodeBFunction=1
 
2 instance(s) updated
Set multiple attributes, specifying multiple node IDs in the ERBS_NODE_MODEL namespace with version 3.1.72 and filtered by multiple attribute value ranges

Example Command:

cmedit set Node001;Node002 ENodeBFunction.(dscpLabel>=27, x2retryTimerStart<1000) userLabel:EQUAL, dscpLabel:27 -ns=ERBS_NODE_MODEL -v=3.1.72 --force
Example Command Response:

SUCCESS FDN : MeContext=Node001,ManagedElement=1,ENodeBFunction=1
 
SUCCESS FDN : MeContext=Node002,ManagedElement=1,ENodeBFunction=1
 
2 instance(s) updated
Set multiple attributes on specific Managed Objects, specifying a node ID and filtered by multiple attribute value ranges

Example Command:

cmedit set ERBS001 ENodeBFunction.userLabel==ENODEB1, EUtranCellFDD.tac==13254, EUtranFreqRelation.qOffsetFreq==-14 EUtranCellFDD.userLabel="sample user label", EUtranFreqRelation.qOffsetFreq=-16, EUtranCellFDD.cellRange=30 --force
Example Command Response:

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1,EUtranFreqRelation=1
 
2 instance(s) updated
Set multiple attributes on specific and multiple Managed Objects, specifying a node ID and filtered by multiple attribute value ranges

Example Command:

cmedit set ERBS001 ENodeBFunction.userLabel==ENODEB1, EUtranCellFDD.tac==13254, EUtranFreqRelation.qOffsetFreq==-14 userLabel="sample user label"; EUtranFreqRelation.pMax:25 --force
Example Command Response:

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=1,EUtranFreqRelation=1
 
3 instance(s) updated
Modify a sequenced complex data attribute

Example Command:

cmedit set ERBS2000 ENodeBFunction x2BlackList:[{enbId=0,mcc=100,mnc=60,mncLength=2}, {enbId=100,mcc=999,mnc=999,mncLength=3}, {enbId=100000,mcc=500,mnc=10,mncLength=2}]
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000,ManagedElement=1,ENodeBFunction=1
 
1 instance(s) updated
Modify the MIM information of a node (a structured complex attribute)

Example Command:

cmedit set ERBS2000 ManagedElement mimInfo=(mimVersion="3.1.72", mimRelease="", mimName="") -ns=CPP_NODE_MODEL -v=3.12.0
Example Command Response:

SUCCESS FDN : MeContext=ERBS2000 ,ManagedElement=1
 
1 instance(s) updated
Set userLabel attribute to a null value for all MmeFunction MOs in the live configuration

Example Command:

cmedit set MmeFunction userlabel:<null>
or
cmedit set MmeFunction userlabel:<empty>
Example Command Response:

SUCCESS FDN : MeContext=SGSN-16A-CP01-V102,MmeBFunction=1
 
1 instance(s) updated

_______________________________________________________________________________________________________________________________________________________

Tutorial: Creating ,Executing and Managing Aliases
< Back To CLI

Refer to alias help page for alias syntax and context description

Use Case 1 : Creating alias
Alias with no argument

alias "ls" "cmedit get * NetworkElement"
Example Command Response:

alias created
Alias with one argument

alias "del_1 $1" "cmedit delete * ENodeBFunction.userLabel==$1"
Example Command Response:

alias created
Alias with one argument used multiple times

alias "del_2 $1" "cmedit delete * ENodeBFunction.(userLabel==$1, zzzTemporary2==$1)"
Example Command Response:

alias created
Alias with multiple arguments

alias "create_MC $1 $2 $3" "cmedit create MeContext=$1 MeContextId=$1,neType=$2,platformType=CPP -ns=OSS_TOP -version=$3"
Example Command Response:

alias created
Use Case 2 : Executing alias
Alias with no argument

Specify the name of the alias (for example "ls") with no argument and press enter.

ls
As shown above, the alias will be executed and the response will be printed out in the CLI. Note: The alias will be replaced by the aliased command.

cmedit get * NetworkElement

FDN : NetworkElement=LTE01ERBS00001

FDN : NetworkElement=LTE01ERBS00002

FDN : NetworkElement=LTE01ERBS00003


3 instance(s)
Alias with argument (s)

Specify the name of the alias with required number of argument-values and press enter.

create_MC LTE200ERBS00003 ERBS 3.0.0
As shown above, the alias will be executed and the response will be printed out in the CLI. Note: The alias was replaced by the aliased command after substituting the argument values.

cmedit create MeContext=LTE200ERBS00003 MeContextId=LTE200ERBS00003,neType=ERBS,platformType=CPP -ns=OSS_TOP -version=3.0.0

FDN : MeContext=LTE200ERBS00003
neType : ERBS
MeContextId : LTE200ERBS00003
platformType : CPP

1 instance(s) updated
Use Case 3 : Finding alias
Finding a specific alias

cmedit get * CliAlias.name==aliases CliAlias.* -t
Example Command Response:

CliAlias
arguments   command                 commandContext  name        userId
            get * CliAlias.* -t     cmedit          aliases


1 instance(s)
Finding all aliases

cmedit get * CliAlias.* -t
Example Command Response:

CliAlias
arguments   command                 commandContext  name        userId
            get * CliAlias.* -t     cmedit          aliases
            delete * CliAlias       cmedit          unalias


2 instance(s)
Note: It is also possible to make aliases for these commands. For example, one can make an alias named "aliases" as shown below; to find all aliases.

alias "aliases" "cmedit get * CliAlias.* -t"
Example Command Response:

alias created
Execute the alias command

aliases
Example Command Response:

cmedit get * CliAlias.* -t

    CliAlias
arguments   command                 commandContext  name        userId
            get * CliAlias.* -t     cmedit          aliases
            delete * CliAlias       cmedit          unalias


2 instance(s)
Use Case 4 : Deleting alias
Deleting a specific alias and Confirmation Request.

cmedit delete * CliAlias.name==aliases
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
PO : CliAlias:null
 
1 Object(s) will be deleted by this commands. 
 
Execute
 
Response (after confirmation)

SUCCESS PO : CliAlias:null
 
1 instance(s) deleted
 
Note: This command was forced for execution following automatic Preview Mode
 
Deleting all aliases and Confirmation Request.

cmedit delete * CliAlias.name==*
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
PO : CliAlias:null
 
PO : CliAlias:null
 
2 Object(s) will be deleted by this commands. 
 
Execute
 
Response (after confirmation)

SUCCESS PO : CliAlias:null
 
SUCCESS PO : CliAlias:null
 
2 instance(s) deleted
 
Note: This command was forced for execution following automatic Preview Mode
 
Deleting all aliases using preview option.

cmedit delete * CliAlias.name==* --preview
Response

Command Preview - List of Affected MO(s):
 
PO : CliAlias:null
 
PO : CliAlias:null
 
2 Object(s) will be deleted by this command.
 
Note: It is also possible to make aliases for these commands. For example, one can make an alias named "unaliases" as shown below; to delete all aliases.

alias "unalias" "cmedit delete * CliAlias.name==* CliAlias -t"
Example Command Response:

alias created
_______________________________________________________________________________________________________________________________________________________

Tutorial: Delete Node Data by FDN
< Back To Cmedit

Example command to delete an ENodeBFunction and all MOIs under the ENodeBFunction:

cmedit delete MeContext=LTE001,ManagedElement=1,ENodeBFunction=1 -ALL --force
Example Command Response:

SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC002
3 instance(s) deleted

Note: the -ALL parameter is used to force the deletion of MOIs, even if other MOIs are defined under the specified MOI. The specified FDN and all MOIs under the FDN are deleted

Example command to delete the ENodeBFunction and all MOIs under the 2 ENodeBFunctions:

cmedit delete MeContext=LTE001,ManagedElement=1,ENodeBFunction=1; MeContext=LTE002,ManagedElement=1,ENodeBFunction=1 -ALL --force
Example Command Response:

SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC002
SUCCESS FDN : MeContext=LTE002,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=LTE002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
5 instance(s) deleted

Example command to attempt to delete an ENodeBFunction instance, which has at least 1 child defined below it:

cmedit delete MeContext=LTE001,ManagedElement=1,ENodeBFunction=1 --force
Example Command Response:

FAILED FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
Error 1011 : Cannot delete MeContext=LTE001,ManagedElement=1,ENodeBFunction=1 because it has one or more child MOs Delete children first. Hint : Append -ALL to end of DELETE command to automatically delete all children.
Note: it is not allowed to delete an MOI if MOIs are defined below the FDN. To force a delete of the FDN, the -ALL parameter must be specified

Example command to delete a ENodeBFunction, which has no Child MOs defined (for example they have been deleted already):

cmedit delete MeContext=LTE001,ManagedElement=1,ENodeBFunction=1 --force
Example Command Response:

SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
1 instance(s) deleted

Note: It is possible to delete an FDN if no MOIs are defined under the FDN, without specifying the -ALL parameter

Note: It is not possible to delete a system created MO directly. To delete a system created MO you must delete it's user created parent MO
_______________________________________________________________________________________________________________________________________________________
Tutorial: Delete Node Data
< Back To Cmedit

Delete ENodeBFunction instances and all Child MOIs under node with name LTE001

Example Command:

cmedit delete LTE001 ENodeBFunction -ALL --force
Example Command Response:

SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
4 instance(s) deleted
Delete ENodeBFunction instances and all MOIs under them for each of the MeContexts in the collection "CollectionOne"

Example Command:

cmedit delete CollectionOne ENodeBFunction -ALL --force
Example Command Response:

SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
SUCCESS FDN : MeContext=LTE002,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=LTE002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
4 instance(s) deleted
Attempt to delete ENodeBFunction instances under a node with name LTE001, some of which have Child MOs defined below them whilst others have no Child MO

Example Command:

cmedit delete LTE001 ENodeBFunction --force
Example Command Response:

FAILED FDN : SubNetwork=ERBS-SUBNW-1,MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
Error 9999 : Internal Error The operation was reverted because of a system error (Node ID: svc-1-mscm. Exception occurred: [Error received from node: aNodeError])
Note: MOs which have child MOs defined below them will not be deleted even if they satisfy the specified, filtered criteria.

Delete ENodeBFunction with the incorrect TYPE_FOR_DELETION specified

Example Command:

cmedit delete LTE001 ENodeBFunction ManagedElement -ALL
Example Command Response:

0 instance(s) found

Delete ENodeBFunction instances with userLabel attribute equal to "LTE"

Example Command:

cmedit delete LTE001;LTE002;LTE003 ENodeBFunction.userLabel=="LTE" --force
Example Command Response:

SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=LTE002,ManagedElement=1,ENodeBFunction=1
2 instance(s) deleted

Note: Perform a delete when filtering across a single MO Type, there is no need to specify the MO type in the delete command.

Delete MOs across all nodes defined in the network, which satisfy a specified, filtered criteria. The MOs to be deleted have no Child MOs

cmedit delete LTE001;LTE002;LTE003 EUtranCellFDD.(EUtranCellFDDId==EUC001, cellId==123) EUtranCellFDD --force
Example Command Response:

SUCCESS FDN : MeContext=LTE001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
SUCCESS FDN : MeContext=LTE002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=EUC001
2 instance(s) deleted

Attempt to delete ENodeBFunction instances, some of which have attributes filters on different MO types

Example Command:

 cmedit delete LTE001;LTE002;LTE003 ENodeBFunction.attr1==x,EUtranCellFDD.attrA==y ENodeBFunction
Example Command Response:

SUCCESS FDN : MeContext=LTE002,ManagedElement=1,ENodeBFunction=1
1 instance(s) deleted

Note: The user shall specifically state the MO Class to be deleted when querying over multiple type MOs.

Note: It is not possible to delete a system created MO directly. To delete a system created MO you must delete it's user created parent MO

_______________________________________________________________________________________________________________________________________________________
Tutorial: Import CM Data
< Back To Cmedit

Drag and drop the file to be imported into the ENM CLI.

Example Drag and Drop Response:

3gppImportFile.xml added to workspace
or

dynamicImportFile.txt added to workspace
Note Import file must be ordered by managed object hierarchy. Parents must be created before their children.

Import the data file from step 1 to non-live configuration:

Example Command - 3GPP Format:

cmedit import -f file:3gppImportFile.xml -ft 3GPP -t myConfig
or

cmedit import -f file:3gppImportFile.xml --filetype 3GPP --target myConfig
Example Command Response:

Import started with job ID 1

All nodes that are updated by the import file are automatically copied to the non-live configuration.

Note myConfig must be a pre-existing configuration (to create the configuration please refer to the config create command).

Import the data file from step 1 to the live configuration:

Example Command - Dynamic Format:

cmedit import -f file:dynamicImportFile1.csv -ft dynamic -t Live
or

cmedit import -f file:dynamicImportFile1.csv --filetype dynamic --target Live
Example Command Response:

Import started with job ID 1

No copy will occur as we are importing into the live configuration.

Notes:
Ericsson dynamic file format is available with the Dynamic CM Value Package license.
Configuration parameter must be included for import to the live configuration.
Import the data file from step 1 to the non-live configuration using NO_COPY:

Example Command - 3GPP Format:

cmedit import -f file:3gppImportFile.xml -ft 3GPP -t myConfig -nc
or

cmedit import -f file:3gppImportFile.xml --filetype 3GPP --target myConfig --nocopy
All nodes that are updated by the import file are not automatically copied to the non-live configuration.

Import the data file from step 1 to the live configuration by disabling instance validation phase

Example Command - 3GPP Format:

cmedit import -f file:3gppImportFile.xml -ft 3GPP -t Live -val noinstance
or

cmedit import -f file:3gppImportFile.xml --filetype 3GPP --target Live --validate noinstance
Instance validation will be skipped for the import job.

Import the data file from step 1 to the non-live configuration with continue-on-error on node level

Example Command - Dynamic Format:

cmedit import -f file:dynamicImportFile.txt -ft dynamic -t myConfig -e node
or

cmedit import -f file:dynamicImportFile.txt --filetype dynamic --target myConfig --error node
If a non-fatal error is encountered for a node, import will mark the operation as failed, skip the remaining operations on the current node and will continue to execute operations on subsequent nodes. Non-fatal errors such as attempting to create an MO that already exists. Fatal errors such as an incorrectly formatted import file or not well-formed import file will still cause immediate import failure. The user can also provide stop as a value for the error flag, resulting in import stopping on first error encountered, this is the default behaviour for import.for all other possible continue on error values please refer Import Data

Query all job details:

Example Command:

cmedit import -st
or

cmedit import --status
Example Command Response:



Query job details for a specific job id.

Example Command querying successful job:

cmedit import -st -j 13
or

cmedit import --status --job 13
Example Command Response:



Query operation details for a specific job id.

Example Command querying successful job:

cmedit import -st -j 13 -v
or

cmedit import --status --job 13 --verbose
Example Command Response:



Query job details for a specific job id.

Example Command querying failed job:

cmedit import --status --job 14
Example Command Response:



Retry an Import Job for a specific job id.

Example Command retrying a failed job:

cmedit import --retry --job 17
Example Command querying the status of a retried job:

cmedit import --status --job 17 -v
Example Command Response:



Cancel an Import Job for a specific job id.

Example Command for cancelling a job:

cmedit import --cancel --job 100
Example Command Response:



Example Command querying the status of a cancelled job:

cmedit import --status --job 100 -v
Example Command Response:



Query job details between the specified begin and end time.

Example Command querying successful job:

cmedit import -st --begin 2016-11-08T08:56:48 --end 2016-11-08T12:10:27
or

cmedit import --status --begin 2016-11-08T08:56:48 --end 2016-11-08T12:10:27
Example Command Response:



Query job details with specified begin time.

Example Command querying successful job:

cmedit import -st --begin 2016-11-08T12:10:27
or

cmedit import --status --begin 2016-11-08T12:10:27
Example Command Response:



Query job details with specified end time.

Example Command querying successful job:

cmedit import -st --end 2016-11-08T12:10:27
or

cmedit import --status --end 2016-11-08T12:10:27
Example Command Response:



Sample 3GPP Import File

Sample 3GPP Import File
Sample Dynamic Import File

Sample Dynamic Import File

_______________________________________________________________________________________________________________________________________________________

Create an Export File in 3GPP Format Using a User-Defined Filter
Context
< Back To Export CM Data

Objective

This tutorial describes how to create an export file in 3GPP format using a user-defined filter.

Outline

Create a User-Defined Filter File
Drag and Drop the User-Defined Filter File into the ENM CLI
Start an Export Job in 3GPP Format using the User-Defined Filter
Check the Export Job Progress
Check that the Export Job is Completed
Download the Generated Export File
Prerequisites
There are nodes on the system to be exported.
Steps
Create a User-Defined Filter File
Create a User-Defined Filter File using a .txt file. See User-Defined Filter File for more information.

Drag and Drop the User-Defined Filter File into the ENM CLI
When the file is dragged and dropped into the ENM CLI, the following confirmation message is displayed:

EUtranCellFDDFilter.txt added to workspace
Start an Export Job in 3GPP Format using the User-Defined Filter
Run the following command:

cmedit export -n * --filetype 3GPP -f file:EUtranCellFDDFilter.txt -jn Export3gppUserDefined
The command returns an export job name and an export job ID.

Export job Export3gppUserDefined started with job ID 7
Note: To export from a non-live configuration, include the --source flag. Live is the default configuration.

Check the Export Job Progress
Run the following command:

cmedit export --status --job 7
The command returns the status of an export job with the job ID 7 as displayed in the following example:

Job status

Job ID	Job name	Status	Start date/time	End date/time	Elapsed time	Expected nodes exported	Nodes exported	Nodes not exported	Nodes no match found	MOs exported	File name	User name
7	Export3gppUserDefined	STARTED	2017-05-09T15:06:49			40	16	0	0	16		administrator
The Expected nodes exported field lists the number of nodes matched by the node scope. The is the expected number of nodes to be exported.
The Nodes exported field lists the number of nodes successfully exported.
The Nodes not exported field lists the number of nodes not successfully exported.
The Nodes no match found field lists the number of nodes for which no match was found by the node scope.
The MOs exported field lists the total number of MOs exported for all nodes exported.
The File name field describes the name and location of the generated export file.
The User name field describes the ID of the user that executed the export job.
The above result confirms the Status as 'STARTED' for the job ID 7.

Check that the Export Job is Completed
Run the following command:

cmedit export --status --job 7
The command returns the status of an export job with the job ID 7 as displayed in the following example:

Job status

Job ID	Job name	Status	Start date/time	End date/time	Elapsed time	Expected nodes exported	Nodes exported	Nodes not exported	Nodes no match found	MOs exported	File name	User name
7	Export3gppUserDefined	COMPLETED	2017-05-09T15:06:49	2017-05-09T15:06:54	0h 0m 4s	40	40	0	0	40	/ericsson/batch/data/export/3gpp_export/Export3gppUserDefined.zip	administrator
Download the Generated Export File
Run the following command:

cmedit export --download --job 7
The command will download the export file to the client browser.

downloading...
Note: If the job is not in a 'COMPLETED' state, then the response will indicate that this job is not available for download.

Result
The user has downloaded to the client an export file containing CM data for the specified nodes.
_______________________________________________________________________________________________________________________________________________________

Create an Export File in 3GPP Format Using a Node Scope
Context
< Back To Export CM Data

Objective

This tutorial describes how to create an export file in 3GPP format using a node scope.

Outline

Start an Export Job in 3GPP Format using a Node Scope
Check the Export Job Progress
Check that the Export Job is Completed
Download the Generated Export File
Prerequisites
There are nodes on the system to be exported.
Steps
Start an Export Job in 3GPP Format using a Node Scope
Run the following command:

cmedit export -n * --filetype 3GPP -jn Export3gppNodeScope
The command returns an export job name and an export job ID.

Export job Export3gppNodeScope started with job ID 3
Note: To export from a non-live configuration, include the --source flag. Live is the default configuration.

Check the Export Job Progress
Run the following command:

cmedit export --status --job 3
The command returns the status of an export job with the job ID 3 as displayed in the following example:

Job status

Job ID	Job name	Status	Start date/time	End date/time	Elapsed time	Expected nodes exported	Nodes exported	Nodes not exported	Nodes no match found	MOs exported	File name	User name
3	Export3gppNodeScope	STARTED	2017-05-09T12:35:24			40	16	0	0	124459		administrator
The Expected nodes exported field lists the number of nodes matched by the node scope. The is the expected number of nodes to be exported.
The Nodes exported field lists the number of nodes successfully exported.
The Nodes not exported field lists the number of nodes not successfully exported.
The Nodes no match found field lists the number of nodes for which no match was found by the node scope.
The MOs exported field lists the total number of MOs exported for all nodes exported.
The File name field describes the name and location of the generated export file.
The User name field describes the ID of the user that executed the export job.
The above result confirms the Status as 'STARTED' for the job ID 3.

Check that the Export Job is Completed
Run the following command:

cmedit export --status --job 3
The command returns the status of an export job with the job ID 3 as displayed in the following example:

Job status

Job ID	Job name	Status	Start date/time	End date/time	Elapsed time	Expected nodes exported	Nodes exported	Nodes not exported	Nodes no match found	MOs exported	File name	User name
3	Export3gppNodeScope	COMPLETED	2017-05-09T12:35:24	2017-05-09T12:36:07	0h 0m 43s	40	40	0	0	319496	/ericsson/batch/data/export/3gpp_export/Export3gppNodeScope.zip	administrator
Download the Generated Export File
Run the following command:

cmedit export --download --job 3
This command will download the export file to the client browser.

downloading...
Note: If the job is not in a 'COMPLETED' state, the response will indicate that this job is not available for download.

Result
The user has downloaded to the client an export file containing CM data for the specified nodes.
_______________________________________________________________________________________________________________________________________________________

Tutorial: Initiate a Modeled Action on a MOI
< Back To Cmedit

Note: If it is required to perform any of the following commands in an existing non-live configuration, the -c=<configName> or --config=<configName> option can be appended to the end of the command. Please refer to create config

Action by FDN

Example Command:

cmedit action MeContext=ERBS0001,ManagedElement=1 manualRestart.(restartRank=RESTART_WARM,restartReason=PLANNED_RECONFIGURATION,restartInfo=someInfo)
Example Command Response:

SUCCESS FDN : MeContext=ERBS0001,ManagedElement=1,ENodeBFunction=1
1 instance(s)
Action Using MO Query with Node Name

Example Command:

cmedit action ERBS0001;ERBS0002 ManagedElement.userLabel==sample* manualRestart.(restartRank=RESTART_WARM;restartReason=PLANNED_RECONFIGURATION;restartInfo=someInfo) --force
Example Command Response:

SUCCESS FDN : MeContext=ERBS0001,ManagedElement=1 userLabel : sampleUserLabel
SUCCESS FDN : MeContext=ERBS0002,ManagedElement=1 userLabel : sampleUserLabel
2 instance(s)
Note 1: For more examples of different 'Scopes' and 'Filters' check the "Get Node Data tutorial".

Note 2: As it is possible to target more than one MO Types with one action command (similar to the get command) this will not be successful unless all these types support the same modeled action.

Action Using MO Query with Node Name Resulting in Partial Failure

Example Command:

cmedit action ERBS000* ManagedElement.userLabel==sample* manualRestart.(restartRank=RESTART_WARM;restartReason=PLANNED_RECONFIGURATION;restartInfo=someInfo) --force
Example Command Response:

SUCCESS FDN : MeContext=ERBS0001,ManagedElement=1 userLabel : sampleUserLabel
SUCCESS FDN : MeContext=ERBS0002,ManagedElement=1 userLabel : sampleUserLabel
FAILED FDN : MeContext=ERBS0003,ManagedElement=1 userLabel : sampleUserLabel
Error 9999 : Internal Error The operation was reverted because of a system error (Node ID: svc-1-mscm. Exception occurred: [Error received from node: aNodeError])
Error 5008 : The command executed on 2 out of 3 objects
Action on ManagedElement under each of the MeContexts in the collection "CollectionOne"

Example Command:

cmedit action CollectionOne ManagedElement manualRestart.(restartRank=RESTART_WARM;restartReason=PLANNED_RECONFIGURATION;restartInfo=someInfo) --force
Example Command Response:

SUCCESS FDN : MeContext=ERBS0001,ManagedElement=1
SUCCESS FDN : MeContext=ERBS0002,ManagedElement=1
2 instance(s)


_______________________________________________________________________________________________________________________________________________________
How To Describe Modeled Data
< Back To Cmedit

List of Contents

Describe Ne Type
Describe MO Type - Basic Examples
Describe MO Type with Options
Describe Multiple MO Types
Describe Mo Types with Attributes
1. Describe Network Element (NE) Type
 Command to describe version information for NeType

cmedit describe --netype <NE Type>
This example command returns version information for NE Type SGSN-MME. The list is populated from the model service. Some fields may be blank if information is unavailable in the model.

Example:

cmedit describe --netype SGSN-MME
Result:

The attributes of all SGSN-MME NE types deployed on the system are displayed.

2. Describe MO Type - Basic Examples
 Command to describe the latest versions in all namespaces of the specified MO Type

cmedit describe <Mo Type>
This example command returns descriptions for the most recent version of the MO Type in all namespaces.

Example:

cmedit describe managedelement
Result:

All Managed Elements for the latest version of each NE Type deployed on the system are displayed.

3. Describe MO Type Examples with Options
 Command to describe a specific version of MO Type only

cmedit describe <Mo Type> --version=<Version>
This example command returns descriptions for all namespaces of the specified MO Type version.

Example:

cmedit describe ManagedElement --version=G.1.301
Result:

All Managed Elements for the specified version deployed on the system are displayed.

 Command to describe MO Type for a specific namespace only

cmedit describe <Mo Type> --namespace=<Namespace>
This example command returns descriptions for the most recent version of the MO Type in the specified namespace.

Example:

cmedit describe managedelement --namespace=ERBS_NODE_MODEL
Result:

The latest version of the Managed Element for the specified namespace deployed on the system is displayed.

 Command to describe MO Type of a specific version and namespace only

cmedit describe <Mo Type> --namespace=<Namespace> --version=<Version>
This example command returns descriptions for the specified version and namespace of the MO Type.

Example:

cmedit describe managedelement --namespace=ERBS_NODE_MODEL --version=G.1.101
Result:

The Managed Element for the specified namespace and version is displayed.

 Command to describe all model instances of the specified type

cmedit describe <MO Type> --ALL
This example command returns all model instance descriptions across all namespaces and versions for the specified MO Type.

Example:

cmedit describe managedelement --all
Result:

All Managed Elements deployed on the system are displayed.

 Command to describe all model instances for the specified namespace

cmedit describe <Mo Type> -ns=<Namespace> --ALL
This example command returns all model instances for the specified namespace.

Example:

cmedit describe managedelement -ns ERBS_NODE_MODEL --all
Result:

All Managed Elements for the specified namespace deployed on the system are displayed.

4. Describe Multiple MO Types:
 Command to describe Multiple MO Types for latest versions in all namespaces

cmedit describe <Mo Type1>;<Mo Type2>;<Mo Type3>
This example command returns multiple descriptions for same MO Type. This occurs if you do not specify a namespace/version in the command.

Example:

cmedit describe ManagedElement;ENodeBFunction;EUtranCellFDD
Result:

All ManagedElements, ENodeBFunctions, and EUtranCellFDDs for the latest versions in each namespace deployed in the system are displayed.

 Command to describe Multiple MO Types for latest versions in the specified namespace

cmedit describe <Mo Type1>;<Mo Type2>;<Mo Type3> --namespace=<Namespace>
This example command returns descriptions for MO Types with the OSS_TOP namespace.

If a version is specified, the results are filtered to return the modeled descriptions for that version.

Example:

cmedit describe mecontext;managedelement -ns OSS_TOP
Result:

All MeContexts and ManagedElements for the latest version in the specified namespace are displayed.

5. Describe MO Types with Attributes:
 Command to describe latest MO Type with specified attribute

cmedit describe <Mo Type>.<Mo Attribute>
This example command returns a description(s) of the specified Mo Attribute.

(Note: The following command requests can specify the version and namespace options).

Example:

cmedit describe managedelement.healthcheckresult
Result:

All ManagedElement healthCheckResult attributes for the latest deployed version on the system is displayed.

 Command to describe latest MO Type with specified attribute in the specified namespace

cmedit describe <Mo Type>.<Mo Attribute> --namespace=<Namespace>
This example command returns descriptions of the specified MO Attribute and namespace. The command returns the description(s) for the attributes in that namespace for all model versions.

Example:

cmedit describe managedelement.healthcheckresult -ns ERBS_NODE_MODEL
Result:

All ManagedElement healthCheckResult attributes for the latest version in the specified namespace deployed on the system are displayed.

 Command to describe latest MO Type with specified multiple attributes

cmedit describe <Mo Type>.(<Mo Attribute1>,<Mo Attribute2>)
This example command returns descriptions of the specified attributes.

Example:

cmedit describe enodebfunction.(userlabel,enodebfunctionid)
Result:

All ENodeBFunction userLabel, and eNodeBFunctionId attributes for the latest version of each namespace deployed on the system are displayed.

 Command to describe latest MO Type with all attributes

cmedit describe <Mo Type>.*
This example command returns descriptions for all MO Attributes of the MO Type from all namespaces, and latest versions.

By default, inherited attributes from the super type are also displayed.

If namespace ERBS_NODE_MODEL is specified, OSS_TOP attributes (the inherited ones), and ERBS_NODE_MODEL attributes are returned.

Example:

cmedit describe managedelement.*
Result:

All ManagedElement attributes for the latest version in each namespace deployed on the system are displayed.

 Command to describe specific and all attributes on multiple MO Types

cmedit describe <Mo Type1>.*;<Mo Type2>.(<Mo Attribute1>,<Mo Attribute2>)
This example command returns descriptions of the all/specified attributes for multiple MOs at the same time.

Example:

cmedit describe ManagedElement.*;ENodeBFunction.(ENodeBFunctionId, pmRimReportErr)
Result:

All ManagedElement attributes and ENodeBFunction attributes (ENodeBFunctionId, pmRimReportErr) for the latest version in each namespace deployed on the system are displayed.
_______________________________________________________________________________________________________________________________________________________
Case Sensitivity in the cmedit Command Set
< Back To Cmedit

This page details which parts of the commands are case insensitive and which are not.

Case Insensitive
The following parts of cmedit commands are case insensitive:

MO class and attribute names
Action and Action parameter names
Struct and Struct member names
Case Sensitive
The following parts of cmedit commands are case sensitive:

Command keywords. All keywords are in lowercase. For example "cmedit", "get", "create"
Command options and flags. Most of the options and flags are in lowercase. Except "-ALL" (see delete and export commands)
Namespace names and versions
Attribute identifiers. All of the attribute identifiers are in lowercase. For example "ManagedElement.<cm>", "ManagedElement.<pm>"
String data. Any string values stored in the database or models, which include but not limited to:
FDNs
String values. The values of fields of type String. For example "My user label"
Enum values. The value of fields of type Enum are typically in UPPERCASE. For example "LOCKED", "UNLOCKED", "SHUTTING_DOWN"
Node Types. Since node types are also Enum values they are case sensitive. For example "ERBS", "RNC", "MGW"
Configuration names. Configuration names are defined by the user and need to be matched exactly
<null>
Example Use of Case Insensitivity
 Get a MO Class with Criteria Using a Case Insensitive Query

cmedit get * managedelement.userlabel
Response

This command returns all instances of MO Class "ManagedElement". The following is the information shown for one instance:
FDN: MeContext=LTE10ERBS00001,ManagedElement=1
userLabel: ExampleLabelValue
cmedit Command Set Special Characters
< Back To Cmedit

This tutorial details cmedit special characters and how to use them.
_______________________________________________________________________________________________________________________________________________________
Supported Characters in cmedit command arguments
Character	Description	Usage
[a-z][A-Z]	alphabetic characters	All MO class, scope name, RDN value and attribute value
[0-9]	numeric characters	All MO class, scope name, RDN value and attribute value
.	full stop	All scope name, RDN value and attribute value
?	question mark	All attribute value
!	exclamation mark	All RDN value and attribute value
@	at sign	All RDN value and attribute value
%	percent sign	All RDN value and attribute value
&	ampersand	All RDN value and attribute value
^	circumflex accent	All RDN value and attribute value
_	low line	All scope name, RDN value and attribute value
/	slash	All RDN value and attribute value
|	vertical bar	All RDN value and attribute value
-	hyphen-minus	All scope name, RDN value and attribute value but not as first character
=	equal	All attribute value but not as first character
$	dollar	All RDN value and attribute value but not more than one consecutive symbol
NOTE: Quotes are not required with supported characters.

What are Special Characters?
Special characters are any characters other than the supported characters. These characters must be wrapped in quotes to be accepted in the scope name or attribute value part of the command.

The set of special characters allowed in RDN value are:

*()[]\ and space

If an FDN contains an RDN value with special characters, the entire FDN String must be wrapped in quotes. The spaces at the beginning and/or at the end of the RDN value are stripped.

When a special character is used without quotes an error is displayed.

See the example below.

Special Characters Examples
 Get an MO Class with an FDN with Supported Characters in RDN value

cmedit get SubNetwork=ERBS-SUBNW-1,MeContext=ERBS@001,ManagedElement=1^5
Example Command Response:

This command returns the instance of MO Class "ManagedElement" with given FDN. The following information is displayed for one instance:

FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS@001,ManagedElement=1^5
ManagedElementId : 1^5
applicationConfiguration : []
healthCheckResult : {startTime=, message=, healthCheckResultCode=INITIAL_VALUE}
healthCheckSchedule : []
logicalName :
mimInfo : {mimVersion=1, mimRelease=160, mimName=ERBS_NODE_MODEL_H}
neType : null
platformType : null
productName :
productNumber :
productRevision :
productType : Node
site :
userLabel :
1 instance(s)
 Delete a MO Class with Supported Character in Attribute Value

cmedit delete * ENodeBFunction.userLabel==sample-UserLabel^01
Example Command Response:

This command deletes the instances of MO Class "ENodeBFunction" with attribute value containing allowed special character. The following information is displayed for one instance:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
1 instance(s) deleted
 Create a MO Class with Special Characters in Attribute Value (ipv6 address)

cmedit create SubNetwork=Eric3,MeContext=Ne-ipv6-R234,ManagedElement=1,Transport=1,Router=FRONTHAUL,InterfaceIPv6=FRONTHAUL,AddressIPv6=1 addressIPv6Id=1,address="2001:1b70:8210:8740::2c4/64"
Example Command Response:

This command creates the SubNetwork MO Class with attribute value containing Special Character wrapped in quotes. The following information is displayed in the response:

FDN : SubNetwork=Eric3,MeContext=Ne-ipv6-R234,ManagedElement=1,Transport=1,Router=FRONTHAUL,InterfaceIPv6=FRONTHAUL,AddressIPv6=1
                
addressIPv6Id=1
address=2001:1b70:8210:8740::2c4/64
1 instance(s) updated
 Get a MO Class with Special Characters in the RDN value

cmedit get "NetworkElement=Eric04 LTE01ERBS00088,PMICScannerInfo=USERDEF-node duplicate chack.Cont.Y.STATS"
Example Command Response:

The FDN contains RDN value with space symbol that is a Special Character, this must be wrapped in quotes. The following information is displayed in the response:

FDN : NetworkElement=Eric04 LTE01ERBS00088,PMICScannerInfo=USERDEF-node duplicate chack.Cont.Y.STATS
                
PMICScannerInfoId : USERDEF-node duplicate chack.Cont.Y.STATS
errorCode : -1
fileCollectionEnabled : true
id : 14
name : USERDEF-node duplicate chack.Cont.Y.STATS
nodeName : null
processType : STATS
ropPeriod : 900
status : ACTIVE
subscriptionId : 281476044782780
1 instance(s)
_______________________________________________________________________________________________________________________________________________________
ENM CLI Performance Tips
The Command Line Interface (CLI) is a powerful tool to search for and manipulate data in the network. This page contains guidelines for ENM CLI query optimization.

Queries on this page are constructed with the GET command, but the same may apply to SET and DELETE commands.

The syntax of the command is as follows:

cmedit get <nodeName...> criteria [filter] [options]
Query optimization
Searches over large parts of the network can be costly. Improve the response time of queries by searching over a subset of the network where possible.

This can be done in the following ways:

Node name scope reduction
Targeting data with criteria
Targeting data with filtering
Targeting data with options
Node name scope reduction
nodeName is used when multiple MOs need to be targeted. Node names or partial node names using wildcards (*) may be used to increase the scope of the search. The full node name gives the most efficient search, with partial name queries affecting more of the network.


 Query on node name

This is the most efficient way to query over node name LTE32ERBS00001.

cmedit get LTE32ERBS00001 enodebfunction

 Replace wildcard with partial wildcard to reduce query scope.

Original query

cmedit get * managedelement
Optimized query examples

cmedit get LTE32ERBS* enodebfunction
cmedit get *ERBS* enodebfunction

Targeting data with criteria
The query criteria can be used to reduce the search scope. It can be used to get a managed object (MO) with specific attribute values or to specify which attributes of the MO to return. When used in conjunction with wildcard or special identifier searches, criteria can increase the efficiency of the query greatly.

<MO Class>.*
Use wildcard to display all persistent attributes.

<MO Class>.<cm>
Use the special identifier <cm> to select all Configuration Management (CM) attributes of the specified MO Class.

<MO Class>.<pm>
Use the special identifier <pm> to select all Performance Management (PM) attributes of the specified MO Class.
(Note: Only supported on CPP platform types where node types support reading of PM counters as MO attributes.)

<MO Class>.<p>
Use the special identifier <p> to select all persistent attributes of the specified MO Class.

<MO Class>.<w>
Use the special identifier <p> to select all writable persistent attributes of the specified MO Class.

<MO Class>.<m>
Use the special identifier <p> to select all mandatory persistent attributes of the specified MO Class.


 Use criteria to reduce the number of attributes returned

Original query

This query will return all ManagedElement MOs in the network and all of their persistent attributes.

cmedit get * managedelement.*
Optimized query examples

Displays FDN and persisted attributes only.

cmedit get * managedelement.<p>
Displays FDN and site only for all ManagedElement MOs regardless of value.

cmedit get * managedelement.site
Return multiple attribute values. Displays FDN, site and productNumber for all ManagedElement MOs regardless of value.

cmedit get * managedelement.(site,productnumber)

 Use criteria to search by MO attribute value.

Original query

This query will return the FDN for all ManagedElement MOs in the network. Filter results further by querying specific attribute values.

cmedit get * managedelement
Optimized query examples

Query a single attribute value to return the FDN and site of all ManagedElement MOs at "SampleSite" site.

cmedit get * managedelement.site=="SampleSite"
Query multiple attribute values to return the FDN, site and productNumber of all ManagedElement MOs at "SampleSite" site with product number "ROF123".

cmedit get * managedelement.(site=="SampleSite",productnumber=="ROF123")

Targeting data with filtering
A query can target a large number of attributes, some of which we may not want to see in the search results. A filter can be used to override the attributes displayed in search results.


 Filter attributes on a complex query.

Original query

This query will return the FDN, site and productNumber of all ManagedElement MOs at "SampleSite" site with product number "ROF123".

cmedit get * managedelement.(site=="SampleSite",productnumber=="ROF123")
Filtered query examples

Display only FDN and site attributes as site is specified in the filter. In this example the site attribute is in the query and the filter.

cmedit get * managedelement.(site=="SampleSite",productnumber=="ROF123") managedelement.site
Display an attribute that is not part of the query. In this example the neType attribute is in the filter but not in the query.

cmedit get * managedelement.(site=="SampleSite",productnumber=="ROF123") managedelement.netype

 Incorrect use of filter

Do not use the filter in place of the criteria.

Original query

This query returns the FDN and site for all ManageElement MOs. In this case the criteria could have been used to display the same information in a more efficient way. This query is inefficient because it first gets all ManagedElement MOs with all of their persistent attributes. Then it displays only the FDN and site attributes. It throws away the remaining information.

cmedit get * managedelement.* managedelement.site
Correct query using criteria

This query gets only the FDN and site attributes of each ManagedElement MO.

cmedit get * managedelement.site

Targeting data with options
Use the following options to target data more specifically.

-ns or --namespace
Specify a particular namespace.

-v or --version
Specify a particular version.
@@@@@manual cmedit get@@@@

Syntax
 Syntax to get an Object by Specifying the FDN

cmedit get <FDN> [get by fdn options]
cmedit get <FDN> criteria [filter] [options]
 Syntax to get an object by query

cmedit get [scope type] scope criteria [filter] [options]
 Syntax to get by node name or view contents of a collection

cmedit get [scope type] scope [node details options]
 Syntax to get an object by name

cmedit get [scope type] scope criteria_for_MO_by_Id [options]
Scope type
Use Scope Type option to restrict the scope to:

collection [ -co | --collection ]
nodenames [ -n | --node ]
saved search [ -sa | --savedSearch ] (*).

(*) not supported for get by node name or view contents of a collection.

Scope
Use the scope to specify node names or collections to search on.

<Node Name>
One or many node names can be defined as scope. Multiple node names should be separated with a semi-colon, i.e. - ERBS01;ERBS02;ERBS03.

<Partial Node Name>*
Starts with the specified partial node name, i.e. - ERBS0*.

*<Partial Node Name>
Ends with the specified partial node name, i.e. - *001.

*<Partial Node Name>*
Contains the specified partial node name, i.e. *RBS0*.

*
References all nodes in the network.
With star like scope name the criteria will be mandatory to avoid Command Syntax Error.

<Collection Name>
One or many Collections can be defined as scope. Multiple Collection names should be separated with a semi-colon, i.e. - Collection01;Collection02
Partial collection names are not supported and the name should be entered in a case sensitive manner.

ENM CLI supports querying of MOs in a Collection that are stored in a flat structure only, i.e. MOs all of the same type.
Collections maybe queried that have MOs stored in a parent / child (Topology) type structure. However, duplicate MOs will be returned if the parent MO in the Collection is not the MO being queried.

<SavedSearch Name>
One or many SavedSearch can be defined as scope. Multiple SavedSearch names should be separated with a semi-colon, i.e. - savedsearch01;savedsearch02
Partial SavedSearch names are not supported and the name should be entered in a case sensitive manner.
Saved Search as scope can be issued only with the criteria to specify Managed Object (MO) Classes names and attribute values to search on.

Note:
<NodeName> and wildcard search with <Partial Node Name> is not supported for MO having the same level as NetworkElement and for PO (i.e. LicenseData, OpenAlarm,...).

Criteria
Use the criteria to specify Managed Object (MO) Classes names and attribute values to search on. Multiple MO Classes can be used to specify parent child relationships.

<MO Class>
Search for all instances of the specified MO Class and display the Full Distinguished Name (FDN) of those instances.

<MO Class>.<attr name>
Search for all instances of the specified MO Class which contains the specified attribute and display the attribute value for each MO instance found.

<MO Class>.*
Search for all instances of the specified MO Class and display the FDN of those instances including all of their persistent attributes.

<MO Class>.<attr name><operator><value> 
Search for all instances of the specified MO Class which contains the specified attribute whose current value satisfies the specified operator (<,>,==,!=) and specified value.
Note: 
The != operator is supported on full string text only (i.e. partial string matching using the != operator is not supported)

<MO Class>.(<attr name1>,<attr name2><operator><value>)
Use round brackets to group multiple attributes for the same MO Class.

<MO Class1>,<MO Class2>
Use a comma to separate multiple MO Classes when searching for all instances of MO Class1 which have a child MO Class instance of MO Class2.
Note: Currently not supported for YANG locally scoped MOs.

<MO Class>.<cm>
Use the special identifier <cm> to select all Configuration Management (CM) attributes of the specified MO Class.

<MO Class>.<pm>
Use the special identifier <pm> to select all Performance Management (PM) attributes of the specified MO Class.
Note: Only supported on CPP platform types where node types support reading of PM counters as MO attributes.

<MO Class>.<p>
Use the special identifier <p> to select all persistent attributes of the specified MO Class.

<MO Class>.<w>
Use the special identifier <w> to select all writable persistent attributes of the specified MO Class.

<MO Class>.<m>
Use the special identifier <m> to select all mandatory persistent attributes of the specified MO Class.

<MO Class1>;<MO Class2>
Use a semi-colon to separate multiple MO Classes when searching for all instances of *either* MO Class1 or MO Class2.

Criteria for MO by Id
<MO Class>=<MO_Id>
Use to identify MO class(es).

<MO Class>=<MO_Id> <attr name>
Use to identify MO class(es) and output attribute name(s). Multiple attributes should be comma separated.

<MO Class>=<MO_Id> <attr name><operator><value>
Use to identify MO class(es) and filter on attribute value(s). Multiple attributes name/value pairs should be comma separated.

<MO Class>=<MO_Id> <special identifier>
Use to identify MO class(es) and apply special identifier as an output filter. Examples of special identifiers are <cm>, <pm>, <p> etc.

<MO Class>=<Partial MO_Id>*
Starts with the specified partial MO_Id, i.e. - cell*.

<MO Class>=*<Partial MO_Id>
Ends with the specified partial MO_Id, i.e. - *001.

<MO Class>=*<Partial MO_Id>*
Contains the specified partial MO_Id, i.e. *cell00*.

Note:
The <MO_Id> supports alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.
The supported "special" characters are:

. - _
If the <MO_Id> includes any other special character, then it must be contained in quotes.

Filters
Use the filter to limit the output of the get command by specifying the MO Classes names and attribute names to show. If not specified, all instances and values for the MO Classes and attributes given in the criteria are shown.

<MO Class>
Only show instances of the specified MO Class.

<MO Class>.<attr name>
Only show instances of the specified MO Class and values for the specified attribute.

<MO Class>.*
Only show instances of the specified MO Class including persistent attributes

<MO Class>.<cm>
Use the special identifier <cm> to select all Configuration Management (CM) attributes of the specified MO Class.

<MO Class>.<pm>
Use the special identifier <pm> to select all Performance Management (PM) attributes of the specified MO Class.
Note: Only supported on CPP platform types where node types support reading of PM counters as MO attributes.

<MO Class>.<p>
Use the special identifier <p> to select all persistent attributes of the specified MO Class.

<MO Class>.<w>
Use the special identifier <w> to select all writable persistent attributes of the specified MO Class.

<MO Class>.<m>
Use the special identifier <m> to select all mandatory persistent attributes of the specified MO Class.

<MO Class>.(<attr name1>,<attr name2>)
Use round brackets to group multiple attributes for the same MO Class.

<MO Class1>;<MO Class2>
Use a semi-colon to separate multiple MO Classes to display all instances of *either* MO Class1 or MO Class2 (regardless of whether MO Class1 is a parent or child of MO Class2).

Options
Use the options to further restrict the output specification.

-ns or --namespace
Specify a particular namespace.

-v or --version
Specify a particular version.

-ne or --netype
Specify a particular netype.

-cn or --count
Report the number of instances.

-t or --table
Response displayed in table format.

Note: When copy and pasting a table of data from the CLI to another application the data in the clipboard needs to be copied as text only to prevent formatting issue.

-l or --list
Response displayed in list format.

-c or --config
Operate on MO(s) in the specified configuration area.

-d or --dynamic
Output displayed in Ericsson Dynamic File Format.

-s or --syncstatus
Report the sync status of the node which the returned MOs belong to.

Options for Get by FDN
Use the options to further restrict the output specification.

-t or --table
Response displayed in table format.

Note: When copy and pasting a table of data from the CLI to another application the data in the clipboard needs to be copied as text only to prevent formatting issue.

-l or --list
Response displayed in list format.

-c or --config
Operate on MO(s) in the specified configuration area.

-attr or --attribute
Response displays only the attributes specified. One or many attributes can be defined. Use a comma to separate multiple attributes.

-s or --syncstatus
Report the sync status of the node which the returned MOs belong to.

Node Details Option
Use the option to add more information the output specification.

-dn or --detailnode
Report a netype and synchronization status of particular node.

-ne or --netype
Specify a particular netype.

-cn or --count
Report the number of instances.

-t or --table
Present the response in table format.

Note: When copy and pasting a table of data from the CLI to another application the data in the clipboard needs to be copied as text only to prevent issues with formatting.

-l or --list
Present the response in list format.

-c or --config
Operate on MO(s) in the specified configuration area.

-s or --syncstatus
Report the sync status of the node which the returned MOs belong to.

Description
cmedit get is used to query Node data from the Network.
If a node is un-synced, the data returned to the ENM CLI will differ from actual data on the node, if node data has changed since the node was last synced with ENM
The command has an optional parameter [ -c | --config ] to specify an existing configuration. If this optional parameter is not included, by default the command is applied to the live configuration.
The command output provides the additional "syncStatus" attribute for list and table layout. The output is controlled by PIB (Platform Integration Bridge) boolean parameter syncStatusInfoEnabled, default setting is false. If syncStatusInfoEnabled is set to false, one may also get the "syncStatus" attribute using the --syncstatus option.
Details of Case Sensitivity for cmedit commands.
Details of Special Characters for cmedit commands.
Collection and SavedSearch names as scope support alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.
The supported "special" characters are:

. - _ <space>
If Collection/SavedSearch name includes <space>, then it must be contained in quotes.

Command Consequences

There is no consequences in the Get command.
Examples
 Get a ManagedElement by FDN

cmedit get MeContext=ERBS001,ManagedElement=1
Response

This command returns all the attributes values of the specified MO instance for the provided FDN. The following are the attributes that are shown for MO instance:

FDN : MeContext=ERBS001,ManagedElement=1
ManagedElementId : 1
applicationConfiguration : []
healthCheckResult : {startTime=, message=, healthCheckResultCode=INITIAL_VALUE}
healthCheckSchedule : []
logicalName :
mimInfo : {mimVersion=1, mimRelease=320, mimName=ERBS_NODE_MODEL_H}
neType : ERBS
platformType : null
productName :
productNumber :
productRevision :
productType : Node
site :
userLabel : Region5
 
1 instance(s)

 Get one attribute of ManagedElement by FDN

cmedit get MeContext=ERBS001,ManagedElement=1 --attribute userLabel
Response

This command returns the "userLabel" attribute value of the specified MO instance for the provided FDN. The following is the attribute that is shown for MO instance:

FDN : MeContext=ERBS001,ManagedElement=1
userLabel : Region5
 
1 instance(s)

 Get a list of attributes of ManagedElement by a list of FDNs

cmedit get MeContext=ERBS001,ManagedElement=1;MeContext=ERBS002,ManagedElement=1 -attr neType,userLabel
Response

This command returns the "neType" and "userLabel" attributes values of the specified MO instance for the provided list of FDNs. The following are the attributes that are shown for MO instances:

FDN : MeContext=ERBS001,ManagedElement=1
neType : ERBS
userLabel : Region5
 
FDN : MeContext=ERBS002,ManagedElement=1
neType : ERBS
userLabel : Region5
 
2 instance(s)

 Get a list of attributes of ManagedElement by a list of FDNs with additional syncStatus attribute

cmedit get MeContext=LTE03ERBS00001,ManagedElement=1;MeContext=LTE08ERBS00002,ManagedElement=1 -attr neType,userLabel --syncstatus
Response (Setting PIB parameter syncStatusInfoEnabled to true one may always get the "syncStatus" attribute, without specifying --syncstatus option)

This command returns all the attributes values of the specified MO instance for the provided FDN and the syncStaus attribute too. The following are the attributes that are shown for MO instance:

FDN : MeContext=LTE03ERBS00001,ManagedElement=1
syncStatus : SYNCHRONIZED
neType : ERBS
userLabel : Region5
 
FDN : MeContext=LTE08ERBS00002,ManagedElement=1
syncStatus : SYNCHRONIZED
neType : ERBS
userLabel : Region5
 
2 instance(s)

 Get All of a Single Type in a non-live configuration

cmedit get * networkelement --config=myConfig
Response

This command returns all instances of MO Class "NetworkElement" present in the configuration named myConfig. The following is the information shown for one instance:

FDN : NetworkElement=LTE32ERBS00001
 
1 instance(s)

 Get One Attribute of a Single MO Class

cmedit get LTE32ERBS00001 networkelement.netype
Response

FDN : NetworkElement=LTE32ERBS00001
neType : ERBS
 
1 instance(s)

 Get All Persistent Attributes of a Single MO Class, displaying the output in Ericsson Dynamic File Format

cmedit get LTE32ERBS00001 networkelement.* -d
Response

This command returns all persistent attribute values for the specified MO instance. The following is the list of the persistent attribute values for the instance:
 
FDN : "NetworkElement=LTE32ERBS00001"
neProductVersion : [{revision="F1107", identity="CXPL15BCP1"}]
networkElementId : "LTE32ERBS00001"
neType : ERBS
nodeModelIdentity : "17A-H.1.160"
ossModelIdentity : "17A-H.1.160"
ossPrefix : "MeContext=LTE32ERBS00001"
platformType : CPP
release : "H.1.160"
technologyDomain : [EPS]
utcOffset : <empty>
 
1 instance(s)

 Get Managed Object Instances Filtered by One Attribute Value

cmedit get * networkelement.netype=="ERBS"
Response

This command returns all the MO instances with the specified attribute value. Each instance is repeated on as a new row in the table or a new element in the list. The following is one instance with the specified attribute:

FDN : NetworkElement=LTE32ERBS00001
neType: ERBS
 
1 instance(s)

 Get Managed Object Instances Filtered by More Than One Attribute Value

cmedit get * networkelement.(netype=="ERBS",platformtype=="CPP")
Response

This command returns all the MO instances with the specified attribute values. Each instance is repeated on as a new row in the table or a new element in the list. The following is one instance with the specified attributes:

FDN : NetworkElement=LTE32ERBS00001
neType : ERBS
platformType : CPP
 
1 instance(s)

 Get Managed Object Instances of Specific Parent and Child Types

cmedit get LTE32ERBS00001 enodebfunction,eutrancellfdd
Response

FDN : MeContext=LTE32ERBS00001,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=LTE32ERBS00001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=LTE32ERBS00001-1
 
2 instance(s)
Note: Only <MO Class> filters are supported for parent / child type queries


 Get Managed Object Instances of Type GeraNetwork Towards the Specified Namespace and Version, under a Given FDN

cmedit get MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1; ERBS001 geranetwork -ns=ERBS_NODE_MODEL -v=6.1.100
Response

FDN : MeContext=1,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1
 
1 instance(s)

 Get Managed Object instances under a mixed scope type of FDN and node name

cmedit get MeContext=ERBS001,ManagedElement=1;LTE* enodebfunction -t
Response

MeContext,ManagedElement,ENodeBFunction
NodeId          ENodeBFunctionId
ERBS001         1
 
1 instance(s)
Note: -t option needs to aggregate the response in order to structure the table appropriately and therefore does not stream the partial responses back to the user.


 Get Managed Object instances under a mixed scope of valid and invalid node name

cmedit get LTE02ERBS00031;NotExistingNode enodebfunction
Response

FDN : MeContext=LTE02ERBS00031,ManagedElement=1,ENodeBFunction=1 
 
Scope: NotExistingNode
Error 1049 : The scope is incorrect or not associated with the correct Node Type 
 
1 instance(s)

 Get Managed Object instances under a mixed scope of invalid node names

cmedit get NotExistingNode1;NotExistingNode2 enodebfunction
Response

Error 1050 : All scope is incorrect or not associated with the correct Node Type 
 
Error 5010 : The read command has errors. 

 Get two Attributes of a Single node name in table format

cmedit get 85BJ5 ReportConfigB2Utra.(b2Threshold1Rsrq,timeToTriggerB2) -t
Response

ManagedElement,ENodeBFunction,EUtranCellFDD,UeMeasControl,ReportConfigB2Utra
Node ID       ENodeBFunctionId       EUtranCellFDDId         UeMeasControlId         ReportConfigB2UtraId       b2Threshold1Rsrq       timeToTriggerB2
85BJ5         1                      85BJ1M                  1                       1                          -195                   320
85BJ5         1                      85BJ1O                  1                       1                          -195                   320
 
2 instance(s)
Note: -t option needs to aggregate the response in order to structure the table appropriately and therefore does not stream the partial responses back to the user.


 Get Attribute of a Single node name

cmedit get LTE32ERBS00001
Response

FDN : SubNetwork=ERBS-SUBNW-1,MeContext=LTE32ERBS00001
 
1 instance(s)

 Get Attributes with additional details of a Partial node name

cmedit get LTE07dg2ERBS000* --detailnode
Response

FDN : SubNetwork=NETSimW,ManagedElement=LTE07dg2ERBS00005
neType : RadioNode
syncStatus : SYNCHRONIZED
 
FDN : NetworkElement=LTE07dg2ERBS00003
neType : RadioNode
syncStatus : UNSYNCHRONIZED
 
2 instance(s)

 Get Attributes with additional details of a Partial node name and with scope option

cmedit get -n LTE03ERBS0000* --detailnode
Response

FDN : SubNetwork=ERBS-SUBNW-1,MeContext=LTE03ERBS00009
neType : ERBS
syncStatus : SYNCHRONIZED
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=LTE03ERBS00008
neType : ERBS
syncStatus : SYNCHRONIZED
 
2 instance(s)

 Get Attribute of a Single collection

cmedit get Collection2
Response

FDN : SubNetwork=NETSimW,ManagedElement=LTE07dg2ERBS00005
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00006
 
2 instance(s)

 Get Attribute with additional details of a Single collection

cmedit get Collection2 --detailnode
Response

FDN : SubNetwork=NETSimW,ManagedElement=LTE07dg2ERBS00005
neType : RadioNode
syncStatus : SYNCHRONIZED
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00006
neType: ERBS
syncStatus : UNSYNCHRONIZED
 
2 instance(s)

 Get Attribute with additional details and filtered by netype of a Single collection

cmedit get Collection2 --detailnode --netype=RadioNode
Response

FDN : SubNetwork=NETSimW,ManagedElement=LTE07dg2ERBS00005
neType : RadioNode
syncStatus : SYNCHRONIZED
 
1 instance(s)

 Get Attribute with additional details and filtered by netype of a collection and node name

cmedit get -n netsim_LTE03ERBS00008 -co collectionName1 --detailnode --netype=ERBS
Response

FDN : SubNetwork=NETSimW,ManagedElement=netsim_LTE03ERBS00008
neType : ERBS
syncStatus : SYNCHRONIZED
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00004,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=LTE03ERBS00004-4
neType : ERBS
syncStatus : SYNCHRONIZED
 
2 instance(s)

 Get ManagedElement of a Single SavedSearch

cmedit get -sa savedsearch01 ManagedElement
Response

FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00007,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00010,ManagedElement=1
 
2 instance(s)

 Get ManagedElement of a multiple SavedSearch

cmedit get -sa savedsearch01; savedsearch02 ManagedElement
Response

FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00007,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00010,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00012,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00014,ManagedElement=1
 
4 instance(s)

 Get a list of attributes of ManagedElement of a partial node name as scope in table format with additional syncStatus attribute

cmedit get LTE03ERBS0000* ManagedElement.(neType,userLabel) -s -t
Response (Setting PIB parameter syncStatusInfoEnabled to true one may always get the "syncStatus" attribute, without specifying --syncstatus option)

SubNetwork,MeContext,ManagedElement
Node ID            syncStatus         ParentId           ManagedElementId     neType     userLabel
LTE03ERBS00002     SYNCHRONIZED       LTE03ERBS00002     1                    ERBS       LTE_ERBS
LTE03ERBS00001     UNSYNCHRONIZED     LTE03ERBS00001     1                    ERBS       LTE_ERBS
 
cmedit Command Set Special Characters
< Back To Cmedit

This tutorial details cmedit special characters and how to use them.

Supported Characters in cmedit command arguments
Character	Description	Usage
[a-z][A-Z]	alphabetic characters	All MO class, scope name, RDN value and attribute value
[0-9]	numeric characters	All MO class, scope name, RDN value and attribute value
.	full stop	All scope name, RDN value and attribute value
?	question mark	All attribute value
!	exclamation mark	All RDN value and attribute value
@	at sign	All RDN value and attribute value
%	percent sign	All RDN value and attribute value
&	ampersand	All RDN value and attribute value
^	circumflex accent	All RDN value and attribute value
_	low line	All scope name, RDN value and attribute value
/	slash	All RDN value and attribute value
|	vertical bar	All RDN value and attribute value
-	hyphen-minus	All scope name, RDN value and attribute value but not as first character
=	equal	All attribute value but not as first character
$	dollar	All RDN value and attribute value but not more than one consecutive symbol
NOTE: Quotes are not required with supported characters.

What are Special Characters?
Special characters are any characters other than the supported characters. These characters must be wrapped in quotes to be accepted in the scope name or attribute value part of the command.

The set of special characters allowed in RDN value are:

*()[]\ and space

If an FDN contains an RDN value with special characters, the entire FDN String must be wrapped in quotes. The spaces at the beginning and/or at the end of the RDN value are stripped.

When a special character is used without quotes an error is displayed.

See the example below.

Special Characters Examples
 Get an MO Class with an FDN with Supported Characters in RDN value

cmedit get SubNetwork=ERBS-SUBNW-1,MeContext=ERBS@001,ManagedElement=1^5
Example Command Response:

This command returns the instance of MO Class "ManagedElement" with given FDN. The following information is displayed for one instance:

FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS@001,ManagedElement=1^5
ManagedElementId : 1^5
applicationConfiguration : []
healthCheckResult : {startTime=, message=, healthCheckResultCode=INITIAL_VALUE}
healthCheckSchedule : []
logicalName :
mimInfo : {mimVersion=1, mimRelease=160, mimName=ERBS_NODE_MODEL_H}
neType : null
platformType : null
productName :
productNumber :
productRevision :
productType : Node
site :
userLabel :
1 instance(s)
 Delete a MO Class with Supported Character in Attribute Value

cmedit delete * ENodeBFunction.userLabel==sample-UserLabel^01
Example Command Response:

This command deletes the instances of MO Class "ENodeBFunction" with attribute value containing allowed special character. The following information is displayed for one instance:

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
1 instance(s) deleted
 Create a MO Class with Special Characters in Attribute Value (ipv6 address)

cmedit create SubNetwork=Eric3,MeContext=Ne-ipv6-R234,ManagedElement=1,Transport=1,Router=FRONTHAUL,InterfaceIPv6=FRONTHAUL,AddressIPv6=1 addressIPv6Id=1,address="2001:1b70:8210:8740::2c4/64"
Example Command Response:

This command creates the SubNetwork MO Class with attribute value containing Special Character wrapped in quotes. The following information is displayed in the response:

FDN : SubNetwork=Eric3,MeContext=Ne-ipv6-R234,ManagedElement=1,Transport=1,Router=FRONTHAUL,InterfaceIPv6=FRONTHAUL,AddressIPv6=1
                
addressIPv6Id=1
address=2001:1b70:8210:8740::2c4/64
1 instance(s) updated
 Get a MO Class with Special Characters in the RDN value

cmedit get "NetworkElement=Eric04 LTE01ERBS00088,PMICScannerInfo=USERDEF-node duplicate chack.Cont.Y.STATS"
Example Command Response:

The FDN contains RDN value with space symbol that is a Special Character, this must be wrapped in quotes. The following information is displayed in the response:

FDN : NetworkElement=Eric04 LTE01ERBS00088,PMICScannerInfo=USERDEF-node duplicate chack.Cont.Y.STATS
                
PMICScannerInfoId : USERDEF-node duplicate chack.Cont.Y.STATS
errorCode : -1
fileCollectionEnabled : true
id : 14
name : USERDEF-node duplicate chack.Cont.Y.STATS
nodeName : null
processType : STATS
ropPeriod : 900
status : ACTIVE
subscriptionId : 281476044782780
1 instance(s)
Case Sensitivity in the cmedit Command Set
< Back To Cmedit

This page details which parts of the commands are case insensitive and which are not.

Case Insensitive
The following parts of cmedit commands are case insensitive:

MO class and attribute names
Action and Action parameter names
Struct and Struct member names
Case Sensitive
The following parts of cmedit commands are case sensitive:

Command keywords. All keywords are in lowercase. For example "cmedit", "get", "create"
Command options and flags. Most of the options and flags are in lowercase. Except "-ALL" (see delete and export commands)
Namespace names and versions
Attribute identifiers. All of the attribute identifiers are in lowercase. For example "ManagedElement.<cm>", "ManagedElement.<pm>"
String data. Any string values stored in the database or models, which include but not limited to:
FDNs
String values. The values of fields of type String. For example "My user label"
Enum values. The value of fields of type Enum are typically in UPPERCASE. For example "LOCKED", "UNLOCKED", "SHUTTING_DOWN"
Node Types. Since node types are also Enum values they are case sensitive. For example "ERBS", "RNC", "MGW"
Configuration names. Configuration names are defined by the user and need to be matched exactly
<null>
Example Use of Case Insensitivity
 Get a MO Class with Criteria Using a Case Insensitive Query

cmedit get * managedelement.userlabel
Response

This command returns all instances of MO Class "ManagedElement". The following is the information shown for one instance:
FDN: MeContext=LTE10ERBS00001,ManagedElement=1
userLabel: ExampleLabelValue
 
2 instance(s)@@@@@manual cmedit set@@@@
< Back To Cmedit

Syntax
 Syntax to Set Data by FDN

cmedit set <FDN> attributes [-c | --config]
cmedit set <FDN> criteria attributes [options]
 Syntax to Set Data by Query

cmedit set [scope type] scope criteria attributes [options]
 Syntax to set an object by name

cmedit set [scope type] scope criteria_for_MO_by_Id attributes [options]
Scope type
Use Scope Type option to restrict the scope to:

collection [ -co | --collection ]
nodenames [ -n | --node ]
saved search [ -sa | --savedSearch ]

Scope
Use the scope to specify node names or collections to search on.

<Node Name>
One or many node names can be defined as scope. Multiple node names should be separated with a semi-colon, i.e. - ERBS01;ERBS02;ERBS03.

<Partial Node Name>*
Starts with the specified partial node name, i.e. - ERBS0*.

*<Partial Node Name>
Ends with the specified partial node name, i.e. - *001.

*<Partial Node Name>*
Contains the specified partial node name, i.e. *RBS0*.

*
References all nodes in the network.

<Collection Name>
One or many Collections can be defined as scope. Multiple Collection names should be separated with a semi-colon, i.e. - Collection01;Collection02
Partial collection names are not supported and the name should be entered in a case sensitive manner.

ENM CLI supports querying of MOs in a Collection that are stored in a flat structure only, i.e. MOs all of the same type.
Collections maybe queried that have MOs stored in a parent / child (Topology) type structure. However, duplicate MOs will be returned if the parent MO in the Collection is not the MO being queried.

<SavedSearch Name>
One or many SavedSearch can be defined as scope. Multiple SavedSearch names should be separated with a semi-colon, i.e. - savedsearch01;savedsearch02
Partial SavedSearch names are not supported and the name should be entered in a case sensitive manner.
Saved Search as scope can be issued only with the criteria to specify Managed Object (MO) Classes names and attribute values to search on.

Criteria
Use the criteria to specify Managed Object (MO) Classes names and attribute values to operate on.

<MO Class>
Operate on all instances of the specified MO Class.

<MO Class>.<attr name><operator><value> 
Operate on all instances of the specified MO Class which contains the specified attribute whose current value satisfies the specified operator (<,>,==) and specified value.

<MO Class>.(<attr name><operator><value>...)
Use round brackets to group multiple attributes for the same MO Class.

<MO Class1>,<MO Class2>
Use a comma to separate multiple MO Classes when operating on all instances of *either* MO Class1 or MO Class2.

Criteria for MO by Id
<MO Class>=<MO_Id>
Use to identify MO class(es).

<MO Class>=<Partial MO_Id>*
Starts with the specified partial MO_Id, i.e. - cell*.

<MO Class>=*<Partial MO_Id>
Ends with the specified partial MO_Id, i.e. - *001.

<MO Class>=*<Partial MO_Id>*
Contains the specified partial MO_Id, i.e. *cell00*.

Note:
The <MO_Id> supports alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.
The supported "special" characters are:

. - _
If the <MO_Id> includes any other special character, then it must be contained in quotes.

Attributes
Used to specify attributes.

<attribute name>=<attribute value> or
<attribute name>:<attribute value>
Attribute values are specified by giving the name, followed by "=" or ":" and then the value.

<attribute1 name>=<attribute1 value>;<attribute2 name>=<attribute2 value>... or
<attribute1 name>=<attribute1 value>,<attribute2 name>=<attribute2 value>...
Use semi-colon or comma to separate multiple attribute name and value pairs.

<struct attribute name>=( <struct member1 name>=<struct member1 value>,<struct member1 name>=<struct member1 value>...)  or
<struct attribute name>={ <struct member1 name>=<struct member1 value>,<struct member1 name>=<struct member1 value>...}
Use round brackets or curly brackets to group struct member names and values together, separated by a comma.

<sequence attribute name>=[<value1>,<value2>,<value3>...]
Use square brackets to group multiple values in a sequence attribute, separated by a comma.

Options
-ns or --namespace
Specify a particular namespace.

-ne or --netype
Specify a particular netype.

-v or --version
Specify a particular version.

-c or --config
Operate on MO(s) in the specified configuration area.

--force
Force the command execution. This option is not required when using scripting integration or batch scripts. It is assumed that all commands in a script should be executed without user intervention.

-prev or --preview
Preview the MOI(s) involved in the command.

Description
cmedit set is used to set the configuration data for one or multiple nodes in the network.

The command has an optional parameter [-c | --config] to specify an existing configuration. If this optional parameter is not included, by default the command is applied to the live configuration.
Details of Case Sensitivity for cmedit commands.

Details of Special Characters for cmedit commands.

Collection and SavedSearch names as scope support alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.

The supported "special" characters are:

. - _ <space>
If Collection/SavedSearch name includes <space>, then it must be contained in quotes.

If a set command updates more nodes than the system allows an execution error will be showed.

The set command result will be the modification of the specified attributes for specified MOI(s). Therefore, a preview of affected MOIs will be displayed to prevent users from making potentially harmful changes via CLI asking to confirm if they want to go ahead; this could happen in the following conditions:

If an attribute is modelled with the "disturbances" flag a warning message to indicate it may cause a significant disturbance in traffic will be showed;
If too many MO's will be modified then a warning message will be showed. The number of MOs is controlled by PIB parameter (maxAffectedObjectsWithoutConfirmation), default setting is 10.
To execute the command after preview has been displayed there are two options for the user:

to click the button labeled 'Execute' displayed in suggestion area;
to issue again the command with the option '-- force'.
Update operations are batched by node. For example, if the command changes 5 MOs per node, a failure on one MO will cause all changes for the node to be reverted. To force the update on the four non failing MO's execute an update command on each MO individually.

If the user requests an output to file for the command and a preview of affected MOIs is needed two files will be generated : one for preview and one for command output after confirmation

Command Consequences

The set command result is the modification of the specified attributes for specified MOIs.
Examples
 Set by FDN: Set a single attribute of an MO Instance.

cmedit set MeContext=ERBS001,ManagedElement=1 userlabel=sampleUserLabel --config=myConfig
Response

FDN : MeContext=ERBS001,ManagedElement=1
 
1 instance(s) updated

 Set multiple attributes on an MO Instance

cmedit set ERBS001 managedelement userlabel=sampleUserLabel, productnumber=CXC101101 --config=myConfig
Response

FDN : MeContext=ERBS001,ManagedElement=1
 
1 instance(s) updated
 

 Set a single struct attribute on an MO Instance.

cmedit set MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1 enodebplmnid:(mcc=999,mnc=666,mnclength=2) --config=myConfig
Response

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
1 instance(s) updated
 

 Set an attribute on MO Instance(s) using filter criteria.

cmedit set * managedelement.userlabel==sampleUserLabel,enodebfunction.dscplabel>=36,eutrancellfdd.earfcndl==17000 managedelement.userlabel=ERBS1_ME1,enodebfunction.userlabel=ERBS1_ENODEB1 --config=myConfig
Response

FDN : MeContext=ERBS001,ManagedElement=1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
2 instance(s) updated
 

 Set an attribute on MO Instance(s) using filter criteria when the changes may result in Network Traffic Disturbance and Confirmation Request.

cmedit set * managedelement.userlabel==sampleUserLabel,enodebfunction.dscplabel>=36,eutrancellfdd.earfcndl==17000 managedelement.userlabel:ERBS1_ME1,enodebfunction.timeAndPhaseSynchAlignment:true --config=myConfig
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
FDN : MeContext=ERBS001,ManagedElement=1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
timeAndPhaseSynchAlignment Disturbance : Changing this attribute can affect traffic.
 
2 instance(s) will be affected by this command.
 
WARNING: Continuing in Preview Mode due to the following reasons:
 
-  Some attribute(s) may cause a significant disturbance in the System or in the Network
 
Execute
 
Response (after confirmation)

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
2 instance(s) updated
 
Note: This command was forced for execution following automatic Preview Mode
 

 Set an attribute on MO Instance(s) using filter criteria with preview option.

cmedit set * ManagedElement userLabel=newLabel --config=myConfig --preview
Response

Command Preview - List of affected MO(s) with current attribute values: 
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext= ERBS001,ManagedElement=1 
userLabel : myLabel
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext= ERBS002,ManagedElement=1 
userLabel : myLabel
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext= ERBS003,ManagedElement=1 
userLabel : myLabel
 
3 Object(s) will be updated by this command.
 

 Set an attribute on MO Instance(s) using filter criteria with savedSearch [scope type] and preview option.

cmedit set -sa savedsearch01 ManagedElement userLabel=newLabel --preview
Response

Command Preview - List of affected MO(s) with current attribute values: 
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00017,ManagedElement=1
userLabel : myLabel
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00019,ManagedElement=1
userLabel : myLabel
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00039,ManagedElement=1
userLabel : myLabel
 
3 Object(s) will be updated by this command.
 

 Set an attribute on MO Instance(s) using filter criteria with savedSearch, collection [scope type].

cmedit set -sa savedsearch01 -co collection_name1 ManagedElement userLabel=newLabel --force
Response

 
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00021,ManagedElement=1
 
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00004,ManagedElement=1
 
2 instance(s) updated
 

 Set multiple attributes, specifying multiple node IDs in the ERBS_NODE_MODEL namespace with version 6.1.100 and filtered by one attribute value greater-than or equal to a specific value.

cmedit set MeContext=ERBS001;MeContext=ERBS002 enodebfunction.dscplabel>=20 userlabel:newUserLabel; dscplabel:30 -ns=ERBS_NODE_MODEL -v=6.1.100 -c=myConfig
Response

FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
2 instance(s) updated
 

 Set userLabel attribute to a null value for all MmeFunction MOs in a non-live configuration called "myConfig".

cmedit set * mmefunction userLabel=<null> -c=myConfig
or
cmedit set * mmefunction userLabel=<empty> -c=myConfig
Response

FDN : MeContext=SGSN-16A-CP01-V102,MmeFunction=1
 
1 instance(s) updated
 

 Set by FDN: Set a single attribute of an MO Instance with Preview Mode and Confirmation Request.

cmedit set netsim_LTE01ERBS001* ManagedElement userlabel:myUserLabel
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE01ERBS00116,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE01ERBS00117,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE01ERBS00114,ManagedElement=1 
 
... 
 
13 instance(s) will be affected by this command.
 
WARNING: Continuing in Preview Mode due to the following reasons:
 
- More than 10 Object(s) will be affected by this command. Total Objects (13).
 
Execute
 
Response (after confirmation)

SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE01ERBS00116,ManagedElement=1
 
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE01ERBS00117,ManagedElement=1
 
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE01ERBS00114,ManagedElement=1 
 
... 
 
13 instance(s) updated
 
Note: This command was forced for execution following automatic Preview Mode
 
 Set an attribute on MO Instance(s) on a node unauthorized by TBAC

cmedit set ERBS002 NetworkElement utcOffset="+00:28"
Response

Error 3004 : Access Denied. Your Target Based Access Control rights do not allow you to perform actions on the Network Element(s).
 
 Set an attribute on MO Instance(s) with preview option when one specified node is unauthorized by TBAC

cmedit set ERBS001;ERBS002 NetworkElement utcOffset="+00:28" --preview
Response

Command Preview - List of affected MO(s) with current attribute values:
 
FDN : NetworkElement=ERBS002
warning : Access Denied. You do not have access to this node.
 
FDN : NetworkElement=ERBS001
utcOffset : +00:28
 
1 Object(s) will be updated by this command.
 Set an attribute on MO Instance(s) when one specified node is unauthorized by TBAC

cmedit set ERBS001;ERBS002 NetworkElement utcOffset="+00:28" --force
Response

FAILED FDN : NetworkElement=ERBS002
Error 3005 : Access Denied. You do not have access to this node.
 
SUCCESS FDN : NetworkElement=ERBS001
 
Error 5008 : The command executed on 1 out of 2 objects@@@@@manual cmedit action@@@@
< Back To Cmedit

Syntax
 Syntax to Initiate a Modeled Action by FDN

cmedit action <FDN> action
cmedit action <FDN> criteria action [options]
 Syntax to Initiate a Modeled Action by Query

cmedit action [scope type] scope criteria action [options]
 Syntax for action on object by name

cmedit action [scope type] scope criteria_for_MO_by_Id action [options]
Scope type
Use Scope Type option to restrict the scope to:

collection [ -co | --collection ]
nodenames [ -n | --node ]
saved search [ -sa | --savedSearch ]

Scope
Use the scope to specify node names or collections to search on.

<Node Name>
One or many node names can be defined as scope. Multiple node names should be separated with a semi-colon, i.e. - ERBS01;ERBS02;ERBS03.

<Partial Node Name>*
Starts with the specified partial node name, i.e. - ERBS0*.

*<Partial Node Name>
Ends with the specified partial node name, i.e. - *001.

*<Partial Node Name>*
Contains the specified partial node name, i.e. *RBS0*.

*
References all nodes in the network.

<Collection Name>
One or many Collections can be defined as scope. Multiple Collection names should be separated with a semi-colon, i.e. - Collection01;Collection02
Partial collection names are not supported and the name should be entered in a case sensitive manner.

ENM CLI supports querying of MOs in a Collection that are stored in a flat structure only, i.e. MOs all of the same type.
Collections maybe queried that have MOs stored in a parent / child (Topology) type structure. However, duplicate MOs will be returned if the parent MO in the Collection is not the MO being queried.

<SavedSearch Name>
One or many SavedSearch can be defined as scope. Multiple SavedSearch names should be separated with a semi-colon, i.e. - savedsearch01;savedsearch02
Partial SavedSearch names are not supported and the name should be entered in a case sensitive manner.
Saved Search as scope can be issued only with the criteria to specify Managed Object (MO) Classes names and attribute values to search on.

Criteria
Use the criteria to specify Managed Object (MO) Classes names and attribute values to operate on.

<MO Class>
Operate on all instances of the specified MO Class.

<MO Class>.<attr name><operator><value> 
Operate on all instances of the specified MO Class which contains the specified attribute whose current value satisfies the specified operator (<,>,==) and specified value.

<MO Class>.(<attr name><operator><value>...)
Use round brackets to group multiple attributes for the same MO Class.

Criteria for MO by Id
<MO Class>=<MO_Id>
Use to identify MO class(es).

<MO Class>=<Partial MO_Id>*
Starts with the specified partial MO_Id, i.e. - cell*.

<MO Class>=*<Partial MO_Id>
Ends with the specified partial MO_Id, i.e. - *001.

<MO Class>=*<Partial MO_Id>*
Contains the specified partial MO_Id, i.e. *cell00*.

Note:
The <MO_Id> supports alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.
The supported "special" characters are:

. - _
If the <MO_Id> includes any other special character, then it must be contained in quotes.

Action
Used to specify the action and its parameters.

<action name>.(<param name>=<param value>)
Parameters values are specified by giving the name, followed by "=" and then the value.

<action name>.(<param1 name>=<param1 value>,<param2 name>=<param2 value>...)
Use semi-colon or comma to separate multiple parameters name and value pairs.

<action name>.(<struct param name>.(<struct member1 name>=<struct member1 value>,<struct member2 name>=<struct member2 value>)...)
Use round brackets to group struct member names and values together, separated by a comma.

Options
-ns or --namespace
Specify a particular namespace.

-ne or --netype
Specify a particular netype.

-c or --config
Operate on MO(s) in the specified configuration area.

-v or --version
Specify a particular version.

--force
Force the command execution. This option is not required when using scripting integration or batch scripts. It is assumed that all commands in a script should be executed without user intervention.

-prev or --preview
Preview the MOI(s) involved in the command.

Description
cmedit action is used to initiate a modeled action on an MOI in the network.

The command has an optional parameter [-c | --config] to specify an existing configuration. If this optional parameter is not included, by default the command is applied to the live configuration.

If the command is applied to a non-live configuration, only actions having a void return type are allowed.

Details of Case Sensitivity for cmedit commands.

Details of Special Characters for cmedit commands.

Collection and SavedSearch names as scope support alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.

The supported "special" characters are:

. - _ <space>
If Collection/SavedSearch name includes <space>, then it must be contained in quotes.

If an action command updates more nodes than the system allows an execution error will be showed.

The action command may result in changes to MOI(s). Therefore, a preview of affected MOIs will be displayed to prevent users from making potentially harmful changes via CLI asking to confirm if they want to go ahead; this could happen in the following conditions:

If an attribute is modelled with the "disturbances" flag a warning message to indicate it may cause a significant disturbance in traffic will be showed;
If too many MO's will be changed then a warning message will be showed. The number of MOs is controlled by PIB parameter (maxAffectedObjectsWithoutConfirmation), default setting is 10.
To execute the command after preview has been displayed there are two options for the user:

to click the button labeled 'Execute' displayed in suggestion area;
issue again the command with the option '-- force'.
If the user requests an output to file for the command and a preview of affected MOIs is needed two files will be generated : one for preview and one for command output after confirmation

Command Consequences

The action command result is the execution of the action on the MOI(s).
Examples
 Action by FDN.

cmedit action MeContext=ERBS001,ManagedElement=1 manualrestart.(restartrank=RESTART_WARM,restartreason=PLANNED_RECONFIGURATION,restartinfo=someInfo) --force --config=myConfig
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1
 
1 instance(s)
 

 Action by FDN with complex return value.

cmedit action MeContext=ERBS001,ManagedElement=1,NodeManagementFunction=1,UlSpectrumAnalyzer=1 getulsasamplingcapability.(targetRadiounit='ManagedElement=1,Equipment=1,AuxPlugInUnit=1') --force --config=myConfig
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,NodeManagementFunction=1,UlSpectrumAnalyzer=1
RETURN VALUE : {carrierRfPort2=2, carrierRfPort1=1, maxNumSamplings2=[0], minFrequency1=[0], numSpectrumTypes2=0, numTriggerTypes2=0, numTriggerTypes1=0, minFrequency2=[0], maxNumSamplings1=[0], minPower2=0, minPower1=0, flatGainBW1=[0], flatGainBW2=[0], trigger1DataDefined1=false, numSpectrumTypes1=0, samplingRate1=[0], maxFrequency1=[0], samplingRate2=[0], maxPower1=0, maxFrequency2=[0], trigger1DataDefined2=false, maxPower2=0}
 
1 instance(s)
 

 Action by FDN with string return value.

cmedit action MeContext=ERBS001,ManagedElement=1,IpOam=1 traceroute.(host="131.160.198.38") --force --config=myConfig
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,IpOam=1
RETURN VALUE : /2001:1b70:82a1:103::64:115/159.107.0.57/192.168.242.90/212.21.217.2159.107.0.57/192.168.242.90/212.21.217.254/62.6.6.74/213.15.200.18/192.16.151.1054/62.6.6.74/213.15.200.18/192.16.151.10/131.160.198.38
 
1 instance(s)
 

 Action by Query

cmedit action ERBS001;ERBS002 managedelement manualrestart.(restartrank=RESTART_WARM,restartreason=PLANNED_RECONFIGURATION,restartinfo=someInfo) --force --config=myConfig
Response

SUCCESS FDN : MeContext=ERBS0001,ManagedElement=1
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS0002,ManagedElement=1
 
2 instance(s)
 

 Action by Query with added [scope type]

cmedit action -n ERBS001;ERBS002 managedelement manualrestart.(restartrank=RESTART_WARM,restartreason=PLANNED_RECONFIGURATION,restartinfo=someInfo) --force --config=myConfig
Response

SUCCESS FDN : MeContext=ERBS0001,ManagedElement=1
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS0002,ManagedElement=1
 
2 instance(s)
 

 Action by Query when the changes may result in Network Traffic Disturbance and Confirmation Request.

cmedit action ERBS001;ERBS002 managedelement manualrestart.(restartrank=RESTART_WARM,restartreason=PLANNED_RECONFIGURATION,restartinfo=someInfo) --config=myConfig
Response (with confirmation request in suggestion area)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
FDN : MeContext=ERBS0001,ManagedElement=1
manualRestart Disturbance : manualRestart causes loss of traffic!
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS0002,ManagedElement=1
manualRestart Disturbance : manualRestart causes loss of traffic!
 
2 instance(s) will be affected by this command.
 
WARNING: Continuing in Preview Mode due to the following reasons:
 
- This action may cause a significant disturbance in the System or in the Network
 
Execute
 
Response (after confirmation)

SUCCESS FDN : MeContext=ERBS0001,ManagedElement=1
 
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS0002,ManagedElement=1
 
2 instance(s)
 
Note: This command was forced for execution following automatic Preview Mode
 

 Action by Query when the changes may result in Network Traffic Disturbance and too many MO's will be affected, then Confirmation Request.

cmedit action * ManagedElement manualrestart.(restartrank=RESTART_WARM,restartreason=PLANNED_RECONFIGURATION,restartinfo=someInfo)
Response (with confirmation request in suggestion area)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00001,ManagedElement=1
manualRestart Disturbance : manualRestart causes loss of traffic!
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00002,ManagedElement=1
manualRestart Disturbance : manualRestart causes loss of traffic!
 
.....
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00040,ManagedElement=1
manualRestart Disturbance : manualRestart causes loss of traffic!
 
40 instance(s) will be affected by this command.
 
WARNING: Continuing in Preview Mode due to the following reasons:
 
- This action may cause a significant disturbance in the System or in the Network
 
- More than 10 Objects will be affected by this command. Total Objects (40).
 
Execute
 
Response (after confirmation)

SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00028,ManagedElement=1
 
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00021,ManagedElement=1
 
SUCCESS FDN : .....
 
SUCCESS FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00009,ManagedElement=1
 
40 instance(s)
 
Note: This command was forced for execution following automatic Preview Mode
 

 Action by Query using preview option

cmedit action * ManagedElement startHealthCheck --preview
Response

Command Preview - List of affected MO(s) with applied action parameters:
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS001,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=ERBS002,ManagedElement=1
 
2 Object(s) will be affected by this command.
 

 Action by Query using preview option and with [scope type]

cmedit action --collection collection_name1 ManagedElement startHealthCheck --preview
Response

Command Preview - List of affected MO(s) with applied action parameters:
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00005,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00018,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00017,ManagedElement=1
 
3 Object(s) will be affected by this command.
 

 Action by Query using preview option and with savedSearch [scope type]

cmedit action -sa savedsearch01 eutrancellfdd changeFrequency.earfcn=25 --preview
Response

Command Preview - List of affected MO(s) with applied action parameters:
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00017,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=LTE03ERBS00017-1
changeFrequency.earfcn : 25
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext=netsim_LTE03ERBS00036,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=LTE03ERBS00036-1
changeFrequency.earfcn : 25
 
2 Object(s) will be affected by this command.
 
 Action on a node unauthorized by TBAC

cmedit action ERBS002 EUtranCellFDD changeFrequency.(earfcn=1)
Response

Error 3004 : Access Denied. Your Target Based Access Control rights do not allow you to perform actions on the Network Element(s).
 
 Action by Query using preview option when one specified node is unauthorized by TBAC

cmedit action ERBS001;ERBS002 EUtranCellFDD changeFrequency.(earfcn=1) --preview
Response

Command Preview - List of affected MO(s) with applied action parameters:
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS002-1
warning : Access Denied. You do not have access to this node.
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS001-1
changeFrequency.earfcn : 1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS001-2
changeFrequency.earfcn : 1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS001-3
changeFrequency.earfcn : 1
 
3 Object(s) will be affected by this command.
 Action by Query when one specified node is unauthorized by TBAC

cmedit action ERBS001;ERBS002 EUtranCellFDD changeFrequency.(earfcn=1) --force
Response

FAILED FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS002-1
Error 3005 : Access Denied. You do not have access to this node.
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS001-1
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS001-2
 
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=ERBS001-3
 
Error 5008 : The command executed on 3 out of 4 objects@@@@@manual cmedit create@@@@
< Back To Cmedit

Syntax
 Syntax to Create Node Data in the Management System

cmedit create <FDN> attributes [options]
Attributes
Used to specify attributes.

<attribute name>=<attribute value>
Attribute values are specified by giving the name, followed by "=" and then the value.

<attribute1 name>=<attribute1 value>;<attribute2 name>=<attribute2 value>...
Use semi-colon or comma to separate multiple attribute name and value pairs.

<struct attribute name>=(<struct member1 name>=<struct member1 value>,<struct member1 name>=<struct member1 value>...) or
<struct attribute name>={<struct member1 name>=<struct member1 value>,<struct member1 name>=<struct member1 value>...}
Use round brackets or curly brackets to group struct member names and values together, separated by a comma.

<sequence attribute name>=[<value1>,<value2>,<value3>...]
Use square brackets to group multiple values in a sequence attribute, separated by a comma.

Options
Use the options to further refine the object creation.

-ns or --namespace
Specify a particular namespace.

-v or --version
Specify a particular version.

-t or --table
Present the response in table format.

-l or --list
Present the response in list format.

-c or --config
Operate on MO(s) in the specified configuration area.

Note: The two options namespace and version must be used together in this command.
Description
cmedit create is used to create Node data in the management system.
The command has an optional parameter [-c | --config] to specify an existing configuration. If this optional parameter is not included, by default the command is applied to the live configuration.
Details of Case Sensitivity for cmedit commands.

Details of Special Characters for cmedit commands.

Command Consequences

The create command creates one MO instance.
Examples
 Create an ENodeBFunction MO under the Managed Element MO and Set an Attribute of Type Struct, Specifying the version and the namespace

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1 ENodeBFunctionId=1; userlabel="sampleUserLabel"; enodebplmnid=(mcc=272,mnc=7,mnclength=2) -ns=ERBS_NODE_MODEL -v=6.1.100 --config=myConfig
Response

This command returns the created ENodeBFunction MO with the list of all attributes.


 Create a Child MO Under the ENodeBFunction MO Created in the	Previous Example

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1 geranetworkid=1 --config=myConfig
Response

FDN: MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,GeraNetwork=1
GeraNetworkId : 1
userLabel: null
				

 Create Attributes of Type MO Ref under the ENodeBFunction MO	Created in the First Example and Set an Attribute of Type List

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3 eutrancellfddid=3,sectorfunctionref="MeContext=ERBS001,ManagedElement=1,SectorEquipmentFunction=1",earfcndl=17999,earfcnul=20175,cellid=1,physicallayercellidgroup=130,tac=1,physicallayersubcellid=2,pciconflict=[YES,YES] --config=myConfig
Response

This command returns the created EUtranCellFDD MO with the list of all attributes.


 Create an ENodeBFunction MO when specified node is unauthorized by TBAC

cmedit create MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1 ENodeBFunctionId=1; userlabel="sampleUserLabel"; enodebplmnid=(mcc=272,mnc=7,mnclength=2) -ns=ERBS_NODE_MODEL -v=6.1.100 --config=myConfig
Response

Error 3004 : Access Denied. Your Target Based Access Control rights do not allow you to perform actions on the Network Element(s).


 Create/Add an attribute "timeZone" under the NetworkElement MO/NodeFDN NetworkElement=*MSC* (Mandatory attribute of the NetworkElement MSC and its variants during addition)

cmedit create NetworkElement=MSC-S-DB-APG43L-R18A01 networkElementId=MSC-S-DB-APG43L-R18A01, neType=MSC-DB, platformType=APG, ossPrefix="MeContext=MSC-S-DB-APG43L-R18A01", timeZone="Europe/Dublin" -ns=OSS_NE_DEF -version=2.0.0
Response

This command returns the created NetworkElement MO with the list of all attributes.


 SubNetwork can be created on its own first before adding the node

cmedit create SubNetwork=ERBS SubNetworkId=ERBS -ns=OSS_TOP -version=3.0.0
Response

FDN : SubNetwork=ERBS
SubNetworkId : ERBS@@@@@manual cmedit delete@@@@
< Back To Cmedit

Syntax
 Syntax to Delete an Object by Specifying the FDN

cmedit delete <FDN> [-ALL] [-c | --config]
cmedit delete <FDN> criteria [filter] [-ALL] [options]
 Syntax to Delete an Object by Query

cmedit delete [scope type] scope criteria [filter] [-ALL] [options]
 Syntax to delete an object by name

cmedit delete [scope type] scope criteria_for_MO_by_Id [filter] [-ALL] [options]
Scope type
Use Scope Type option to restrict the scope to:

collection [ -co | --collection ]
nodenames [ -n | --node ]
saved search [ -sa | --savedSearch ]

Scope
Use the scope to specify node names or collections to search on.

<Node Name>
One or many node names can be defined as scope. Multiple node names should be separated with a semi-colon, i.e. - ERBS01;ERBS02;ERBS03.

<Partial Node Name>*
Starts with the specified partial node name, i.e. - ERBS0*.

*<Partial Node Name>
Ends with the specified partial node name, i.e. - *001.

*<Partial Node Name>*
Contains the specified partial node name, i.e. *RBS0*.

*
References all nodes in the network.

<Collection Name>
One or many Collections can be defined as scope. Multiple Collection names should be separated with a semi-colon, i.e. - Collection01;Collection02
Partial collection names are not supported and the name should be entered in a case sensitive manner.

ENM CLI supports querying of MOs in a Collection that are stored in a flat structure only, i.e. MOs all of the same type.
Collections maybe queried that have MOs stored in a parent / child (Topology) type structure. However, duplicate MOs will be returned if the parent MO in the Collection is not the MO being queried.

<SavedSearch Name>
One or many SavedSearch can be defined as scope. Multiple SavedSearch names should be separated with a semi-colon, i.e. - savedsearch01;savedsearch02
Partial SavedSearch names are not supported and the name should be entered in a case sensitive manner.
Saved Search as scope can be issued only with the criteria to specify Managed Object (MO) Classes names and attribute values to search on.

Criteria
Use the criteria to specify Managed Object (MO) Classes names and attribute values to operate on.

<MO Class>
Operate on all instances of the specified MO Class.

<MO Class>.<attr name><operator><value> 
Operate on all instances of the specified MO Class which contains the specified attribute whose current value satisfies the specified operator (<,>,==) and specified value.

<MO Class>.(<attr name><operator><value>...)
Use round brackets to group multiple attributes for the same MO Class.

<MO Class1>,<MO Class2>
Use a comma to separate multiple MO Classes when operating on all instances of *either* MO Class1 or MO Class2.

Criteria for MO by Id
<MO Class>=<MO_Id>
Use to identify MO class(es).

<MO Class>=<Partial MO_Id>*
Starts with the specified partial MO_Id, i.e. - cell*.

<MO Class>=*<Partial MO_Id>
Ends with the specified partial MO_Id, i.e. - *001.

<MO Class>=*<Partial MO_Id>*
Contains the specified partial MO_Id, i.e. *cell00*.

Note:
The <MO_Id> supports alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.
The supported "special" characters are:

. - _
If the <MO_Id> includes any other special character, then it must be contained in quotes.

Filter
Use filter to specify which of the types that is to be deleted.

<MO Class>
Operate on all instances of the specified MO Class.

Options
-ns or --namespace
Specify a particular namespace.

-v or --version
Specify a particular version.

-c or --config
Operate on MO(s) in the specified configuration area.

--force
Force the command execution. This option is not required when using scripting integration or batch scripts. It is assumed that all commands in a script should be executed without user intervention.

-prev or --preview
Preview the MOI(s) involved in the command.

Note: The two options namespace and version must be used together in this command.

Description
cmedit delete is used to delete a hierarchical structure of node Managed Object Instances (MOI) (such as an entire node) or to delete individual MOIs in the Network.

The command has an optional parameter [-c | --config] to specify an existing configuration. If this optional parameter is not included, by default the command is applied to the live configuration.
The -ALL parameter is used to force the deletion of MOIs, even if other MOIs are defined under the specified MOI. The specified FDN and all MOIs under the FDN are deleted.
Details of Case Sensitivity for cmedit commands.

Details of Special Characters for cmedit commands.

Collection and SavedSearch names as scope support alphanumeric characters (A-Z, a-z and 0-9) and certain supported "special" characters.

The supported "special" characters are:

. - _ <space>
If Collection/SavedSearch name includes <space>, then it must be contained in quotes.

- If a delete command cancels more nodes than the system allows an execution error will be showed.

- A delete command will attempt to remove MOI(s) and it may result in Network Traffic Disturbance. Therefore, a preview of affected MOIs will be displayed.

To execute the command after preview has been displayed there are two options for the user:

to click the button labeled 'Execute' displayed in suggestion area
to issue again the command with the option '-- force'
If the user requests an output to file for the command and a preview of affected MOIs is needed two files will be generated : one for preview and one for command output after confirmation

Command Consequences

Without the -ALL option, the delete command will attempt to delete the specified MOI(s) only. If MOI(s) have children, the deletion of these MOI(s) fail.
With the -ALL option, the delete command will delete the specified MOI(s) and their children.
Examples
 Delete Node by FDN: delete an ENodeBFunction and all MOIs under the ENodeBFunction

cmedit delete MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1 -ALL --config=myConfig --force
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
2 instance(s) deleted
 

 Delete ENodeBFunction instances and all MOIs under them

cmedit delete * enodebfunction -ALL --config=myConfig --force
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
4 instance(s) deleted
 

 Delete ENodeBFunction instances and all MOIs under them when the changes may result in Network Traffic Disturbance and Confirmation Request.

cmedit delete * enodebfunction -ALL --config=myConfig
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
4 instance(s) will be deleted by this command.
 
Execute
 
Response (after confirmation)

FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1
 
FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
4 instance(s) deleted
 
Note: This command was forced for execution following automatic Preview Mode
 

 Delete ManagedElement instances using preview option

cmedit delete * ManagedElement --config=myConfig --preview
Response

Command Preview - List of Affected MO(s):
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext= ERBS001,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext= ERBS002,ManagedElement=1
 
FDN : SubNetwork=ERBS-SUBNW-1,MeContext= ERBS003,ManagedElement=1
 
3 Object(s) will be deleted by this command.
 

 Delete ENodeBFunction instances, some of which have Child MOs defined below them whilst others have no child MO.

cmedit delete * enodebfunction --config=myConfig --force
Response

FAILED FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
Error 1011 : Cannot delete MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1 because it has one or more child MOs Delete children first. Hint : Append -ALL to end of DELETE command to automatically delete all children.
Note: MOs which have child MOs defined below them will not be deleted even if they satisfy the specified, filtered criteria.


 Delete ENodeBFunction with wrong MO Class specified.

cmedit delete * enodebfunction managedelement -ALL --config=myConfig
Response

0 instance(s) found
 

 Delete ENodeBFunction instances with userLabel attribute equal to "sampleUserLabel".

cmedit delete * enodebfunction.userlabel=="sampleUserLabel" --config=myConfig --force -ALL
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
1 instance(s) deleted
 

 Delete MOs across all nodes defined in the network, which satisfy a specified, filtered criteria. The MOs to be deleted have no Child MOs.

cmedit delete * eutrancellfdd.(eutrancellfddid==3, cellid==1) eutrancellfdd --config=myConfig --force -ALL
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
SUCCESS FDN : MeContext=ERBS002,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=3
 
2 instance(s) deleted
 

 Delete ENodeBFunction instances, some of which have attributes filters on different MO types, Specifying the Namespace and the Version.

cmedit delete * enodebfunction.userlabel==sampleUserLabel,eutrancellfdd.cellid==1 enodebfunction -ns=ERBS_NODE_MODEL -v=6.1.100 --config=myConfig --force -ALL
Response

SUCCESS FDN : MeContext=ERBS001,ManagedElement=1,ENodeBFunction=1
 
1 instance(s) deleted

 Delete ENodeBFunction instances, some of which have attributes filters on different MO types, Specifying the savedSearch [scope type], Namespace and the Version.

cmedit delete -sa savedsearch01;savedsearch02 enodebfunction.userlabel==sampleUserLabel,eutrancellfdd.cellid==1 enodebfunction -ns=ERBS_NODE_MODEL -v=6.1.100 --force -ALL
Response

SUCCESS FDN : MeContext=LTE03ERBS00010,ManagedElement=1,ENodeBFunction=1
 
SUCCESS FDN : MeContext=LTE03ERBS00008,ManagedElement=1,ENodeBFunction=1
 
SUCCESS FDN : MeContext=LTE03ERBS00015,ManagedElement=1,ENodeBFunction=1
 
3 instance(s) deleted
 Delete a NetworkElement when specified node is unauthorized by TBAC

cmedit delete ERBS002 NetworkElement
Response

Error 3004 : Access Denied. Your Target Based Access Control rights do not allow you to perform actions on the Network Element(s).
 
 Delete NetworkElement objects using preview option when one specified node in unauthorized by TBAC

cmedit delete ERBS001;ERBS002 NetworkElement --ALL --preview
Response

Command Preview - List of Affected MO(s):
 
FDN : NetworkElement=ERBS002
warning : Access Denied. You do not have access to this node.
 
FDN : NetworkElement=ERBS001
 
FDN : NetworkElement=ERBS001,SHMFunction=1,InventoryFunction=1
 
FDN : NetworkElement=ERBS001,CppConnectivityInformation=1
 
FDN : NetworkElement=ERBS001,CmNodeHeartbeatSupervision=1
 
FDN : NetworkElement=ERBS001,InventorySupervision=1
 
FDN : NetworkElement=ERBS001,FmAlarmSupervision=1
 
FDN : NetworkElement=ERBS001,CmFunction=1
 
FDN : NetworkElement=ERBS001,SHMFunction=1
 
FDN : NetworkElement=ERBS001,PmFunction=1
 
FDN : NetworkElement=ERBS001,FmFunction=1
 
FDN : NetworkElement=ERBS001,SecurityFunction=1
 
11 Object(s) will be deleted by this command.

 Delete SubNetworks instances and Confirmation Request.

cmedit delete SubNetwork=ERBS
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
FDN : SubNetwork=ERBS
 
 
1 instance(s) will be deleted by this command.
 
Execute
 
Response (after confirmation)

SUCCESS FDN : SubNetwork=ERBS
 
 
1 instance(s) deleted
 
Note: This command was forced for execution following automatic Preview Mode
 @@@@@manual cmedit describe@@@@
< Back To Cmedit

Syntax
 Syntax to Describe the Modeled Data by NeType

cmedit describe -ne | --netype <neType>
 Syntax to Describe the Modeled Data by MO

cmedit describe criteria [options]
Criteria
Use the criteria to specify the Managed Object (MO) Classes, attributes and actions to describe.
Structs and struct members can also be described using the same syntax.

<MO Class>
Describe one MO Class.

<MO Class>.<field name>
Describe the specified MO Class field. A field can be an attribute or an action of the MO class.

<MO Class>.(<field name1>,<field name2>...)
Use round brackets to describe multiple fields for the same MO Class.

<MO Class>.*<Partial field name>*
Describe all attributes and actions matching partial field name for specified MO Class.

<MO Class>.*
Describe all persistent attributes and all actions of the specified MO Class.

<MO Class>.<cm>
Use the special identifier <cm> to describe all Configuration Management (CM) attributes of the specified MO Class.

<MO Class>.<pm>
Use the special identifier <pm> to describe all Performance Management (PM) attributes of the specified MO Class.
(Note: Only supported on CPP platform types where node types support reading of PM counters as MO attributes.)

<MO Class>.<p>
Use the special identifier <p> to describe all persistent attributes of the specified MO Class.

<MO Class>.<w>
Use the special identifier <w> to describe all writable persistent attributes of the specified MO Class.

<MO Class>.<m>
Use the special identifier <m> to describe all mandatory attributes of the specified MO Class.

*<Partial MO Class>*
Describe all MO Classes containing the partial specified MO Class. The above criteria are valid also with a Partial MO Class.

Options
-ns or --namespace
Specify a particular namespace.

-v or --version
Specify a particular version.

-l or --list
Present the response in list format.

-t or --table
Present the response in table format.
This can be useful when comparing results.

Note: When copy and pasting a table of data from the CLI to another application the data in the clipboard needs to be copied as text only to prevent issues with formatting.

--all
Specify output contains all MO Class versions.

Note: The two options version and --all cannot be used together. Avoid to use --all with commands including a Partial MO Class.

Description
cmedit describe is used to read the description of modeled data in the system.

Details of Case Sensitivity for cmedit commands.

Command Consequences

There is no consequences in the Describe command.
Examples
 Describe version information for NeType

Example:

cmedit describe --netype ERBS
Result:

Ne Type: ERBS
Ne Release: 16B
Product Identity: -
Revision (R-State): -
Functional MIM Name: ERBS_NODE_MODEL
Functional MIM Version: G.1.301
Model ID: 16B-G.1.301

 Describe all attributes of MO Classes with partial MO Class specified

Example:

cmedit describe *cell*
Result:

This command lists all MO Classes and attributes with the specified partial MO Class. The following attribute information is displayed:

MO Class

Name: ExternalUtranCellFDD
Description: This Managed Object contains a UTRAN cell for Frequency Division Duplex (FDD).
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Parent MOs: UtranFrequency
Child MOs:
Ne Type:
Struct

Name: CellIdentityUtra
Description: CellIdentityUtra
Namespace: ERBS_NODE_MODEL
Version: G.1.301
References from: ExternalUtranCellFDD, ExternalUtranCellTDD

 Describe the latest versions in all namespaces of the specified MO Type

Example:

cmedit describe managedelement
Result:

This command lists the descriptions for one MO Type for the most recent version, in all namespaces, with the list of all attributes. The following attribute information is displayed:

MO Class

Name: ManagedElement
Description: This represents super-type for all managed elements.
Namespace: OSS_TOP
Version: 3.0.0
Parent MOs: MeContext, SubNetwork
Child MOs:
Ne Type:

 Describe the latest versions in all namespaces and information about modeled actions of the specified MO Type

Example:

cmedit describe managedelement.*
Result:

This command lists the descriptions for one MO Type for the most recent version, in all namespaces, with the list of all persistent attributes and all actions. The following information are displayed:

MO Attribute

Name: ManagedElement.mimName
Description: The name and version of the MIM on the node.
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Data Type: STRING
Disturbances:
Default Value:
Read Behavior: FROM_DELEGATE
Write Behavior: NOT_ALLOWED
Additional Information: noNotification
Child MOs:
MO Action

Name: ManagedElement.manualRestart
Description: Manual restart of the node.
Namespace: ERBS_NODE_MODEL
Version: 7.1.301
Return Type:
Disturbances: manualRestart causes loss of traffic!

 Describe MO Type of a specific version and namespace.

Example:

cmedit describe managedelement --namespace=ERBS_NODE_MODEL --version=7.1.301
Result:

This command lists the descriptions for one MO Type for the specified version and namespace, with the list of all attributes. The following attribute information is displayed:

MO Class

Name: ManagedElement
Description: Managed Element This MO is the top MO in the MOM. A management application will communicate with the ManagedElement MO for the purpose of monitoring and controlling it. This MO is created automatically and cannot be deleted. The RDN of this MO is ManagedElement=1.
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Parent MOs: MeContext, SubNetwork
Child MOs: ENodeBFunction, Equipment, EquipmentSupportFunction, IpOam, IpSystem, ManagedElementData, MceFunction, NodeManagementFunction, ResourceAllocationFunction, SectorEquipmentFunction, SwManagement, SystemFunctions, TransportNetwork
Ne Type:

 Describe Multiple MO Types for latest versions in all namespaces.

Example:

cmedit describe managedelement;enodebfunction;eutrancellfdd
Result:

This command lists the descriptions for one MO Types with the list of all attributes, for the latest versions in all namespaces. The following attribute information is displayed:

MO Class

Name: ENodeBFunction
Description: ENodeBFunction
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Parent MOs: ManagedElement
Additional Information:
Child MOs: AdmissionControl, AirIfLoadProfile, AmoFunction, AnrFunction, AutoCellCapEstFunction, CarrierAggregationFunction, Cdma2000Network, CellSleepNodeFunction, DrxProfile, EUtraNetwork, EUtranCellFDD, EUtranCellTDD, GeraNetwork, ImeisvTable, LoadBalancingFunction, Mbms, MdtConfiguration, NonPlannedPciDrxProfile, OpProfiles, Paging, ParameterChangeRequests, PlmnInfo, PmEventService, PreschedulingProfile, QciTable, RadioBearerTable, Rcs, ResourcePartitionGroup, ResourcePartitions, RlfProfile, Rrc, SectorCarrier, SecurityHandling, SubscriberProfileID, TermPointToMme, TermPointToSGW, TimerProfile, UlCompGroup, UtraNetwork
Ne Type:

 Describe latest MO Type with specified attribute.

Example:

cmedit describe managedelement.healthcheckresult
Result:

This command lists the descriptions of the specified attribute. The following attribute information is displayed:

MO Attribute

Name: ManagedElement.healthCheckResult
Description: The result of the latest health check.
Namespace: RNC_NODE_MODEL
Version: 22.5.4505
Data Type: COMPLEX_REF
Disturbances:
Default Value:
Read Behavior: FROM_PERSISTENCE
Write Behavior: NOT_ALLOWED
Additional Information: noNotification
Child MOs:

 Describe latest MO Type with partial specified attribute.

cmedit describe ManagedElement.healthCheck*
Response

This command returns a list and shows the descriptions of the specified attributes matching a given partial attribute name. The following attribute information is displayed:

MO Attribute

Name: ManagedElement.healthCheckResult
Description: The result of the latest health check.
Namespace: RNC_NODE_MODEL
Version: 22.5.4505
Data Type: COMPLEX_REF
Disturbances:
Default Value:
Read Behavior: FROM_PERSISTENCE
Write Behavior: NOT_ALLOWED
Additional Information: noNotification
Child MOs:

 Describe latest MO Type with specified multiple attributes.

Example:

cmedit describe enodebfunction.(userlabel,enodebfunctionid)
Result:

This command lists the descriptions of the specified multiple attributes. The following attribute information is displayed:

MO Attribute

Name: ENodeBFunction.userLabel
Description: Label for free use.
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Data Type: STRING
Disturbances:
Default Value:
Read Behavior: FROM_PERSISTENCE
Write Behavior: PERSIST_AND_DELEGATE
Additional Information: noNotification
Child MOs:

 Describe target specific MO Type.

Example:

cmedit describe ManagedElement --namespace=ComTop --version=10.21.0
Result:

This command lists the descriptions for one MO Type for the specified version and namespace, with the list of all attributes specific to supported target type(s). The following attribute information is displayed:

MO Class

Name: ManagedElement
Description: The top-level class in the Common Information Model is Managed Element root Managed Object Class. From this class, all model entities are contained. The Managed Object Class (MOC) has attributes that provide information on the Managed Element Identity, primary location and the products it contains.
Namespace: ComTop
Version: 10.21.0
Parent MOs: MeContext, SubNetwork
Child MOs: BorderGatewayFunction, BtsFunction, CscfFunction, DmxcFunction, DscFunction, DuaSFunction, ENodeBFunction, EmeFunction, Epg, Equipment, EquipmentSupportFunction, JavaCaf, JavaSip, Legacy, MceFunction, MediaResourceFunction, Mmas, MtasFunction, NodeBFunction, NodeSupport, PolicyControlFunction, SbgFunction, SystemFunctions, Transport, WcgFunction, bridge, bridge-state, contexts, contexts-state, ericsson-qos-ipos$$qos, interfaces, interfaces-state
Ne Type:
MO Class

Name: ManagedElement
Description: The top-level class in the Common Information Model is Managed Element root Managed Object Class. From this class, all model entities are contained. The Managed Object Class (MOC) has attributes that provide information on the Managed Element Identity, primary location and the products it contains.
Namespace: ComTop
Version: 10.21.0
Parent MOs: MeContext, SubNetwork
Child MOs: Equipment, JavaCaf, Legacy, Mmas, SystemFunctions, Transport, bridge, bridge-state, contexts, contexts-state, ericsson-qos-ipos$$qos, interfaces, interfaces-state
Ne Type: Router6672, Router6675, Router6x71, Router6274

 Describe details of MO Action with a specific version and namespace

Example:

cmedit describe managedelement.manualRestart --namespace=ERBS_NODE_MODEL --version=7.1.301
Result:

This command lists the descriptions for the specified MO action. The following information are displayed:

MO Action

Name: ManagedElement.manualRestart
Description: Manual restart of the node.
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Return Type:
Disturbances: manualRestart causes loss of traffic!
MO Action Parameter

Name: restartRank
Description: The restart rank.
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Data Type: RestartRank
Default Value:
Value Range: RESTART_WARM, RESTART_REFRESH, RESTART_COLD, RESTART_COLDWTEST
MO Action Parameter

Name: restartReason
Description: The reason for the restart.
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Data Type: RestartReason
Default Value:
Value Range: PLANNED_RECONFIGURATION, UNPLANNED_NODE_EXTERNAL_PROBLEMS, UNPLANNED_NODE_UPGRADE_PROBLEMS, UNPLANNED_O_AND_M_ISSUE, UNPLANNED_CYCLIC_RECOVERY, UNPLANNED_LOCKED_RESOURCES, UNPLANNED_COLD_WITH_HW_TEST, UNPLANNED_CALL_PROCESSING_DEGRADATION, UNPLANNED_LOW_COVERAGE, OPERATOR_CLASSIFIED_PROBLEMS, UPGRADE_BOARD_RESTART
MO Action Parameter

Name: restartInfo
Description: A free text field where extra information can be added.
Namespace: ERBS_NODE_MODEL
Version: G.1.301
Data Type: STRING
Default Value:
Value Range:

 Describe the latest versions in all namespaces of the specified PO Type

Example:

cmedit describe LicenseData
Result:

This command lists the descriptions for one PO Type for the most recent version, in all namespaces. The following attribute information is displayed:

PO Class

Name: LicenseData
Description: Holds LicenseData file information
Namespace: shm
Version: 1.0.0
Parent MOs:
Child MOs:
Ne Type:

 Describe latest PO Type with specified attribute.

Example:

cmedit describe LicenseData.signature
Result:

This command lists the descriptions of the specified attribute. The following attribute information is displayed:

PO Attribute

Name: LicenseData.signature
Description: signature
Namespace: shm
Version: 1.0.0
Data Type: STRING
Disturbances:
Default Value:
Value Range:
Read Behavior: INHERITED
Write Behavior: INHERITED
Additional Information:
Child MOs:
@@@@@manual cmedit import@@@@
< Back To Cmedit

Syntax
The import command is described with the following EBNF grammar:

"cmedit" "import" ( RUN_IMPORT | RETRY_JOB | GET_JOB_STATUS | STATUS_WITH_TIME_SPECIFICATION | CANCEL_JOB )

RUN_IMPORT ::= FILE_NAME FILE_TYPE TARGET_CONFIGURATION [ VALIDATE ] [ NO_COPY ] [ CONTINUE_ON_ERROR ]

RETRY_JOB ::= RETRY JOB [ CONTINUE_ON_ERROR ]

CANCEL_JOB ::= CANCEL JOB

GET_JOB_STATUS ::= STATUS [ JOB [ DETAIL ] ]

STATUS_WITH_TIME_SPECIFICATION ::= STATUS TIME_SPECIFICATION

FILE_NAME ::= "-f file:<file-name>"

FILE_TYPE ::= ( "-ft" | "--filetype" ) <file-type>

TARGET_CONFIGURATION ::= ( "-t" | "--target" ) <target-configuration>

VALIDATE ::= ( "-val" | "--validate" ) <skip-validation-type>

NO_COPY ::= ( "-nc" | "--nocopy" )

RETRY ::= ( "-rt" | "--retry" )

CANCEL ::= ( "--cancel" )

CONTINUE_ON_ERROR ::= ( "-e" | "--error" ) <continue-on-error>

STATUS ::= ( "-st" | "--status" )

JOB ::= ( "-j" | "--job" ) <job_ID>

DETAIL ::= ( "-v" | "--verbose" )

TIME_SPECIFICATION ::= BEGIN [ END ] | [ BEGIN ] END

BEGIN ::= "--begin" <beginTime>

END ::= "--end" <endTime>

Examples
Examples can be seen in the following tutorial:
Import configuration management data.
Context Description
Configuration Management (CM) Editor, cmedit, is used to bulk import CM data through the ENM Command Line Interface (CLI).
Import task is performed by a configuration engineer. The engineers add or modify large amounts of network data to the management system.
The following parameters are mandatory: <file-name>, <file-type> and <target-configuration>.
For 3GPP file-type, schema validation is performed automatically as part of an import to ensure that the import file is well formed and compliant with the “configData.xsd” and “genericNrm.xsd” schemas.
Validation is performed automatically as part of an import. Validation reduces the risk of an invalid configuration being applied to a network. If there is a validation error, import will not attempt to apply any of the operations, regardless of whether or not <continue-on-error> was requested in the import command. The validation errors can be read by retrieving the job status in verbose mode. Types of validation include model and instance. Model Validation is implicit. Instance Validation is optional and is enabled by default. See sections “Model Validation” and "Instance Validation" for the list of checks performed.
<target-configuration> is the name of an existing configuration (to create the configuration please refer to the config create command). This applies the command to the specified target configuration.
<file-type> is the format of the file being imported. The following file formats are supported:
3GPP - 3GPP file format
dynamic - Ericsson Dynamic file format

<file-name> cannot contain spaces or quotes. It must start with a letter, numeral or underscore. It can contain any other combination of letters, numerals, underscores or hyphen-minus (Unicode: U+002D), and periods to separate file extensions.
<status> will provide status of jobs created with the CM Edit Import command or the Import end points on the CM REST NBI. Response is limited to 10000 rows and only the most recent jobs will be displayed. Jobs created with the Bulk Configuration UI and the CM Bulk Import to Live NBI will not be displayed. Individual jobs and their details can be queried using the optional <job_ID> and <verbose> parameters.
<skip-validation-type> Offers the possibility to disable/suppress particular phase of validation. Currently supported value(s) are 'noinstance', which when supplied, skips instance validation phase of import.
<no-copy> prevents nodes being copied from the live configuration before import. Without this flag the default behavior is to automatically copy any network elements modified by the import file to the non-live configuration.
<retry> Allows import jobs which have passed validation but failed during the execution phase to be retried. An import job is retried using its jobId. A file cannot be used. Retry is only supported to the live configuration. There are no limits on the number of times an import job can be retried. The default <continue-on-error> behavior for retry is the behavior of the original import job. If a <continue-on-error> behavior differing from the original behavior is specified when retrying the job, this is used. The status of the retry job is queried in the same manner as an import job. The start time of a retried job is the start time of the original import job, the end time is the end time of the last retry for that import job and the elapsed time is the cumulative times of the import job and all subsequent retries. If a retry job fails, the latest failure is shown. Records of previous failures are not kept. Cancelled import job cannot be retried.
Prerequisites for retrying a job:

Schema validation for the file must have previously passed
Model validation for the file must have previously passed
Instance validation for the file must have previously passed if it is not disabled at the time of import
A valid jobId must exist for the import job being retried

<cancel> Allows to abort the current execution of an import job. Import job cancellation is supported on best effort basis which means that cancellation of job is not always guaranteed. Import job can be cancelled at any phase (Validation or Execution).
Prerequisites for cancelling a job:

A valid jobId must exist for the import job being cancelled
Only Import jobs created from the ENM Command Line Interface (CLI) can be cancelled
Cancel is supported for import to live configuration only
Jobs whose status is completed or failed or cancelled or cancelling, cannot be cancelled

When an operator issues cancel command,

An acknowledgement will be provided that cancel has been requested on the job.
Operator would be guided to check the import job status to confirm the status of cancellation.
Querying the import job status at this moment, shows the status as "CANCELLING".
Operator has to poll for the job status to determine whether the job has actually been cancelled.
When the job has actually been cancelled, its status will be set to "CANCELLED". In case the job could not be cancelled (since it is on best effort basis), it goes to either COMPLETED or FAILED status.
Cancelling an import job implies that the on-going transaction will be rolled back and subsequent transactions (operations) will not be executed.
The changes that were already committed to the network from the previous transactions of this job remain applied to the network.

<continue-on-error> offers the possibility to continue, when errors occur during an import, depending on the value input by the user. The following are the supported values:
Operation - In case of error, import will mark the operation as failed and will continue to execute remaining operations.
Node - In case of error, import will mark the operation as failed, skip the remaining operations on the current node and will continue to execute operations on subsequent nodes.
Stop - In case of error, import will mark the operation as failed and will skip the remaining operations.
Note: continue on error values are case insensitive.

Errors such as an incorrectly formatted import file will still cause immediate import failure. Without this flag the default behavior is immediate import failure on the first error encountered. The following errors are non fatal:
Attempting to create an MO that already exists
Attempting to delete an MO that doesn't exist

In case of errors, the actual reason for import failure can be read by retrieving the job status in verbose mode.

Expect performance degradation when an import job experiences a large number of operation errors.

<beginTime> is a time filter. Results are restricted to return the jobs that were executed after or on the provided time specification and is limited to 10000 rows with the most recent jobs being displayed.
<endTime> is a time filter. Results are restricted to return the jobs that were executed before or on the provided time specification and is limited to 10000 rows with the most recent jobs being displayed.
<beginTime> and <endTime> support the following formats:
Date and time: YYYY-MM-DDThh:mm:ss
Date only: YYYY-MM-DD
Time only: hh:mm:ss (The time specified is applied to the current day)
In all cases midnight is considered '00:00:00'

The order of all non-mandatory flags in the command are irrelevant.
Zipped archives containing 1 import file are supported. Only the first file in the archive will be imported, the remaining files will not be imported. The file must be of a supported type. For 3GPP import format only xml is supported. For Ericsson dynamic file format only txt or csv file are supported.
Command syntax is case sensitive.
Prerequisites

The target file being imported should exist.
The target file must be dragged and dropped into the browser, before starting an import.
The target file must be ordered by managed object hierarchy. Parents must be created before their children.
When using 3GPP file format, target file must be adhered to 3GPP Schemas(configData.xsd and genericNrm.xsd).
When using dynamic file format, target file must follow Ericsson Dynamic file format.
Model Validation

The following checks are performed on Managed Object Class (MOC) level:
The MOC exists in the model
The MOC is not system created for create or delete operations

The following checks are performed on attribute level for create or modify operations:
The attribute exists in the model (for the specified MOC)
The attribute is read only or restricted
The attribute is of the correct type
For numeric and boolean data types, the attribute is within the allowed value range or set of values
For strings, the attribute is within the allowed length range
For enumerations, the attribute has a valid value from a predefined allowed set of values. (This can be either a string or the corresponding integer value)
Members of complex attributes (structs and lists) are also subject to the same checks as simple attributes (types, ranges etc.)

The following checks are performed on Managed Object Class (MOC) level for action operations:
The action exists in the model
The action has a void return type
All mandatory arguments are provided
Provided arguments are supported and have valid data type

In some cases it is not possible to perform the complete set of model validation checks on a MOC or attribute. For example, if the MOC does not exist in the model no further checking of the MOC or its attributes is possible, If an attribute has an incorrect data type it is not possible to check its value range etc..
Instance Validation

Instance validation is performed to ensure that import operations are valid against target configuration. It also checks import operation validity against previous import operations in the import file. This validation helps in reducing the risk of undesired updates being applied to the network. Instance validation is done for the below operation types

CREATE: To verify the create operation below checks are performed.
MO is neither created earlier by the import file nor exists in target configuration
Any Parent MO is not deleted earlier by the import file and exists in target configuration
Cumulative number of MOs of same type under the Parent MO in DB and Import file, should not exceed maximum cardinality constraint (if applicable)

DELETE: To verify the delete operation below checks are performed.
MO is created earlier by the import file or exists in target configuration
MO is not deleted earlier by the import file
Any Parent MO is not deleted earlier by the import file.
Cumulative number of MOs of same type under the Parent MO in DB and Import file, should not fall below minimum cardinality constraint (if applicable)

UPDATE: To verify the update operation below checks are performed.
MO is created earlier by the import file or exists in target configuration
MO is not deleted earlier by the import file
Any Parent MO is not deleted earlier by the import file.

ACTION: To verify the action operation below checks are performed.
MO is created earlier by the import file or exists in target configuration
MO is not deleted earlier by the import file
Any Parent MO is not deleted earlier by the import file.

Note:
Instance validation checks are not exhaustive and still import is prone for execution failures.

Notes
The response will indicate the number of instances updated by the import.
As described above, both 3GPP and Ericsson Dynamic file formats are supported for Import.
3GPP file format

3GPP import format is a telecommunications industry standard format.
The 3GPP file format in import supports only UTF-8 encoding.
Ericsson Dynamic file format

Ericsson dynamic file format is an Ericsson proprietary format.
Ericsson dynamic file format is available with the Dynamic CM Value Package license.
Ericsson dynamic file format provides the user a way to import CM data via csv or txt file, which are simple to create and write and can be easily manipulated starting from an export file, which is produced with txt extension.
Import and export files contain nearly the same information; the only difference is that import ones contain operations on data.
When using cvs extension and opening the file in Excel, Excel should be instructed to use a colon as the delimiter for each column to ensure that attribute names and values are placed in separate columns.@@@@@manual cmedit export@@@@
< Back To Cmedit

Syntax
 Syntax to run an export

cmedit export scope --filetype <filetypeName> [filter] [options]
 Syntax to get the status of an export job for a given job ID

cmedit export --status --job <jobID> [-v | --verbose]
 Syntax to get the status of an export job for a given job name

cmedit export --status --jobname <jobName> [-v | --verbose]
 Syntax to get the status of all export jobs

cmedit export --status
 Syntax to download an export file for a given job ID

cmedit export --download --job <jobID>
 Syntax to download an export file for a given job name

cmedit export --download --jobname <jobName>
 Syntax to list predefined filters

cmedit export --listfilters
 Syntax to remove an export job for a given job ID

cmedit export --remove --job <jobID>
 Syntax to remove an export job for a given job name

cmedit export --remove --jobname <jobName>
Scope
Use the following information when performing a search to specify nodes to be included in the export file. One or many scopes can be defined. The maximum number of individually specified items supported in the scope is 3000. Multiple scopes should be separated with a semi-colon, for example -n SubNetwork=SubNwk1;MeContext=ERBS03;ERBS0*. Note: only network resource model FDNs are supported in scope searches.

-n <SubNetwork FDN> or --ne <SubNetwork FDN>
All nodes within the specified SubNetwork are included.

-n <Search node by FDN> or --ne <Search node by FDN>
The node that the specified FDN belongs to is included.

-n <Node Name> or --ne <Node Name>
The node with the specified name is included.

-n <Partial Node Name>* or --ne <Partial Node Name>*
All node names starting with the specified partial node name are included, for example -n ERBS0*.

-n *<Partial Node Name> or --ne *<Partial Node Name>
All node names ending with the specified partial node name are included, for example -n *001.

-n *<Partial Node Name>* or --ne *<Partial Node Name>*
All node names containing the specified partial node name are included, for example -n *RBS0*.

-n * or --ne *
All nodes in the network are included.

-co <Collection Name> or --collection <Collection Name>
Can be used to specify a Collection indicating nodes to export. For each FDN in the collection, the node that the FDN belongs to is included.
Partial Collection names are not supported.
One or many Collections can be defined as scope. Multiple Collection names should be separated with a semi-colon, for example -co collection01;collection02.
Collection name containing space must be wrapped in quotes, for example -co "collection 10". All spaces at the beginning or at the end of the name will be trimmed.
For more information on Collections, see Manage Collections in Network Explorer Online Help.

-sa <Saved Search Name> or --savedsearch <Saved Search Name>
Can be used to specify a Saved Search indicating nodes to export. For each FDN in the search result, the node that the FDN belongs to is included.
Partial Saved Search names are not supported.
One or many Saved Searches can be defined as scope. Multiple Saved Search names should be separated with a semi-colon, for example -sa savedsearch01;savedsearch02.
For more information on Saved Searches, see Manage Saved Searches in Network Explorer Online Help.

Filters
Filtering allows you to limit the output of the export command. The filtering formats currently supported for cmedit export are predefined filtering and user-defined filtering. If predefined filtering or user-defined filtering is not specified, all MO classes and persistent attributes of the nodes given in the scope are exported.

-fn or --filtername
The predefined filter is specified by providing a predefined filter name. The cmedit export command has the option [-lf | --listfilters] to list the predefined filters available for use.

-f file:<userDefinedFilterFileName>
The user-defined filter is specified by providing a text file which is uploaded to the ENM CLI and referenced in the export command. The user filters the output of the export command by specifying in the filter file the MO Class names and attribute names to include or exclude. A user-defined filter and a predefined filter cannot be specified together. For user-defined filter file name format and filter file content format refer to User-Defined Filter File.

No data is exported for a node (specified in the scope) that does not contain any instances of the MO classes specified in the filter. In the verbose response for the export job status the node has "Export status" NOT_EXPORTED with the "Export status message": "<FDN> not exported because there are no MOs to export." where <FDN> is the FDN of the node.

No export file is produced if none of the nodes contain any instances of the MO classes specified in the filter. The export job will have status: "FAILED Failed due to no nodes to export".

Options
Use the options to further restrict the output specification.

-ft or --filetype
The format of the file generated by the export command. The following file formats are supported:

3GPP - The Bulk Configuration 3GPP allows you to configure supported network elements. The service is described in the following document: Configuration Management, Bulk Configuration Management IRP, XML File Format Definition, (Rel.4) 3GPP TS 32.615 V4.5.0.
dynamic - Ericsson dynamic file format is an Ericsson proprietary format. Ericsson dynamic file format is available with the Dynamic CM Value Package license. Ericsson dynamic file format provides the user with the exported data as a txt file which is easy to read and which can be manipulated to produce an import file. The downloaded export file contains data in the same format as that obtained from cmedit get. This can be edited within a text editor. By default, the dynamic format export includes ENM Network Element Topology data and Network Resource Data, however it is possible to export just the ENM Network Element Topology data by using predefined filter "Dynamic_Topology". Note that password data is excluded from the export
-dc or --datacategories
The list of export data categories which determine the data models that will be exported. The allowed values of the list elements are:

NETWORK_RESOURCE_DATA - Export file will include SubNetwork, MeContext, ManagedElement, and their sub-tree data.
ENM_DATA - Export file will include NetworkElement and its sub-tree data.
To export all models shown above, the following is also allowed as an argument:

ALL - Export file will include all models shown above in the same order. Note that the value ALL must be alone, it cannot be specified in a list of data categories.
The order of elements in the list determines the order of the corresponding data in the export file. However, duplicate elements are ignored. If exporting data for multiple nodes, the output is grouped by data categories rather than by node.

-st or --status
Get the status of export jobs. This option is only compatible with the --job and --jobname options. If --job or --jobname is provided, then the status of that specified job is returned, otherwise the status for all jobs is returned in the order of newest jobs last.

-s or --source
The command to start an export has an optional parameter to specify the name of an existing configuration (to create the configuration please refer to the config create command). This applies the command to the specified configuration. If this optional parameter is not included, then the command will be applied to the live configuration by default.

-j or --job
The job ID of a specific job. Only compatible with the --status, --download and --remove commands.

-jn or --jobname
When starting an export job, if you do not specify a job name, the system will generate one in the format "export_<filetype>_<timestamp>_<unique_id>". The specified job name cannot already exist. It must start with a letter, numeral or underscore. It can contain any other combination of letters, numerals, underscores, or hyphens. Example: "[a-zA-Z0-9_]([a-zA-Z0-9_] | '-')*".

-dl or --download
Download the generated file for a specified export job. It is mandatory to specify a job using either --job or --jobname option.

-lf or --listfilters
List the predefined export filters.

-rm or --remove
Remove a specified export job. This option is only compatible with the --job and --jobname options. When an export job is removed, both the generated export file and all job data are removed from the system.

-fc or --filecompression
The command to start an export has an optional parameter to specify the file compression type to be used to generate the export file. The compression types supported are 'zip' and 'none'. If this optional parameter is not included the command will use zip compression by default.

-et or --enumtranslate
The command to start an export has an optional parameter to specify how enum attribute values are translated in the export file. The parameter has two options, 'true' and 'false'. If the parameter is set to 'true', enum attribute values are translated as string literals for the export job. If the parameter is set to 'false', enum attribute values are translated as integers for the export job. If the parameter is not included, the default behavior configured by the system administrator is used.

-ss or --syncstate
The command to start an export has an optional parameter to specify CM synchronization state for nodes to be included in the export file. The parameter has two options, 'sync' and 'all'. If the parameter is set to 'sync', only synchronized nodes will be exported. Non-synchronized nodes will be added to the 'Nodes not exported' count in the export status response. The verbose export status response will show the non-synchronized nodes as not exported with the reason given. If the parameter is set to 'all', nodes with any synchronization state will be included in the export file. If the parameter is not included, the default behavior configured by the system administrator is used.

-pf or --prettyformat
The command to start an export has an optional parameter to enable or disable pretty formatting of the export file. Pretty formatting generates export files with line feeds, and indentations (white spaces). This parameter applies only to 3GPP export files. For dynamic export files, this parameter does not apply and will be ignored. The parameter has two options, 'true' and 'false'. If the parameter is set to 'true', the export file will be formatted. If the parameter is set to 'false', the export file will not be formatted. If the parameter is not included, the default behavior configured by the system administrator is used.

-v or --verbose
When you get the status of a specific job you may get additional information about that job using verbose. Lists each of the operations which were attempted on the specified export job. If this option is specified for a job which is still running, no extra detail is included in the output.
Only compatible with use of --status --job <jobID> or --status --jobname <jobName>.

Description
Configuration Management (CM) Editor export, or cmedit export command, can be used to initiate an export of node data from the network through the ENM Command Line Interface (CLI).

The export command is asynchronous. This means that when the export job starts, the system responds with the job name and job ID. Either the job name or ID can be used for future interaction with the job (such as querying the status of the job or removing the job).
The command supports the starting of an export job, querying the status of an export job, downloading the export file for a completed job, listing the available filters and removing completed jobs.
Supported filetype(s): "3GPP" and "dynamic".
Command Consequences

With --ne, --collection or --savedsearch an export job is started, and a job ID is displayed in the CLI
With --status a summary of the export job is displayed in the CLI
With --download an export file is downloaded to the client browser
With --listfilters a list of export filters is displayed in the CLI
With --remove an export job and its export file are removed from the system
Examples
 Start an export job for a specific node in the 3GPP format

cmedit export --ne ERBS001 --filetype 3GPP
Response

Export job <jobName> started with job ID <jobID>


 Start an export job for a specific collection in the dynamic format

cmedit export --collection mycollection --filetype dynamic
Response

Export job <jobName> started with job ID <jobID>


 Start an export job for a specific savedsearch in the dynamic format

cmedit export --savedsearch mysavedsearch --filetype dynamic
Response

Export job <jobName> started with job ID <jobID>


 Start an export job for a specific node in a non-live configuration

cmedit export --ne ERBS001 --filetype 3GPP --source MyConfig
Response

Export job <jobName> started with job ID <jobID>


 Start an export job using a predefined filter

cmedit export --ne ERBS001 --filetype 3GPP --filtername InventoryData
Response

Export job <jobName> started with job ID <jobID>


 Start an export job using a user-defined filter

cmedit export --ne ERBS001 --filetype 3GPP -f file:UserDefinedFilter.txt
Response

Export job <jobName> started with job ID <jobID>


 Start an export job with a given job name

cmedit export --ne ERBS001 --filetype 3GPP --jobname ExportJobName
Response

Export job <jobName> started with job ID <jobID>


 Start an export job with no file compression

cmedit export --ne ERBS001 --filetype 3GPP --filecompression none
Response

Export job <jobName> started with job ID <jobID>


 Start an export job with enum attribute values translated as integers

cmedit export --ne ERBS001 --filetype 3GPP --enumtranslate false
Response

Export job <jobName> started with job ID <jobID>


 Start an export job which exports only synchronized nodes

cmedit export --ne ERBS001 --filetype 3GPP --syncstate sync
Response

Export job <jobName> started with job ID <jobID>


 Start an export job which exports only data from the Network Element model

cmedit export --ne ERBS001 --filetype 3GPP --datacategories ENM_DATA
Response

Export job <jobName> started with job ID <jobID>


 Start an export job which exports data from both models in a specified order.

cmedit export --ne ERBS001 --filetype dynamic --datacategories ENM_DATA;NETWORK_RESOURCE_DATA
Response

Export job <jobName> started with job ID <jobID>

 Start an export job with pretty formatting enabled.

cmedit export --ne ERBS001 --filetype 3GPP --prettyformat true
Response

Export job <jobName> started with job ID <jobID>


 Get the status of a specific export job with a job ID

cmedit export --status --job 3
Response

The command returns the status of the export job with ID 3


 Get the status of a specific export job with a job name

cmedit export --status --jobname ExportJobName
Response

The command returns the status of the export job with name ExportJobName


 Get the status of all stored export jobs

cmedit export --status
Response

The command returns a list of statuses for all export jobs


 Download a specific export job export file

cmedit export --download --job 3
Response

The export file for export job 3 is downloaded to the client browser.


 Show a list of the predefined filters which can be used with an export command

cmedit export --listfilters
Response

The command returns a list of export filters.

Filter name	Filter description
3GPP_Topology	This is the predefined export filter model for Network Resource Topology data.
Dynamic_Topology	This filter exports ENM Network Element Topology data.
ERBS	This is the predefined export filter model for ERBS nodes.
InventoryData	This is the predefined export filter model for CPP based nodes Inventory Data.
LTE_MPC_OTDOA	This is the predefined export filter model for filtering MOs for LTE MPC OTDOA.
SON	This is the predefined export filter model for ERBS nodes SON Data.
SON_EDNET	This is the predefined export filter model for ERBS nodes SON EDNET Data.
Subnetwork	This is the predefined export filter model for filtering MOs under Subnetwork for ERBS nodes.
 Remove a specific export job

cmedit export --remove --job 3
Response

Export job was successfully removed.@@@@@manual alarm get@@@@
< Back To Alarm

Syntax
 Syntax to get open alarms in the network

alarm get scope [quick_filter] [filter] [options]
Scope
Use the scope to specify node names or collections or both to search on.

<nodeName> is a list separated by ";" of:

NetworkElement id (it allows the use of the wildcard "*" for matching characters)
Management system id (it allows the use of the wildcard "*" for matching characters)
FDN of NetworkElement
FDN of ManagementSytem
FDN of VirtualNetworkFunctionManager
FDN of MeContext (if it has been created)
FDN of ManagedElement (if the node has been synchronized and the MeContext is not present)
<collectionName> is the name of a collection of managed objects. The supported managed objects are: NetworkElement, ManagementSytem and VirtualNetworkFunctionManager. One or more collections can be defined as scope. Multiple collection names must be separated with a semi-colon, for example: Collection01;Collection02

Partial collection names are not supported.
Saved searches are not supported.
Names with special characters listed in following table must be used quoted (e.g. "Special@Name_12")

Character	Description
.	full stop
?	question mark
!	exclamation mark
@	at sign
%	percent sign
&	ampersand
^	circumflex accent
_	low line
/	slash
|	vertical bar
-	hyphen-minus
=	equal
$	dollar
space
Quotes are not required with supported characters.

Quick Filter
Use the quick filter to limit the output ofalarm getcommand by specifying either the severity, state or both. If not specified, all instances are involved.

-ack, --ack
Filter acknowledged alarms.

-cle, --cleared
Filter alarms that are cleared.

-closed, --closed
Filter closed alarms.

-cri, --critical
Filter alarms with severity critical.

-ind, --indeterminate
Filter alarms with severity indeterminate.

-maj, --major
Filter alarms with severity major.

-min, --minor
Filter alarms with severity minor.

-unack, --unack
Filter unacknowledged alarms.

-und, --undefined
Filter alarms with severity undefined.

-war, --warning
Filter alarms with severity warning.

Filter
Use the filter to limit the output of the get command by specifying an alarm attribute.

-<attributeShortName>, --<attributeName>
Specify a list of values to be used for filtering the alarms for a specific attribute. The <attributeShortName> is either a two-letter or three-letter abbreviation. The filter criteria for text attributes is always "contains". The available values are:

-addi, --additionalInformation
-aid, --alarmId
-alobj, --alarmingObject
-als, --alarmState
-an, --alarmNumber
-ao, --ackOperator
-boi, --backupObjectInstance
-bs, --backupStatus
-co, --ceaseOperator
-cop, --commentOperator
-ctx, --commentText
-cv, --correlatedVisibility
-evt, --eventType
-fmxg, --fmxGenerated
-lao, --lastAlarmOperation
-mc, --manualCease
-oc, --oscillationCount
-oor, --objectOfReference
-pc, --probableCause
-pd, --problemDetail
-pra, --proposedRepairAction
-press, --presentSeverity
-prevs, --previousSeverity
-ptx, --problemText
-pty, --processingType
-rpc, --repeatCount
-rt, --recordType
-sp, --specificProblem
-ss, --syncState
-ti, --trendIndication
-tz, --timeZone
-vis, --visibility
-id
Specify the alarmId to filter alarms. Note that alarmId is not unique in the ENM scope. To get a single alarm, filter also by objectOfReference.

-ta, --timeAttribute
Specify the attribute to be used by--beginand--endoptions. The available values are:

eventTime
insertTime
lastUpdated
ackTime
commentTime
ceaseTime
-b, --beginSpecify a starting date or time for filtering the alarms. The default attribute is the eventTime The format is YYYY-MM-DDThh:mm:ss. The time part is an optional attribute (00:00:00 is assumed).

-e, --end
Specify an end date or time for filtering the alarms. The default attribute is the eventTime. The format is YYYY-MM-DDThh:mm:ss. The time part is an optional attribute (23:59:59 is assumed).

Options
Use the options to further restrict the output specification.

--count, -ct
Show only the number of matching alarms.

--export, -xp
Export to a CSV file the matching alarms.

--list, -l
Specify the format of the output as a list. The default is a table.

--verbose, -v
Show all the attributes:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
alarmingObject
alarmNumber
backupObjectInstance
backupStatus
trendIndication
previousSeverity
proposedRepairAction
ceaseTime
ceaseOperator
ackTime
ackOperator
problemDetail
additionalInformation
commentText
insertTime
eventPoId
processingType
fmxGenerated
visibility
lastUpdated
commentTime
repeatCount
Description
alarm get is used to query alarms for the network nodes.

The output is ordered by severity from critical to cleared.

The output is ordered by event time from the more recent to the less recent.

Command Consequences

No consequences with the alarm get command.
Examples
 Get all the alarms in the network

alarm get *
Response

This command displays the following information for all the alarms in the network. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :78

 Get all the alarms for a node

alarm get ERBS001
Response

This command displays the following information for all the alarms of the specified node. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :5

 Get all the internal alarms and alarms for a node

alarm get ENM;ERBS001
Response

This command displays the following information for the alarms. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :10

 Get all the alarms for a collection

alarm get MyCollection
Response

This command displays the following information for the alarms of the nodes in MyCollection. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :17

 Get all the alarms for a VirtualNetworkFunctionManager

alarm get VirtualNetworkFunctionManager=ECM_01
Response

This command displays the following information for the alarms of the specified VNF Manager. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :1

 Get the alarms with specific severities for the nodes that match a string starting with a specific name

alarm get ERBS* -cri -war
or
alarm get ERBS* --critical --warning
Response

This command displays the following information for the alarms specified by filter options. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :3

 Export the alarms with specific severities for the nodes that match a string starting with a specific name

alarm get ERBS* -cri -war --xp
or
alarm get ERBS* --critical --warning --export
Response

Number of alarms found is : 3 Download started for file : /ericsson/tor/no_rollback/fmexport/data/administrator_AlarmCli_1494598540407.csv

 Get the alarms with all the attributes and specific severities for the nodes that match a string starting with a specific name

alarm get ERBS00* --critical --minor --verbose
Response

This command displays the following information for the alarms specified by filter options. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
alarmingObject
alarmNumber
backupObjectInstance
backupStatus
trendIndication
previousSeverity
proposedRepairAction
ceaseTime
ceaseOperator
ackTime
ackOperator
problemDetail
additionalInformation
commentText
insertTime
eventPoId
processingType
fmxGenerated
visibility
lastUpdated
commentTime
repeatCount
Total number of alarms fetched for the given query is :8

 Get the alarms with specific severities starting a specific date and time for the nodes that match a string starting with a specific name

alarm get ERBS001* --critical --minor --verbose --begin 2016-08-23T10:04:28
or

alarm get ERBS001* -cri -min -v -b 2016-08-23T10:04:28
Response

This command displays the following information for the alarms specified by filter options. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
alarmingObject
alarmNumber
backupObjectInstance
backupStatus
trendIndication
previousSeverity
proposedRepairAction
ceaseTime
ceaseOperator
ackTime
ackOperator
problemDetail
additionalInformation
commentText
insertTime
eventPoId
processingType
fmxGenerated
visibility
lastUpdated
commentTime
repeatCount
Total number of alarms fetched for the given query is :8

 Get all the alarms acknowledged until a specific date and time for the nodes that match a string starting with a specific name

alarm get ERBS001* --timeattribute ackTime --end 2016-08-23T10:04:28
or

alarm get ERBS001* -ta ackTime -e 2016-08-23T10:04:28
Response

This command displays the following information for the alarms specified by filter options. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :2

 Get all the alarms for the network raised in a specific date and time interval

alarm get * --begin 2016-06-20 --end 2016-06-21
Response

This command displays the following information for the alarms specified by filter options. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :1

 Get all the alarms in the network with a specif attribute name

alarm get * --specificProblem "Database Space Warning Level"
or

alarm get * -sp "Database Space Warning Level"
Response

This command displays the following information for the alarms specified by filter options. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :1

 get the default attributes for the alarm with a specific Id

alarm get * -id 403969345
Response

This command displays the following information for the alarm with the specified id. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :1

 get and display as a list all the alarms for the nodes that match a string starting with a specific name

alarm get ERBS001* --list
or

alarm get ieatnetsimv5036-01_LTE01ERBS001* -l
Response

This command displays the following information for all the alarms of nodes matching the specified string in their name. The output is formatted as a list:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :8

 Get a single alarm in the network

alarm get * --objectOfReference ManagedElement=LTE04dg2ERBS00001 -id 53400
or

alarm get * -oor ManagedElement=LTE04dg2ERBS00001 -id 53400;
Response

This command displays the following information for the alarms matching the search criteria. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :1

 Get alarms using MeContext value to search nodes

alarm get SubNetwork=NET1,MeContext=NODE1;SubNetwork=NET1,MeContext=NODE2 --critical
Response

This command displays the following information for the alarms of the searched nodes. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :13

 Get alarms using ManagedElement value to search nodes

alarm get ManagedElement=NODE1 --warning
Response

This command displays the following information for the alarms of the searched nodes. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :11

 Get alarms using MeContext and ManagedElement values to search nodes

alarm get SubNetwork=NET1,MeContext=NODE1,ManagedElement=NODE1
Response

This command displays the following information for the alarms of the searched nodes. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :11@@@@@manual alarm hist@@@@
< Back To Alarm

Syntax
 Syntax to get history alarms in the network

alarm hist scope [quick_filter] [filter] [options]
Scope
Use the scope to specify node names or collections or both to search on.

<nodeName>
is a list separated by ";" of:

NetworkElement id (it allows the use of the wildcard "*" for matching characters)
Management system id (it allows the use of the wildcard "*" for matching characters)
FDN of NetworkElement
FDN of ManagementSytem
FDN of VirtualNetworkFunctionManager
FDN of MeContext (if it has been created)
FDN of ManagedElement (if the node has been synchronized and the MeContext is not present)
<collectionName>
is the name of a collection of Managed Objects.
The supported managed objects are: NetworkElement, ManagementSytem and VirtualNetworkFunctionManager.
One or more collections can be defined as scope. Multiple collection names must be separated with a semi-colon, for example: Collection01;Collection02

Partial collection names are not supported.
Saved searches are not supported.
Names with special characters listed in following table must be used quoted (e.g. "Special@Name_12")

Character	Description
.	full stop
?	question mark
!	exclamation mark
@	at sign
%	percent sign
&	ampersand
^	circumflex accent
_	low line
/	slash
|	vertical bar
-	hyphen-minus
=	equal
$	dollar
space
Quotes are not required with supported characters.

Quick Filter
Use the quick filter to limit the output of alarm hist command by specifying either the severity, state or both. If not specified, all instances are involved.

-ack, --ack
Filter acknowledged alarms.

-cle, --cleared
Filter alarms that are cleared.

-closed, --closed
Filter closed alarms.

-cri, --critical
Filter alarms with severity critical.

-ind, --indeterminate
Filter alarms with severity indeterminate.

-maj, --major
Filter alarms with severity major.

-min, --minor
Filter alarms with severity minor.

-unack, --unack
Filter unacknowledged alarms.

-und, --undefined
Filter alarms with severity undefined.

-war, --warning
Filter alarms with severity warning.

Filter
Use the filter to limit the output of the history command by specifying an alarm attribute.

-<attributeShortName>, --<attributeName> 
Specify a list of values to be used for filtering the alarms for a specific attribute. The <attributeShortName> is either a two-letter or three-letter abbreviation. The filter criteria for text attributes is always "contains". The available values are:

-addi, --additionalInformation
-aid, --alarmId
-alobj, --alarmingObject
-als, --alarmState
-an, --alarmNumber
-ao, --ackOperator
-boi, --backupObjectInstance
-bs, --backupStatus
-co, --ceaseOperator
-cop, --commentOperator
-ctx, --commentText
-cv, --correlatedVisibility
-evt, --eventType
-fmxg, --fmxGenerated
-lao, --lastAlarmOperation
-mc, --manualCease
-oc, --oscillationCount
-oor, --objectOfReference
-pc, --probableCause
-pd, --problemDetail
-pra, --proposedRepairAction
-press, --presentSeverity
-prevs, --previousSeverity
-ptx, --problemText
-pty, --processingType
-rpc, --repeatCount
-rt, --recordType
-sp, --specificProblem
-ss, --syncState
-ti, --trendIndication
-tz, --timeZone
-vis, --visibility
-id
Specify the alarmId attribute for filtering alarms.

-ta, --timeAttribute
Specify the attribute to be used by --begin and --end options. The available values are:

eventTime
insertTime
lastUpdated
ackTime
commentTime
ceaseTime
-b, --begin
Specify a starting date or time for filtering the alarms. The default attribute is the eventTime The format is YYYY-MM-DDThh:mm:ss. The time part is an optional attribute (00:00:00 is assumed).

-e, --end
Specify an end date or time for filtering the alarms. The default attribute is the eventTime. The format is YYYY-MM-DDThh:mm:ss. The time part is an optional attribute (23:59:59 is assumed).

Options
Use the options to further restrict the output specification.

--list, -l
Specify the format of the output as a list. The default is a table.

--verbose, -v
Show all the attributes:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
alarmingObject
alarmNumber
backupObjectInstance
backupStatus
trendIndication
previousSeverity
proposedRepairAction
ceaseTime
ceaseOperator
ackTime
ackOperator
problemDetail
additionalInformation
commentText
insertTime
eventPoId
processingType
fmxGenerated
visibility
lastUpdated
commentTime
repeatCount
Description
alarm hist is used to query history alarms for the network nodes.

Command Consequences

No consequences with the alarm history command.
Examples
 Get history for all alarms in the network

alarm hist *
Response

This command displays the following information for history alarms of the network. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :578

 Get history for all alarms for a node

alarm hist ERBS001
Response

This command displays the following information for history alarms of the specified node. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :54

 Get history for all the internal alarms and alarms for a node

alarm hist ENM;ERBS001
Response

This command displays the following information for the alarms matching the search criteria. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :78

 Get history for a VirtualNetworkFunctionManager

alarm hist VirtualNetworkFunctionManager=ECM_01
Response

This command displays the following information for the alarms of the specified VNF Manager. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :7

 Get history for a collection

alarm hist MyCollection
Response

This command displays the following information for history alarms of nodes specified in MyCollection. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :12

 Get history for the alarms with specific severities for the nodes that match a string starting with a specific name

alarm hist ERBS* -cri -war
or
alarm hist ERBS* --critical --warning
Response

This command displays the following information for history alarms matching the search criteria. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :5

 Get history for the alarms with specific severities starting a specific date and time for the nodes that match a string starting with a specific name

alarm hist ERBS001* --critical --begin 2016-06-20 --end 2016-06-21
Response

This command displays the following information for history alarms matching the search criteria. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :2

 Get history data for the alarms in the network with a specif attributeNumber

alarm hist * -id 118234777
Response

This command displays the following information for history alarms with specified id. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :1

 Get history data for the alarms in the network with a specif recordType

alarm hist * --recordType "SYNCHRONIZATION_ALARM"
Response

This command displays the following information for history alarms matching the search criteria. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :2

 Get history data for the alarms using MeContext value to search nodes

alarm hist SubNetwork=NET1,MeContext=NODE1;SubNetwork=NET1,MeContext=NODE2
Response

This command displays the following information for history alarms of specified nodes. The output is formatted as a table:

presentSeverity
NodeName
specificProblem
eventTime
objectOfReference
problemText
alarmState
alarmId
probableCause
eventType
recordType
Total number of alarms fetched for the given query is :29@@@@@manual alarm status@@@@
< Back To Alarm

Syntax
 Syntax to get alarm supervision status for the nodes in the network

alarm status scope [quick_filter] [attributes] [options]
Scope
Use the scope to specify node names or collections or both to search on.

<nodeName>
is a list separated by ";" of:

NetworkElement id (it allows the use of the wildcard "*" for matching characters)
Management system id (it allows the use of the wildcard "*" for matching characters)
FDN of NetworkElement
FDN of ManagementSytem
FDN of VirtualNetworkFunctionManager
FDN of MeContext (if it has been created)
FDN of ManagedElement (if the node has been synchronized and the MeContext is not present)
<collectionName>
is the name of a collection of Managed Objects.
The supported managed objects are: NetworkElement, ManagementSytem and VirtualNetworkFunctionManager.
One or more collections can be defined as scope. Multiple collection names must be separated with a semi-colon, for example: Collection01;Collection02

Partial collection names are not supported.
Saved searches are not supported.
Names with special characters listed in following table must be used quoted (e.g. "Special@Name_12")

Character	Description
.	full stop
?	question mark
!	exclamation mark
@	at sign
%	percent sign
&	ampersand
^	circumflex accent
_	low line
/	slash
|	vertical bar
-	hyphen-minus
=	equal
$	dollar
space
Quotes are not required with supported characters.

Quick Filter
Use the quick filter to limit the output of alarm status command by specifying either the severity, state or both. If not specified, all instances are involved.

-dis, --disabled
Filter nodes with supervision disabled.

-en, --enabled
Filter nodes with supervision enabled.

-fail, --failed
Filter nodes with heartbeat failure.

-ok, --inservice
Filter nodes with supervision working.

--ongoing
Filter nodes with sync on going.

--suppressed
Filter nodes with alarm suppressed.

--suspended
Filter nodes with Node suspended to true.

--technician
Filter nodes with technician present.

Attributes
<attribute name>=<value>

Attribute values are specified by giving the name followed by "=" and then the value. The supported attributes are:
automaticSynchronization: the value admitted are true or false.
heartbeatTimeout: number: the value admitted is a positive integer.
heartbeatinterval: number: the value admitted is a positive integer.
Options
Use the options to further restrict the output specification.

--list, -l
Specify the format of the output as a list (the default is a table) with the following fields.

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Description
alarm status is used to get alarm supervision status for the network nodes.

Command Consequences

The alarm supervision status is shown in table or list format depending to the user selection.
Examples
 Get all the alarm supervision status for all the nodes in the network

alarm status *
Response

This command displays the following information. The output is formatted as a table:

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Total number of node status data fetched for the given query is :131


 Get the alarms supervision status with specific state for multiple nodes

alarm status ERBS001;ERBS003;ERBS005 --enabled
Response

This command displays the following information. The output is formatted as a table:

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Total number of node status data fetched for the given query is :70


 Get the alarms supervision status with specific state for all the nodes in the network

alarm status * --inservice
Response

This command displays the following information. The output is formatted as a table:

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Total number of node status data fetched for the given query is :31


 Get the alarms supervision status with specific state for the nodes that match a string starting with a specific name

alarm status ERBS* --failed
Response

This command displays the following information. The output is formatted as a table:

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Total number of node status data fetched for the given query is :3


 Get the alarms supervision status with specific state for a collection

alarm status MyCollection -en --technician
Response

This command displays the following information. The output is formatted as a table:

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Total number of node status data fetched for the given query is :2


 Get and display as a list the alarms supervision status for the nodes that match a string starting with a specific name

alarm status LTE* --list
Response

This command displays the following information. The output is formatted as a list.

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Total number of node status data fetched for the given query is :3


 Get the alarms supervision status for nodes with specific MeContext values

alarm status SubNetwork=NET1,MeContext=NODE1;SubNetwork=NET1,MeContext=NODE2
Response

This command displays the following information. The output is formatted as a table:

NodeName
Type
Supervision Status
Subscription Status
Heartbeat Failure
Out Of Synchronization
Node Suspended
Alarm Suppressed
Synchronization Ongoing
Technician Present
Total number of node status data fetched for the given query is :3
@@@@@manual ap bind@@@@
Syntax
 Syntax to bind an individual node

ap bind -n <nodeName> -s <hardwareSerialNumber>
 Syntax to bind multiple nodes

ap bind file:<fileName.csv>
Description
The ap bind command is used to bind a logical node in ENM to a hardware serial number. This command ensures all resources (node artifacts and MOs) in ENM are allocated to the dedicated node with that hardware serial number. It can be requested for an individual node or multiple nodes.

When binding a batch of nodes, the binding is best effort. For example, when binding a batch of 100 nodes, if some of the hardware serial numbers are invalid, they will fail to bind. The remaining nodes will bind successfully. The bind command can be re-executed to over-write the bound hardware serial number of a node with a different hardware serial number. The command syntax and input parameters for rebind are the same as those for the ap bind command.

The following options are available:
Bind can be requested for an individual node using the ap bind command with the -n parameter and hardware serial number using the -s parameter.
Bind can be requested for multiple nodes using the ap bind command with the batch file parameter (file:). The following tutorial is available: How to Bulk Bind for Zero Touch Integration
The Ericsson Hardware Serial Number frame consists of 13 alphanumeric characters. Character set is the letters A-Z with the exception of O and I, and digits 0-9. Space for 13 characters shall always be available.

The following is the format with factory code of 3 characters, which is to be used.
AAABBBCCCCCCC
A = 3 characters reserved for future use (optional)
B = 3 characters for factory code
C = 7 characters for sequence number
Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Autoprovisioning_Limited_Remote_Access_Operator
Custom role with the capability: Resource: ap, Operation: patch
The hardware serial number is not already in use by another AP node.
Mobile & desktop browser support

ap bind can be executed either on a desktop, laptop or on a mobile device.
The ap bind for batch is not supported for mobile browser.

Commands from a mobile browser

Examples
 Bind a node to a hardware serial number

ap bind -n Enb612 -s SCB12345678
Response

Successful

@@@@@manual ap cancel@@@@
Syntax
 Syntax to cancel a node integration

ap cancel -n <nodeName>
Description
The ap cancel command is used to cancel the integration for a node. It can be used if the node integration has failed, and the node is waiting for cancel or resume (This can be seen using the ap status command.)

The ap cancel command is only supported for Baseband Radio Nodes, WCDMA Pico Radio Nodes and VNF Nodes.

Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Custom role with the capability: Resource: ap, Operation: execute
Node integration has failed and node is waiting for cancel or resume.
Mobile & desktop browser support

ap cancel can be executed either on a desktop, laptop or on a mobile device.
Commands from a mobile browser

Examples
 Cancel a node integration

ap cancel -n Enb612
Response

Initiated. Run command 'ap status -n Enb612' for details

@@@@@manual ap delete@@@@
Syntax
 Syntax to delete a Project

ap delete [-i] -p <projectName>
 Syntax to delete a Node

ap delete [-i] -n <nodeName>
Description
The ap delete command is used to delete a project or node from AP and ENM. It deletes all integration data generated during the order process (including the NetworkElement MO).

The following options are available:

Delete can be requested for a project using the ap delete command with the -p parameter.
Delete can be requested for a node using the ap delete command with the -n parameter.
Use the -i parameter to prevent the NetworkElement MO from being deleted. For VNF nodes, the -i parameter also prevents the VNF from being deleted from the Cloud Infrastructure Domain.
A Hardware Replace project with more than one node cannot be deleted.

Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Custom role with the capability: Resource: ap, Operation: execute
The node or project must exist in ENM.
The NetworkElement is not deleted if node integration is in one of the following node states:
Integration Completed
Integration Completed with Warning
Integration Cancelled
Hardware Replace Started
Hardware Replace Completed
Hardware Replace Failed
Hardware Replace with Rollback Failed
Mobile & desktop browser support

ap delete can be executed either on a desktop, laptop or on a mobile device.
Commands from a mobile browser

Examples
 Delete Project

ap delete -p NorthWest
Response

Successful


 Delete Node

ap delete -n Enb612
Response

Successful

@@@@@manual ap download@@@@
Syntax
 Syntax to download sample artifacts for all node types

ap download -x
 Syntax to download sample artifacts for a specific node type

ap download -x <nodeType>
 Syntax to download all imported node artifacts

ap download -i -n <nodeName>
 Syntax to download an ordered node artifact

ap download -o -n <nodeName>
 Syntax to generate and download a ciq file in csv format once a projectInfo.xml file is supplied

ap download -ciq file:<fileName>
Description
The ap download command is used to download node-related samples, schema artifacts, imported artifacts, or artifacts generated during the ordering of a node.

The following options are available:
Download can be requested for all sample artifacts (schemas and project files) for a specified node type using the ap download command with the -x parameter. This parameter is used to reference sample artifacts to create a project file. Optionally, no node type can be specified after the -x parameter to download sample artifacts for all node types. All artifacts are downloaded to your local machine in zip file format.
Download can be requested for all initial artifacts for the node using the ap download command with the -i parameter. This parameter is used when you want to download the imported artifacts for verification or reuse. All artifacts are downloaded to your local machine in zip file format.
Download can be requested for an ordered artifact for the node using the ap download command with the -o parameter. This parameter is used when you want to download any artifacts generated as part of the order (for example, the site Installation file for a LTE DU Radio Node).
Download can be requested to generate and download a ciq file from a Project Information xml file using the ap download command with the -ciq parameter and file:<projectInfo.xml> xml file. This format is used when you want to download a generated ciq file in csv format. The ciq file is generated based on referenced templates in the Project Information file and should contain all the header values of values that need to be substituted in comma delimited format from those referenced templates in Configuration Templates application.
It is not permitted to download artifacts for nodes that have been successfully integrated. The artifacts are automatically removed for the node(s) once it is successfully integrated.

Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Custom role with the capability: Resource: ap, Operation: execute
To use the ap download command with the -i parameters, the project must be ordered using the ap order command.
To use the ap download command with the -o parameter, the project must be ordered using the ap order command.
Mobile & desktop browser support

ap download can be executed either on a desktop, laptop or on a mobile device.
Commands from a mobile browser

Examples
 Download an ordered artifact for a node (for example site installation file for a LTE DU Radio Node)

ap download -o -n Enb612
Response

Successful

 Download sample artifacts for a LTE DU Radio Node (ERBS)

ap download -x ERBS
Response

Successful

 Download sample artifacts for a Baseband Radio Node

ap download -x RadioNode
Response

Successful

@@@@@manual ap order@@@@
Syntax
 Syntax to order a project file for integration / reconfiguration

ap order file:<fileName>
 Syntax to order a project file for integration / reconfiguration with no validation

ap order -nv file:<fileName>
 Syntax to order an existing project for integration / reconfiguration

ap order -p <projectName>
 Syntax to order an existing node for integration / reconfiguration

ap order -n <nodeName>
Description
The ap order command is used to order integration / reconfiguration for a project file, or a node.

For Integration, the Order command:
Validates the project or node data and imports it into ENM.
Configures the connectivity information.
Configures security.
Copies the node artifacts to a shared location (SMRS for physical nodes, Cloud Infrastructure Domain for VNF nodes).
Binds the node to the hardware serial number, if it is included in the nodeInfo.xml.
Automatically creates and downloads a CSV file for batch projects. See Prepare a Batch Integration Project for Auto Provisioning.
For Reconfiguration, the Order command:
Validates the project and node data provided in the .zip project.
Imports LKF into SHM if it is included in the nodeInfo.xml.
Installs LKF on the node if it is specified in the nodeInfo.xml.
Imports node configurations to the node.
In a project with multiple nodes, if some nodes are incorrectly configured, they will not be ordered. The remaining nodes will be ordered successfully. If this occurs, use the ap order command with the -n or -p parameter to re-order the nodes.

If the ap order command is used with the -nv parameter then no validation of the project file is performed. Using the -nv command will also prevent validation of NETCONF files for Radio Nodes via an external Node Plugin. If there are any issues with the integrity of the project, or it has invalid data, it could cause unexpected or unhandled failures for the project integration / reconfiguration. More information on the order process

Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Custom role with the capability: Resource: ap, Operation: execute
Examples
 Order a project file for integration / reconfiguration

ap order file:NorthWest.zip
Response

Initiated. Run the command 'ap status -p NorthWest' for progress

@@@@@manual ap replace@@@@
Syntax
 Syntax to automatically configure a node for hardware replace

ap replace -n <nodeName> -s <hardwareSerialNumber>
Description
The ap replace command is used to automatically configure a node for hardware replace. It is supported for LTE Pico Radio Nodes, Baseband Radio Nodes and Baseband T Nodes.

The replace command does the following:
Configures the new node (identified by its hardware serial number) to its latest known configuration available in ENM.
Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Custom role with the capability: Resource: ap, Operation: execute
The original node configuration data has previously been synchronized in ENM.
Mobile & desktop browser support

ap replace can be executed either on a desktop, laptop or on a mobile device.
Commands from a mobile browser

Examples
 Perform a hardware replace on a node.

ap replace -n Enb612 -s SCB12345678
Response

Initiated. Run 'ap status -n Enb612' for progress

@@@@@manual ap resume@@@@
Syntax
 Syntax to resume a node integration

ap resume -n <nodeName>
Description
The ap resume command is used if the node integration has failed, and the node is waiting for cancel or resume. (Use the ap status command to view node status).

For example, if an error(s) occurs during node integration, use the ap upload command to fix the error. Then ap resume command can be executed after the ap upload command to resume the integration.

The ap resume command is only supported for Baseband Radio Nodes, WCDMA Pico Radio Nodes and VNF Nodes.

Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Custom role with the capability: Resource: ap, Operation: execute
Node integration has failed and node is waiting for resume or cancel
Mobile & desktop browser support

ap resume can be executed either on a desktop, laptop or on a mobile device.
Commands from a mobile browser

Examples
 Resume a node integration

ap resume -n Enb612
Response

Initiated. Run the command 'ap status -n Enb612' for progress

@@@@@manual ap status@@@@
Syntax
 Syntax to display the status of all projects

ap status
 Syntax to display the status of a project

ap status -p <projectName>
 Syntax to display the status of a node

ap status -n <nodeName>
 Syntax to display the status of a deployment

ap status -d <deploymentName>
Description
The ap status command is used to display the current integration status of all projects, individual projects, individual nodes or individual deployments.

The following options are available:
Integration status for all projects is requested using ap status command with no parameters.
Integration status for an individual project is requested using the ap status command with the -p parameter.
Integration status for an individual node is requested using the ap status command with the -n parameter.
Integration status for an individual deployment is requested using the ap status command with the -d parameter.
Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Autoprovisioning_Limited_Remote_Access_Operator
Custom role with the capability: Resource: ap, Operation: read
Mobile & desktop browser support

ap status can be executed either on a desktop, laptop or on a mobile device.
Commands from a mobile browser

Examples
 Display the status of a project

ap status -p NorthWest
Response

This command displays the following information for each project

Project Name
Node Quantity: Total number of nodes in project
In Progress: Number of nodes in the following state(s): Order Started | Order Completed
Integrated: Number of nodes in the following state(s): Integration Completed | Integration Completed with Warning
Failed: Number of nodes in the following state(s): Order Failed | Order Failed with Rollback Failed | Integration Failed
Cancelled: Number of nodes in the following state(s): Integration Cancelled
An additional table showing the integration status for each node in the project.

 Display the status of a node

ap status -n Enb612
Response

This command displays the following information for the specified node

Node Name
Project Name
State
An additional table showing the progress for the tasks in the node integration process.

 Display the status of a deployment

ap status -d SouthEast
Response

This command displays the following information for each deployment

Deployment Name
Node Quantity: Total number of nodes in deployment
In Progress: Number of nodes in the following state(s): Order Started | Order Completed
Integrated: Number of nodes in the following state(s): Integration Completed | Integration Completed with Warning
Failed: Number of nodes in the following state(s): Order Failed | Order Failed with Rollback Failed | Integration Failed
Cancelled: Number of nodes in the following state(s): Integration Cancelled
An additional table showing the integration status for each node in the deployment.

@@@@@manual ap upload@@@@
Syntax
 Syntax to upload a node artifact

ap upload -n <nodeName> file:<fileName>
Description
The ap upload command is used to replace an existing configuration file for a node.

The commands ap upload and ap resume can be used together. For example, if a configuration import fails because of an invalid configuration file, a new configuration file can be uploaded and the node integration can be resumed.

Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Custom role with the capability: Resource: ap, Operation: execute
The configuration file has been added to the ENM browser workspace.
The replacement configuration file must have the same name as an existing configuration file.
The ap upload command allows certain artifact types to be uploaded at different stages, depending on node type.

DU Radio Node

The Site Basic and Site Equipment artifacts are supported when the node is in the following states: ORDER_COMPLETED, ORDER_FAILED, BIND_STARTED and BIND_COMPLETED. Bulk CM configuration artifacts can be uploaded at any time. The Site Installation artifact cannot be uploaded.

Baseband Radio Node and Baseband T Node

The Site Basic and Site Equipment artifacts are supported when the node is in the following states: ORDER_COMPLETED, ORDER_FAILED, BIND_STARTED and BIND_COMPLETED. Bulk CM configuration artifacts can be uploaded at any time. The Site Installation artifact cannot be uploaded. Node Plugin Validation is not availble for Uploaded NETCONF Node Configuration Files.

Pico Radio Node

The upload command is not supported.

Virtual Network Function

The Site Basic and Virtual Network Descriptor artifacts are supported when the node is in the following states: ORDER_COMPLETED, ORDER_FAILED, ORDER_CANCELLED and ORDER_STARTED. Bulk CM configuration artifacts can be uploaded at any time.

Examples
 Upload a node artifact

ap upload -n Enb612 file:transport.xml
Response

Successful

@@@@@manual ap view@@@@
Syntax
 Syntax to view properties for all projects

ap view
 Syntax to view properties for a project

ap view -p <projectName>
 Syntax to view properties for a node

ap view -n <nodeName>
Description
The ap view command is used to view the properties for all projects, individual projects, or individual nodes.

The following options are available:
View properties can be requested for all projects using the ap view command with no parameters.
View properties can be requested for a project using the ap view command with the -p parameter.
View properties can be requested for an individual node using the ap view command with the -n parameter.
Prerequisites

Requires a user with one of the following roles:
Autoprovisioning_Administrator
Autoprovisioning_Operator
Autoprovisioning_Limited_Remote_Access_Operator
Custom role with the capability: Resource: ap, Operation: read
Mobile & desktop browser support

ap view can be executed either on a desktop, laptop or on a mobile device.
Commands from a mobile browser

Examples
 View properties for a project

ap view -p NorthWest
Response

This command displays the following information for the specified project

Project Name
Creator
Creation Date
Description
Node Quantity
An additional table showing specific information for each node in the project.

 View properties for a node

ap view -n Enb612
Response

This command displays the following information for the specified node

Node Name
Project Name
IP Address
Node Identifier
Node Type
Hardware Serial Number
OSS Prefix
Time Zone
Integration Settings
Security Settings
Supervision Settings
Integration Artifacts
Configurations
Optional Features
Remote Configurations
Unlock Cells
@@@@@manual collection@@@@
_______________________________________________________________________________________________________________________________________________________
collection get
< Back To Collecton

Syntax
 Syntax to get the contents of a collection available to the current user

collection get <collection_name>
Description
collection get <collection_name> is used to display the contents of a collection.

You can view your own private collections and all public collections.
If a collection name contains spaces, the name should be wrapped in quotes.

Examples
 Display the contents of a collection visible to the current user

collection get my_collection
Response

This command returns all the FDN(s) contained in the provided collection
FDN : MeContext=ERBS001
 
FDN : MeContext=ERBS002
 
2 instance(s)

 Display the contents of a collection with spaces in the collection name.

collection get "my collection with spaces"
Response

This command returns all the FDN(s) contained in the provided collection
FDN : MeContext=ERBS001
 
FDN : MeContext=ERBS002
 
2 instance(s)

_______________________________________________________________________________________________________________________________________________________
collection list
< Back To Collecton

Syntax
 Syntax to list all collections available to the current user

collection list [CollectionName] [options]
CollectionName
CollectionName is optional and can only be used directly after 'collection list'.

<CollectionName>
Returns Collection named <CollectionName>.
*<CollectionName>
Returns collections ending in "CollectionName".
<CollectionName>*
Returns collections starting with "CollectionName".
*<CollectionName>*
Returns collection with names containing the word "CollectionName".

Note:
CollectionName supports alphanumeric characters (A-Z, a-z and 0-9) and certain "special" characters.
The supported "special" characters are:

. - _ <space>
If CollectionName includes a special character, then it must be contained in double quotes.

Options
-t or --table
Response displayed in table format.
Note:
When copy and pasting a table of data from the CLI to another application the data in the clipboard
needs to be copied as text only to prevent formatting issues.

-pu or --public
Returns all public collections only.
-pr or --private
Returns user private collections only.
Note:The public and private options are mutually exclusive.

Description
collection list is used to display details of all collections visible to the current user.

Examples
 List all the collections available to the current user

collection list
Response

In this case there are two collections 'my_collection1' and 'my_collection2':
Name : my_collection1
Created By : cmedit_administrator_user
Date Created : 21-February-2017
Sharing Permission : Public
Name : my_collection2
Created By : cmedit_administrator_user
Date Created : 21-February-2017
Sharing Permission : Public
2 instance(s)
_______________________________________________________________________________________________________________________________________________________
collection create
< Back To Collection

Syntax
 Syntax to create a new collection available to the current user

collection create <collection_name> [-f file:<file_name.txt>] [-pu | --public]
Description
collection create <collection_name> is used to create a new collection.

If no file is specified then an empty collection named collectionname is created.
In case a file is specified then new collection is created containing the list of valid FDNs or node names.
Default sharing permission for new collection is "private" (no option specified), instead to create a new "public" collection the option -pu or --public is required.

Note:
Collection name supports only alphanumeric characters (A-Z, a-z and 0-9) and certain "special" characters.
The supported "special" characters are:

. - _ <space>
If collection name includes a special character, then it must be contained in double quotes.

Examples
 Create a new private empty collection only visible to the current user

collection create mycollection
Response

This command returns created empty collection
Collection : mycollection 
 
Total(0) Added(0) Failed(0)
 

 Create a new public collection from file, input file containing a list of valid FDN’s or Node names.

collection create mycollection -f file:"collection_inputfile.txt" --public
Response

This command returns created collection, number of valid FDN’s or Node names is displayed
Collection : mycollection
 
Total(3) Added(3) Failed(0)
 
 Create a new public collection from file, input file containing also some invalid or non-existing FDN’s or Node names.

collection create mycollection -f file:"collection_inputfile.txt" --public
Response

The collection is created even if some objects cannot be added, list of failed objects is displayed
Failed Objects
Name            Reason
LTE11ERBS00040  Duplicated object
LTE99ERBS99999  Object not found 
 
Total(5) Added(3) Failed(2)
 
Collection : mycollection
 
The collection mycollection has been created but some objects could not be added. Please check object names and try again.
 
_______________________________________________________________________________________________________________________________________________________
collection modify
< Back To Collection

Syntax
 Syntax to modify an existing collection

collection modify <collection_name> -f file:<file_name.txt> [-r | --replace]
Description
collection modify <collection_name> is used to modify an existing collection.

By default the FDNs and Node names will be added to the existing collection.
Any objects that are specified in the file and already exist in the collection will be ignored.
If the --replace option is used then only the name of the collection is retained and the contents is completely replaced by the contents of the file.

Note:
Collection name supports only alphanumeric characters (A-Z, a-z and 0-9) and certain "special" characters.
The supported "special" characters are:

. - _ <space>
If Collection name includes a special character, then it must be contained in double quotes.

Examples
 Modify an existing collection, input file containing a list of valid FDNs or Node names.

collection modify mycollection -f file:"collection_inputfile.txt"
Response

The existing collection is modified and the number of valid FDNs or Node names added are displayed
Collection : mycollection
 
Total(3) Added(3) Failed(0)
 

 Modify an existing collection, input file containing a list of valid FDN’s or Node names, previous collection content is completely replaced by the contents of the file

collection modify mycollection -f file:"collection_inputfile.txt" --replace
Response The existing collection is modified, previous collection content is completely replaced by the contents of the file

Collection : mycollection
 
Total(4) Added(4) Failed(0)

_______________________________________________________________________________________________________________________________________________________
collection delete
< Back To Collection

Syntax
 Syntax to delete an existing collection

collection delete <collection_name>
Description
collection delete <collection_name> is used to delete an existing collection.

Note:
Collection name only supports alphanumeric characters (A-Z, a-z and 0-9) and certain "special" characters.
The supported "special" characters are:

. - _ <space>
Examples
 Delete an existing collection.

collection delete mycollection
Response

The existing collection is deleted
1 instance(s) deleted

@@@@@manual savedsearch@@@@
_______________________________________________________________________________________________________________________________________________________
savedsearch list
< Back To Savedsearch

Syntax
 Syntax to list all Saved Searches available to the current user

savedsearch list
Description
savedsearch list is used to display details of all Saved Searches visible to the current user.

Examples
 List all the Saved Searches available to the current user

savedsearch list
Response

In this case there are two Saved Searches 'my_savedsearch1' and 'my_savedsearch2':
Name : my_savedsearch1
Created By : cmedit_administrator_user
Date Created : 21-February-2017
Search Query : select all nodes of type ERBS
Sharing Permission : Public
Name : my_savedsearch2
Created By : cmedit_administrator_user
Date Created : 21-February-2017
Search Query : select all objects of type ManagedElement from node type RadioNode
Sharing Permission : Public
2 instance(s)
@@@@@manual netlog@@@@
_______________________________________________________________________________________________________________________________________________________
Retrieve Network Element Logs
Context
< Back To Netlog

This tutorial describes the tasks to retrieve logs from network elements to a user device like computer or tablet. In the following are defined as examples:

node_name = LTE04ERBS00001 existing network element
node_name = lienb0648 existing network element
All the examples are referred to eNodeB DU Radio Node network elements but they can be applied also for NodeB Baseband Radio Node, eNodeB DU Radio Node, eNodeB Pico Radio Node, SGSN-MME, and MGW network elements types.

NOTE

The SGSN-MME network elements types also require that only authorized users, which belong to the security group, can retrieve mmi_logs files. The user can retrieve the credentials used by ENM to communicate to the node, by the following ENM CLI command:

cmedit get <nodeName> NetworkElementSecurity.*
The command returns, in the secureUserName field, the user name (for example ossuser).

To verify if the ossuser has the rights to collect mmi_logs files, run the following node CLI command:

list_sm_users
If the ossuser belongs to the security group, the ENM user is already authorized to retrieve mmi_log using netlog commands.

If the ossuser does not belong to the security group, the node Administrator must add the ossuser user name to the security group by the following node CLI command:

set_sm_group -ui UserId -g UserGroup...
where UserId is the ossuser username and UserGroup is the security group (for example: set_sm_group -ui ossuser -g security).

Refer to the SGSN-MME CPI for more information about node CLI commands.

Prerequisites
The network elements must exist in the ENM.
The SGSN-MME network elements have the ENM user in the security group as authorized to retrieve mmi_log files.
Steps
Get the supported log type for a specific network element:
netlog describe LTE04ERBS00001
The command in this example returns the logs supported by the node type of the requested network element:
FDN : NetworkElement=LTE04ERBS00001
Supported log types: [SYSTEM_LOG, SHELL_AUDITTRAIL_LOG, CORBA_AUDITTRAIL_LOG, CELLO_SECURITYEVENT_LOG, TRACE_LOG, AVAILABILITY_LOG, ALARM_LOG, EVENT_LOG DSPDUMPS, HW_INVENTORY, LOCALEVENT_LOG, TROUBLESHOOTING]
Upload log(s) from network element to ENM:
netlog upload LTE04ERBS00001 CORBA_AUDITTRAIL_LOG;SHELL_AUDITTRAIL_LOG
The command in this example uploads the selected log(s) to an ENM temporary area:
FDN : NetworkElement=LTE04ERBS00001
upload on logType CORBA_AUDITTRAIL_LOG successfully started
upload on logType SHELL_AUDITTRAIL_LOG successfully started
Check the status of log(s) upload operation:
netlog status LTE04ERBS00001 SHELL_AUDITTRAIL_LOG
The command in this example checks the progress of the upload operation:
Available space 694.05G, Filesystem Size 700G
FDN : NetworkElement=LTE04ERBS00001
log type SHELL_AUDITTRAIL_LOG status PARTIALLY_TRANSFERRED
Check if the upload is completed:
netlog status LTE04ERBS00001 SHELL_AUDITTRAIL_LOG
Check until the log is ready for download:
Available space 694.05G, Filesystem Size 700G
FDN : NetworkElement=LTE04ERBS00001
log type SHELL_AUDITTRAIL_LOG status READY_FOR_DOWNLOAD Log(s) file(s): 210755_666693_SHELL_AUDITTRAIL_LOG_20160905T131957.xml, lastModified=2016/09/19 10:56:00, size[bytes]=204524
Download log(s) to user device:
netlog download LTE04ERBS00001 SHELL_AUDITTRAIL_LOG
The command in this example opens a save file dialog box to select the folder location to download the file to user’s device:
Download started
@@@@@manual shm license@@@@
_______________________________________________________________________________________________________________________________________________________
Tutorial: Install License Key File Operations
< Back To Shm

Install license key file on the node with latest sequence number

shm installlkf --nodes <NeName/FDN>
shm installlkf -n <NeName/FDN>
NeName Example Command

shm installlkf -n LTE02ERBS00002
Example Command Response

License Installation is initiated on specified node(s) with job name: Shm_Cli_InstallLicense_administrator_29082018074720
FDN Example Command

shm installlkf -n NetworkElement=LTE02ERBS00002
Example Command Response

License Installation is initiated on specified node(s) with job name: Shm_Cli_InstallLicense_administrator_29082018112500
Install license key file on multiple nodes with latest sequence number

shm installlkf --nodes <NeName/FDN1;NeName/FDN2> or shm installlkf -n <NeName/FDN1;NeName/FDN2>
shm installlkf --collection <CollectionName> or shm installlkf -co <CollectionName>
shm installlkf --savedsearch <SavedSearchName> or shm installlkf -ss <SavedSearchName>
NeName Example Command

shm installlkf -n LTE02ERBS00001;LTE01dg2ERBS00013
Example Command Response

License Installation is initiated on specified node(s) with job name: Shm_Cli_InstallLicense_administrator_29082018113748
FDN Example Command

shm installlkf -n NetworkElement=LTE02ERBS00001;NetworkElement=LTE01dg2ERBS00013
Example Command Response

License Installation is initiated on specified node(s) with job name: Shm_Cli_InstallLicense_administrator_29082018114236
Collection Example Command

shm installlkf -co erbsCollection
Example Command Response

License Installation is initiated on specified collection with job name: Shm_Cli_InstallLicense_administrator_29082018115644
SavedSearch Example Command

shm installlkf -ss saved_Search
Example Command Response

License Installation is initiated on specified SavedSearch with job name: Shm_Cli_InstallLicense_administrator_29082018121413
Install license key file with wild card

shm installlkf --nodes <NeName>*
shm installlkf -n <NeName>*
Example Command

shm installlkf -n LTE01dg2ERBS00*
Example Command Response

License Installation is initiated on specified node(s) with job name: Shm_Cli_InstallLicense_administrator_29082018122950
Install license key file on the node with the specified job name.

shm installlkf --nodes <NeName/FDN> --jobname <JobName>
shm installlkf -n <NeName/FDN> -jn <JobName>
Example Command

shm installlkf -n LTE02ERBS00001 -jn CliLicenseJob
Example Command Response

License Installation is initiated on specified node(s) with job name: CliLicenseJob
When existing job name is specified, error message is displayed

Example Command

shm installlkf -n LTE02ERBS00001 -jn CliLicenseJob
Example Command Response

Error 13200 : Creation of job failed, as there is another job created with the same name.
Suggested Solution : Please check online help
Install license key file on the node with options job name and job description.

shm installlkf --nodes <NeName/FDN> --jobname <JobName> --jobdescr "<JobDescription>"
shm installlkf -n <NeName/FDN> -jn <JobName> -jd "<JobDescription>"
Example Command

shm installlkf -n LTE02ERBS00001  -jn CliJobTest1 -jd "CliLicenseJobDescription"
Example Command Response

License Installation is initiated on specified node(s) with job name: CliJobTest1
Create a scheduled install license job with the options jobname and begin

shm installlkf --nodes <NeName/FDN> --jobname <JobName> --begin <ScheduleStartTime>
shm installlkf -n <NeName/FDN> -jn <JobName> -b <ScheduleStartTime>
Example Command

shm installlkf -n LTE02ERBS00001 -jn CliJobWithScheduleData -b 2018-08-29T15:25:00
Example Command Response

License Installation is initiated on specified node(s) with job name: CliJobWithScheduleData
_______________________________________________________________________________________________________________________________________________________
Import of License Key File into ENM
Drag and drop the file to be imported into the ENM CLI.

Example Drag and Drop Response:

erbs1.zip added to workspace

Note 1: The target file being imported should exist.

Note 2: The target file must be of .zip format.

Import valid license key file :

Example Command:

shm import -l file:erbs1.zip
Example Command Response:

Import of License Key Files Package 'erbs1.zip' was successful.

Import valid license key file with filename in quotes:

Example Command:

shm import -l file:"Licenses.zip"
Example Command Response:

Import of License Key Files Package 'Licenses.zip' was successful.

Import empty license key file resulting in an unknown error:

Example Command:

shm import -l file:erbs1.zip
Example Command Response:

Error 13050 : Import of License Key Files Package 'erbs1.zip' failed, as there is an unexpected error occurred in the system. Please try again later or contact your system administrator.

Suggested Solution : Check the logs.

Import empty license key file :

Example Command:

shm import -l file:erbs1.zip
Example Command Response:

Error 13052 : Import of License Key Files Package 'erbs1.zip' failed, as the submitted archive is empty.

Suggested Solution : Import a License Key File Package which contains at least one license key file.

Import license key file with invalid filename :

Example Command:

shm import -l file:Licenses+].$.zip
Example Command Response:

Error 2001 : Command syntax error, cannot resolve the shm command

Suggested Solution : Please check online help for correct syntax.

Import already existing license key file:

Example Command:

shm import -l file:erbs1.zip
Example Command Response:

Error 13054 : Import of License Key Files Package 'erbs1.zip' failed. The following file(s) failed :
Suggested Solution : Check the summary.
Summary:
Reason: File(s) which already exist:
- ERBSREF1_090827_085012_info.xml
- ERBSREF2_090827_085012_info.xml
Reason: File(s) which is/are not used:
- ERBSREF1_090827_085012.xml
- ERBSREF2_090827_085012.xml
Import license key files with partial success case:

Example Command:

shm import -l file:erbs1.zip
Example Command Response:

Error 13055 : Import of LicenseKeyFiles Package 'erbs1.zip' was Partial Success.The following file(s) failed:
Suggested Solution : Check the summary.
Summary:
Reason: File(s) which already exist:
- ERBSREF1_090827_085012_info.xml
- ERBSREF2_090827_085012_info.xml
Reason: File(s) which is/are not used:
- ERBSREF1_090827_085012.xml
- ERBSREF2_090827_085012.xml
_______________________________________________________________________________________________________________________________________________________
Tutorial: Get License Details
< Back To Shm

License Details for eNodeB DU Radio node and MGw Nodes
Get all network elements having a capacity key id="<key>"

Example Command:

cmedit get * LicenseInventory,(CapacityKey.id==CXC4010071/42) -t
Example Command Response:

NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory,CapacityKey

NodeId      ParentId CapacityKeyId id
LTE01ERBS07 1        1             CXC4010071/42
NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory

NodeId        ParentId       LicenseInventoryId
LTE01ERBS07   LTE01ERBS07    1
Get all network elements having a capacity key with pattern

Example Command:

cmedit get * LicenseInventory,(CapacityKey.id==CXC4010071*) -t
Example Command Response:

NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory,CapacityKey

NodeId      ParentId CapacityKeyId id
LTE01ERBS07 1        1             CXC4010071/42
LTE01ERBS07 1        2             CXC4010071/43
NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory

NodeId        ParentId       LicenseInventoryId
LTE01ERBS07   LTE01ERBS07    1
Get all network elements having a feature key id="<key>"

Example Command:

cmedit get * LicenseInventory,(FeatureKey.id==FEATURE-7) -t
Example Command Response:

NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory,FeatureKey

NodeId      ParentId FeatureKeyId id
LTE01ERBS07 1        1            FEATURE-7
LTE01ERBS08 1        1            FEATURE-7
NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory

NodeId      ParentId    LicenseInventoryId
LTE01ERBS07 LTE01ERBS07 1
LTE01ERBS08 LTE01ERBS08 1
Get all network elements having a feature key with pattern

Example Command:

cmedit get * LicenseInventory,(FeatureKey.id==FEATURE*) -t
Example Command Response:

NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory,FeatureKey

NodeId      ParentId FeatureKeyId id
LTE01ERBS07 1        1            FEATURE-7
LTE01ERBS08 1        1            FEATURE-7
LTE01ERBS07 1        1            FEATURE-1
LTE01ERBS08 1        1            FEATURE-1
NetworkElement,SHMFunction,InventoryFunction,Inventory,LicenseInventory

NodeId      ParentId    LicenseInventoryId
LTE01ERBS07 LTE01ERBS07 1
LTE01ERBS08 LTE01ERBS08 1
License Details for ECIM Nodes
Note: License Management is not applicable for LTE Pico Radio Node.

Get all network elements having a capacity key id="<key>"

Example Command:

cmedit get * Lm,(CapacityKey.capacityKeyId==CAPACITY-0) -t
Example Command Response:

SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm,CapacityKey

NodeId      ParentId 	CapacityKeyId CapacityKeyId
NE03 1        1           CAPACITY-0 CAPACITY-0
SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm

NodeId        ParentId       LmId
NE03   		1    		1
Get all network elements having a capacity key with pattern

Example Command:

cmedit get * Lm,(CapacityKey.capacityKeyId==CAPACITY*) -t
Example Command Response:

SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm,CapacityKey

NodeId      ParentId CapacityKeyId capacityKeyId
NE03 1        1             CAPACITY-0	CAPACITY-0
NE03 1        1             CAPACITY-1	CAPACITY-1
SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm

NodeId        ParentId       LmId
NE03  		 1    		1
Get all network elements having a feature key id="<key>"

Example Command:

cmedit get * Lm,(FeatureKey.featureKeyId==FEATURE-7 ) -t
Example Command Response:

SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm

NodeId      ParentId	 LmId
NE03 1        1            1
SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm,FeatureKey

NodeId      ParentId    FeatureKeyId  featureKeyId
NE03	 	1 	FEATURE-7 	FEATURE-7
LTE01ERBS08	 LTE01ERBS08 	1
Get all network elements having a feature key with pattern

Example Command:

cmedit get * Lm,(FeatureKey.featureKeyId==FEATURE*) -t
Example Command Response:

SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm,FeatureKey

NodeId      ParentId FeatureKeyId featureKeyId
NE03 1        1           FEATURE-0	FEATURE-0
NE03 1        1           FEATURE-1	FEATURE-1
NE03 1        1           FEATURE-2	FEATURE-2
SubNetwork,MeContext,ManagedElement,SystemFunctions,Lm

NodeId      ParentId    LmId
NE03 		1 	1
_______________________________________________________________________________________________________________________________________________________
Tutorial: Activation of Unlock
< Back To Shm

Activation of Unlock for eNodeB DU Radio node and MGw based Nodes
Emergency unlock activation provides user to unlock the node from license restrictions

Get status of emergency unlock for eNodeB DU Radio Node and MGw based Nodes

The following command displays the status of emergency unlock for eNodeB DU Radio node and MGw nodes

Command

cmedit get <Node FDN> Licensing.emergencyStateInfo
Example Command

cmedit get SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008 Licensing.emergencyStateInfo -t
Example Command Response

SubNetwork,MeContext,ManagedElement,SystemFunctions,Licensing NodeId      ParentId   LicensingId  emergencyStateInfo
LTE03ERBS00008        1         1    {expiryTime=, time=0, state=NEVER_USED}
1 instance(s)
Perform emergency unlock on eNodeB DU Radio node and MGw based nodes

This procedure makes it possible to perform an emergency unlock of a node to temporarily access more capacity or features than is currently licensed.

The following command performs emergency unlock on eNodeB DU Radio node and MGw nodes

Command

cmedit get <Node FDN> Licensing=1
Example Command

cmedit get SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008 Licensing=1
Example Command Response

FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SystemFunctions=1,Licensing=1
1 instance(s)
Use the above retrieved FDN in the following command.

Command

cmedit action <FDN> setEmergencyState
Example Command

cmedit action SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SystemFunctions=1,Licensing=1 setEmergencyState
Example Command Response

SUCCESS FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SystemFunctions=1,Licensing=1
1 instance(s)
Activation of Unlock for ECIM based Nodes
Note - Activation of Unlock is not applicable for LTE Pico Radio Node.

Emergency unlock activation provides user to unlock the node from license restrictions

Obtain status of emergency unlock for ECIM based node

The following command displays the status of emergency unlock for ECIM node

Command

cmedit get <Node Name> EmergencyUnlock
Example Command

cmedit get LTE01dg2ERBS00006 EmergencyUnlock
Example Command Response

FDN : SubNetwork=LTE01dg2ERBS00006,MeContext=LTE01dg2ERBS00006,ManagedElement=LTE01dg2ERBS00006,SystemFunctions=1,Lm=1,EmergencyUnlock=1
1 instance(s)
Use the above retrieved FDN in the following command.

Command

cmedit get <FDN>
Example Command

cmedit get SubNetwork=LTE01dg2ERBS00006,MeContext=LTE01dg2ERBS00006,ManagedElement=LTE01dg2ERBS00006,SystemFunctions=1,Lm=1,EmergencyUnlock=1
Example Command Response

FDN : SubNetwork=LTE01dg2ERBS00006,MeContext=LTE01dg2ERBS00006,ManagedElement=LTE01dg2ERBS00006,SystemFunctions=1,Lm=1,EmergencyUnlock=1
activationsLeft : 0
expiration : null
activationState : INACTIVE
emergencyUnlockId : 1
1 instance(s)
Perform emergency unlock on ECIM based node

The following command performs emergency unlock for ECIM based node

Command

cmedit get <Node Name> EmergencyUnlock
Example Command

cmedit get LTE01dg2ERBS00007 EmergencyUnlock
Example Command Response

FDN : SubNetwork=LTE01dg2ERBS00007,MeContext=LTE01dg2ERBS00007,ManagedElement=LTE01dg2ERBS00007,SystemFunctions=1,Lm=1,EmergencyUnlock=1 
1 instance(s)
Use the above retrieved FDN in the following command.

Command

cmedit action <FDN> activate
Example Command

cmedit action SubNetwork=LTE01dg2ERBS00007,MeContext=LTE01dg2ERBS00007,ManagedElement=LTE01dg2ERBS00007,SystemFunctions=1,Lm=1,EmergencyUnlock=1 activate
Example Command Response

SUCCESS FDN : SubNetwork=LTE01dg2ERBS00007,MeContext=LTE01dg2ERBS00007,ManagedElement=LTE01dg2ERBS00007,SystemFunctions=1,Lm=1,EmergencyUnlock=1
1 instance(s)
Warning!

The use of the function for Emergency unlock is limited. It can only be used in cases of severe emergencies.
Use in other cases is a breach of your contract with Ericsson, therefore we recommend that you contact
Ericsson before using this function. Unless this action is approved by an authorized Ericsson officer,
your action can cause your company to become in breach of the agreement with Ericsson, including the
possibility of severe liabilities as well as the effect that all warranties can be null and void.
_______________________________________________________________________________________________________________________________________________________
Tutorial: Job Status
< Back To Shm

View job status of all jobs created by current Logged-In user.

shm status
Example Command:

shm status
Example Command Response:

Main jobs:
Job Name           Job Type Created By   Total No of Nodes Progress Status              Result Start Date      End Date     Duration
RestoreBackupJob_1 RESTORE  SHM_Admin_1 7                0.0      WAIT_FOR_USER_INPUT                                     
BackupJob_1        BACKUP   SHM_Admin_1 4                100.0    COMPLETED           FAILED  09/26/2016      09/26/2016  0h 1m 
                                                                                                06:58:41        07:00:03    81s 
UpgradeJob_1       UPGRADE  SHM_Admin_1 1                100.0    COMPLETED           SUCCESS 09/23/2016      09/23/2016  0h 1m 
                                                                                                20:09:37        20:11:26    48s 
3 instance(s)
View job status of all jobs.

shm status --all
shm status -all
Example Command:

shm status -all
Example Command Response:

Main jobs:
Job Name           Job Type Created By   Total No of Nodes Progress Status              Result Start Date      End Date     Duration
RestoreBackupJob_1 RESTORE  SHM_Admin_2 7                0.0      WAIT_FOR_USER_INPUT                                     
BackupJob_1        BACKUP   SHM_Admin_2 4                100.0    COMPLETED           FAILED  09/26/2016      09/26/2016  0h 1m 
                                                                                                06:58:41        07:00:03    81s 
BackupJob_2        BACKUP   SHM_Admin_1 5                100.0    COMPLETED           SUCCESS 09/23/2016      09/23/2016  0h 1m 
                                                                                                20:09:37        20:11:26    48s 
3 instance(s)
View job status of a specified jobname.

shm status --jobname <JobName>
shm status -jn <JobName>
Example Command 1:

shm status --jobname BackupJob_administrator_24092016215606
Example Command Response:

Job Name : BackupJob_administrator_24092016215606
Job Type : BACKUP
Created By : administrator
Total No of Nodes : 2
No of Nodes Executing: 0
No of Nodes Completed: 2
No of Nodes Skipped: 0
No of Nodes in Queue: 0
Progress : 100.0
Status : COMPLETED
Result : SUCCESS
Start Date : 09/24/2016 16:27:31
End Date : 09/24/2016 16:28:04
NE Job Details:
Node Name     Current Activity Progress Status      Result  Start Date          End Date                  Last Log Message
LTE02ERBS0001                  100.0    COMPLETED   SUCCESS 09/24/2016 16:27:37 09/24/2016 16:27:55   Configuration Version "testbackup01" is created
LTE02ERBS0002                  100.0    COMPLETED   SUCCESS 09/24/2016 16:27:37 09/24/2016 16:27:55   Configuration Version "testbackup02" is created
2 instance(s)
Example Command 2:

shm status -jn Shm_Cli_NODERESTART_administrator_1477491606083
Example Command Response:

Job Name : Shm_Cli_NODERESTART_administrator_1477491606083
Job Type : NODERESTART
Created By : administrator
Total No of Nodes : 2
No of Nodes Executing: 0
No of Nodes Completed: 2
No of Nodes in Queue: 0
No of Nodes Skipped: 1
Progress : 100.0
Status : COMPLETED
Result : FAILED
Start Date : 26/10/2016 15:20:06
End Date : 26/10/2016 15:21:20
NE Job Details:
Node Name   Current Activity Progress   Status      Result  Start Date          End Date                  Last Log Message
LTE02ERBS0001  manualrestart   100.0    COMPLETED   SUCCESS 26/10/2016 15:20:06 26/10/2016 15:21:20   "Node Restart" activity is completed successfully.
SGSN-16A-CP01-V101             100.0    COMPLETED   SKIPPED 26/10/2016 15:20:06 26/10/2016 15:21:20   Skipped Node restart for SGSN-MME as not supported.
2 instance(s)
Note:
Total No of Nodes - Total nodes on which job is created.
No of Nodes Executing - Total nodes on which job status is in RUNNING, CANCELLING, SYSTEM_CANCELLING state.
No of Nodes Completed - Total nodes on which job status is in COMPLETED, SYSTEM_CANCELLED state.
No of Nodes Skipped: Total nodes on which job result is SKIPPED.
No of Nodes in Queue: Total NE jobs not created and Nodes on which job status is in CREATED, SCHEDULED, WAIT_FOR_USER_INPUT, SUBMITTED state.
There will be some delay in updating the main job Progress even after all NE Job status is COMPLETED.
View job status of jobs created by a specified job owner.

shm status --jobowner <JobOwner>
shm status -jo <JobOwner>
Example Command:
shm status --jobowner test_user
Main jobs:
Job Name           Job Type Created By   Total No of Nodes Progress Status       Result   Start Date     End Date     Duration
BackupJob_3        BACKUP   test_user     4                100.0    COMPLETED    FAILED   09/24/2016     09/24/2016   0h 0m 
                                                                                          16:27:31       16:28:04     33s 
BackupJob_4        BACKUP   test_user     9                100.0    COMPLETED    SUCCESS  09/26/2016     09/26/2016   0h 2m 
                                                                                          14:02:13       14:05:11     57s 
2 instance(s)
View job status of jobs with specified job type.

shm status --jobtype <JobType>
shm status -jt <JobType>
Example Command:

shm status --jobtype UPGRADE
Example Command Response:

Main jobs:
Job Name           Job Type Created By   Total No of Nodes   Progress   Status       Result   Start Date     End Date    Duration
UpgradeJob_1       UPGRADE  SHM_Admin_1    1                  100.0      COMPLETED    SUCCESS  09/23/2016     09/23/2016  0h 1m 
                                                                                              20:09:37       20:11:26    48s 
1 instance(s)
View job status of jobs with specified job status.

shm status --jobstatus <JobStatus>
shm status -js <JobStatus>
Example Command:

shm status --jobstatus COMPLETED
Example Command Response:

Main jobs:
Job Name           Job Type Created By   Total No of Nodes Progress Status       Result   Start Date     End Date    Duration
BackupJob_1        BACKUP   SHM_Admin_1 4                100.0    COMPLETED    FAILED    09/26/2016    09/26/2016  0h 1m 
                                                                                           06:58:41      07:00:03    81s 
BackupJob_2        BACKUP   SHM_Admin_2 9                88.89    COMPLETED    FAILED    09/26/2016    09/26/2016  0h 1m 
                                                                                           13:50:52      13:52:00     8s 
2 instance(s)
View job status of jobs with specified job owner and job type.

shm status --jobowner <JobOwner> --jobtype <JobType>
shm status -jo <JobOwner> -jt <JobType>
Example Command:
shm status -jo SHM_Admin_3 -jt backup
Main jobs:
Job Name       Job Type   Created By    Total No of Nodes Progress Status     Result   Start Date    End Date      Duration
BackupJob_3    BACKUP     SHM_Admin_3  2                100.0    COMPLETED  FAILED   09/24/2016    09/24/2016    0h 0m 
                                                                                       16:27:31      16:28:04      33s 
BackupJob_4    BACKUP     SHM_Admin_3  7                100.0    COMPLETED  SUCCESS  09/26/2016    09/26/2016    0h 2m 
                                                                                       14:02:13      14:05:11       57s 
2 instance(s)
View job status of jobs with specified job owner, job type and job status.

shm status --jobowner <JobOwner> --jobtype <JobType> --jobstatus <JobStatus>
shm status -jo <JobOwner> -jt <JobType> -js <JobStatus>
Example Command:
shm status -jo SHM_Admin_4 -jt backup -js COMPLETED
Main jobs:
Job Name       Job Type   Created By    Total No of Nodes Progress Status     Result   Start Date    End Date      Duration
BackupJob_4    BACKUP     SHM_Admin_4  7                100.0    COMPLETED  SUCCESS  09/26/2016    09/26/2016    0h 2m 
                                                                                       14:02:13      14:05:11       57s 
1 instance(s)
If user has insufficient access rights.

Example Command:

shm status --jobstatus COMPLETED
Example Command Response:

Error 13902 : Insufficient access rights to perform the operation
Suggested Solution : If operation is required to be performed by the current user, the user profile must be updated by the system administrator.
                    
For incorrect syntax.

Example Command:

shm status -j BACKUP
Example Command Response:

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
If optional parameters are repeated in the command.

Example Command:

shm status --jobowner SHM_Admin_3 --jobtype backup --jobtype upgrade
Example Command Response:

Error 13903 : Command Syntax error, Optional parameters are repeated
Suggested Solution : Please check online help for correct syntax
For invalid job type.

Example Command:

shm status -jt BACKUPS
Example Command Response:

Error 13150 : Invalid Job type
Suggested Solution : Please check online help for valid arguments.
For invalid job status.

Example Command:

shm status -js PARTIAL
Example Command Response:

Error 13151 : Invalid Job status
Suggested Solution : Please check online help for valid arguments.
If unexpected error occurs.

Example Command:

shm status -js COMPLETED
Example Command Response:

Error 13155 : Unable to retrieve the job status at the moment
Suggested Solution : Please try later.
@@@@@manual shm inventory@@@@
_______________________________________________________________________________________________________________________________________________________
Tutorial: Export Inventory
< Back To Shm

Start an inventory 3GPP data export job with all inventory.

Export in 3GPP format, hardware and software data.

Example Command

shm export
Example Command Response

Export job export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 started with job ID 3

Note - If the user enters an invalid command, the following response is returned:

Example Command

shm notavalidcommand
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax
Check progress of export job

Check status of all exports

Example Command

cmedit export -st
Example Command Response

Job status
Job ID
Job name
Status
Start date/time
End date/time
Elapsed time
Expected nodes exported
Nodes exported
Nodes not exported
Nodes no match found 
MOs exported
File name
User name
3
export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405
STARTED
2015-10-12T11:29:39
4
4
0
0
2754
administrator
2
export_INVENTORY_2015-10-09T17-32-24-344_75be5335-0d00-43e6-8dcb-5619be246687
COMPLETED
2015-10-12T03:00:00
2015-10-12T03:00:43
0h 0m 43s
213
213
0
0
303257
/ericsson/batch/data/export/3gpp_export/export_INVENTORY_2015-10-09T17-32-24-344_75be5335-0d00-43e6-8dcb-5619be246687.xml
administrator
1
export_INVENTORY_2015-10-09T17-32-16-124_61e667c9-0117-41d3-80cf-51d48d7b5b92
COMPLETED
2015-10-12T09:03:04
2015-10-12T09:03:31
0h 0m 26s
113
113
0
0
160882
/ericsson/batch/data/export/3gpp_export/export_INVENTORY_2015-10-09T17-32-16-124_61e667c9-0117-41d3-80cf-51d48d7b5b92
administrator
The above result confirms the status as 'STARTED' for the job with id '3'

(Note - Using short form '-st' of the '--status' argument.)

Check status of single export using job Id or job name

Example command using job ID:

cmedit export -st --job 3 
Example command using job name:

cmedit export -st --jobname export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 
Example Command Response

Job status
Job ID
Job name
Status
Start date/time
End date/time
Elapsed time
Expected nodes exported
Nodes exported
Nodes not exported
Nodes no match found 
MOs exported
File name
User name
3
export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405
COMPLETED
2015-10-12T11:33:00 
2015-10-12T11:29:40
0h 0m 4s
4
4
0
0
2754
/ericsson/batch/data/export/3gpp_export/export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405.xml
administrator
Status of export job 3 is now 'COMPLETED' and all other results have been filtered out

Display details of the export for the job

Example Command

cmedit export -st -j 3 --verbose
Example Command Response

Job status
Job ID
Job name
Status
Start date/time
End date/time
Elapsed time
Expected nodes exported
Nodes exported
Nodes not exported
Nodes no match found 
MOs exported
File name
User name
3
export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405
COMPLETED
2015-10-12T11:33:00 
2015-10-12T11:29:40
0h 0m 4s
4
4
0
0
2754
/ericsson/batch/data/export/3gpp_export/export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405.xml
administrator
Node status
Node name
Export status
Export status message
FDN
MeContext=ENODEB_1
EXPORTED
MeContext=ENODEB_1
MeContext=ENODEB_2
EXPORTED
MeContext=ENODEB_2
MeContext=ENODEB_3
EXPORTED
MeContext=ENODEB_3
MeContext=ENODEB_4
EXPORTED
MeContext=ENODEB_4
Download the results of export job

Download the export file for the job

Example Command

cmedit export -dl -j 3
Example Command Response

 downloading...
Note - If the job is not ready for download, then the response is

Example Command

cmedit export -dl -jn non_existing_job_name
Example Command Response

Error 5991 : Job with name non_existing_job_name is not available for download. 
Suggested Solution: Make sure that the job was started and is in a COMPLETED state before downloading
Remove export job

The export job to be removed may be specified using either the job name or the job ID

Example Command

cmedit export -rm -jn export_name_3
Example Command

cmedit export -rm -j 3
Example Command Response

Export job was successfully removed.
Start an inventory 3GPP data export job with software only inventory data.

Export in 3GPP format, only software inventory data.

Example Command

shm export -sw
Example Command Response

Export job export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 started with job ID 3

Start an inventory 3GPP data export job with hardware only inventory data.

Export in 3GPP format, only hardware inventory data.

Example Command

shm export -hw
Example Command Response

Export job export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 started with job ID 3

NOTE: If the user enters both software and hardware flags, this is invalid and the following response is displayed:

Example Command

shm export -hw -sw
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax
Start an inventory data export job with license only inventory data.

Export in non 3GPP format, only license inventory data.

Example Command

shm export -lic
Example Command Response

Export job export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 started with job ID 3

Start an inventory 3GPP data export job specifying a sub-network.

Export in 3GPP format, data for all nodes in a subnetwork.

Example Command

shm export --nodes SubNetwork=SampleSubNetwork
Example Command Response

Export job export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 started with job ID 3

Start an inventory 3GPP data export job for all matching nodes.

Export in 3GPP format, data for all nodes partially matching.

Example Command

shm export --nodes *ERBS*
Example Command Response

Export job export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 started with job ID 3

Start an inventory 3GPP data export job for unsupported nodes.

Export in 3GPP format, data for unsupported nodes.

Example Command

shm export --nodes LTE01dg2ERBS00004
Note - LTE01dg2ERBS00004 is the unsupported node

Example Command Response

Export job export_INVENTORY_2017-02-20T14-09-43-391_27746852-1c02-4182-a84f-dd9751a225c2 started with job ID 241

Check the status of export using Job ID or Job name:

Example Command using Job ID:

cmedit export -st --job 241

Example Command Response

Job status
Job ID
Job name
Status
Start date/time
End date/time
Elapsed time
Expected nodes exported
Nodes exported
Nodes not exported
Nodes no match found 
MOs exported
File name
User name
241
export_INVENTORY_2017-02-20T14-09-43-391_27746852-1c02-4182-a84f-dd9751a225c2
FAILED Failed due to no nodes to export
2017-02-20T14:09:43
2017-02-20T14:09:44
0h 0m 1s
1
0
1
0
0
 
administrator
Status of export job 241 is now 'FAILED Failed due to no nodes to export' and all other results have been filtered out

Details of the export for the job

Example Command

cmedit export -st --job 241 --verbose
Example Command Response

Job status
Job ID
Job name
Status
Start date/time
End date/time
Elapsed time
Expected nodes exported
Nodes exported
Nodes not exported
Nodes no match found 
MOs exported
File name
User name
241
export_INVENTORY_2017-02-20T14-09-43-391_27746852-1c02-4182-a84f-dd9751a225c2
FAILED Failed due to no nodes to export
2017-02-20T14:09:43
2017-02-20T14:09:44
0h 0m 1s
1
0
1
0
0
 
administrator
Node status
Node name
Export status
Export status message
FDN
LTE01dg2ERBS00004
NOT_EXPORTED
Inventory Export is not supported for the Node (FDN: ManagedElement=LTE01dg2ERBS00004).
ManagedElement=LTE01dg2ERBS00004
Start an inventory 3GPP data export job specifying a list of nodes.

Export in 3GPP format, data for all listed nodes

Example Command

shm export --nodes ENODEB_1;ENODEB_2;ENODEB_4;ENODEB_5;ENODEB_10
Example Command Response

Export job export_INVENTORY_2015-10-12T14-49-20-254_70f19439-63c7-42c9-bdcb-47fff5f89405 started with job ID 3

Note - If the user enters an invalid node, the following response is displayed:

Example Command

shm export --nodes Invalid_Node
Example Command Response

Error 8013 : Search criteria did not match any nodes
Suggested Solution : Specify a valid search criteria.
Start an inventory 3GPP data export job with the combination of supported and unsupported nodes.

Export in 3GPP format, data for supported and unsupported nodes

Example Command

shm export --nodes LTE02ERBS00002;LTE01dg2ERBS00002
Note - LTE02ERBS00002 is the supported node and LTE01dg2ERBS00002 is the unsupported node

Example Command Response

Export job export_INVENTORY_2017-02-20T12-35-04-026_f6448082-1cf5-4d1c-adaa-7e84cb7c3d5d started with job ID 239

Check the status of export using Job ID or Job name:

Example Command using Job ID:

cmedit export -st --job 239

Example Command Response

Job status
Job ID
Job name
Status
Start date/time
End date/time
Elapsed time
Expected nodes exported
Nodes exported
Nodes not exported
Nodes no match found 
MOs exported
File name
User name
239
export_INVENTORY_2017-02-20T12-35-04-026_f6448082-1cf5-4d1c-adaa-7e84cb7c3d5d
COMPLETED Completed with 1 node(s) missing
2017-02-20T12:35:04
2017-02-20T12:35:08
0h 0m 3s
2
1
1
0
271
/ericsson/batch/data/export/3gpp_export/export_INVENTORY_2017-02-20T12-35-04-026_f6448082-1cf5-4d1c-adaa-7e84cb7c3d5d.xml
administrator
Status of export job 239 is now 'COMPLETED Completed with 1 node(s) missing' and all other results have been filtered out

Details of the export for the job

Example Command

cmedit export -st -j 239 --verbose
Example Command Response

Job status
Job ID
Job name
Status
Start date/time
End date/time
Elapsed time
Expected nodes exported
Nodes exported
Nodes not exported
Nodes no match found 
MOs exported
File name
User name
239
export_INVENTORY_2017-02-20T12-35-04-026_f6448082-1cf5-4d1c-adaa-7e84cb7c3d5d
COMPLETED Completed with 1 node(s) missing
2017-02-20T12:35:04
2017-02-20T12:35:08
0h 0m 3s
2
1
1
0
271
/ericsson/batch/data/export/3gpp_export/export_INVENTORY_2017-02-20T12-35-04-026_f6448082-1cf5-4d1c-adaa-7e84cb7c3d5d.xml
administrator
Node status
Node name
Export status
Export status message
FDN
LTE02ERBS00002
EXPORTED
 
MeContext=LTE02ERBS00002
LTE01dg2ERBS00002
NOT_EXPORTED
Inventory Export is not supported for the Node (FDN: SubNetwork=LTE01dg2ERBS00002,MeContext=LTE01dg2ERBS00002).
SubNetwork=LTE01dg2ERBS00002,MeContext=LTE01dg2ERBS00002
Start an inventory 3GPP data export job specifying the Job name.

Export in 3GPP format and specify the export file name using the jobname option.

Example Command

shm export -jn SampleJobName
Example Command Response

Export job SampleJobName started with job ID 3
_______________________________________________________________________________________________________________________________________________________
Tutorial: View Inventory
< Back To Shm

The Software, Hardware and License information of Nodes can be seen as described from step 1 to step 6. Also, the available backups on the node can be seen as described in step 7.

View Inventory For eNodeB DU Radio node and MGw Nodes
View software Version details (Upgrade Packages) of eNodeB DU Radio node and MGw based node(s)

Example Command:

cmedit get MeContext=LTE01ERBS07,Inventory=1,SWInventory=1,SoftwareVersion=1
Example Command Response:

FDN : MeContext=LTE01ERBS07,Inventory=1,SWInventory=1,SoftwareVersion=1
document : {docRev=R4D21, docNumber=CXP102051/1}
basedOn : null
status : PartiallyInstalled
softwareVersionId : 1
filePath : 
date : Fri Jul 27 06:18:07 UTC 1753
1 instance(s)
NOTE : When NetworkElement is added with SubNetwork, then while fetching the Software Version/Software Item we have to append SubNetwork. This is applicable when fetching any of the Inventories.

Example Command :

cmedit get SubNetwork=subnet_LTE04ERBS00002,MeContext=LTE04ERBS00002,Inventory=1,SWInventory=1,SoftwareVersion=1
View Software Items details (Load Modules) of eNodeB DU Radio node and MGw based node(s)

Example Command:

cmedit get MeContext=LTE01ERBS07,Inventory=1,SWInventory=1,SoftwareItem=1
Example Command Response:

FDN : MeContext=LTE01ERBS07,Inventory=1,SWInventory=1,SoftwareItem=1
filePath : /c/loadmodules/C23XPENM0111
productData : {productNumber=C23XPENM3111, productRevision=E23NM1B319, productName=CXP12466235, productDate=Fri Jul 27 12:44:49 UTC 1753}
softwareItemId : 1
1 instance(s)
View Hardware details (Subracks) of eNodeB DU Radio node and MGw based node(s)

Example Command:

cmedit get MeContext=LTE01ERBS07,Inventory=1,HWInventory=1,Hardware=1
Example Command Response:

FDN : MeContext=LTE01ERBS07,Inventory=1,HWInventory=1,Hardware=1
hardwareId : 1
hwPos : {subrackId=Non-Subrack HW, slotNo=0}
serialNo : n/a
productData : {productNumber=n/a, productRevision=n/a, productName=Non-Subrack HW}
noOfSlots : 29
1 instance(s)
View Hardware Item details (PIUs) of eNodeB DU Radio node and MGw based node(s)

Example Command:

cmedit get MeContext=LTE01ERBS07,Inventory=1,HWInventory=1,Hardware=2
Example Command Response:

FDN : MeContext=LTE01ERBS07,Inventory=1,HWInventory=1,Hardware=2
hardwareId : 2
hwPos : {subrackId=, slotNo=19}
serialNo : TU8G031984
productData : {productNumber=ROJ11921031/41, productRevision=R2C, productName=SPB21, productDate=Thu Nov 22 08:02:11 UTC 2007}
noOfSlots : null
1 instance(s)
View License Summary details of eNodeB DU Radio node and MGw based node(s)

Example Command:

cmedit get MeContext=LTE01ERBS07,Inventory=1,LicenseInventory=1
Example Command Response:

FDN : MeContext=LTE01ERBS07,Inventory=1,LicenseInventory=1
licInventoryId : 1
installation : {dateTime=Mon Apr 20 15:05:39 UTC 2015, seqNumber=1006}
licenseTypeInformation : [{id=FAKE_ELSN_ID1, licenseType=ELSN}]
fingerPrint : ERBS1001
1 instance(s)
View License Key details of eNodeB DU Radio node and MGw based node(s)

Example Command:

cmedit get MeContext=LTE01ERBS07,Inventory=1,LicenseInventory=1,CapacityKey=1
Example Command Response:

FDN : MeContext=LTE01ERBS07,Inventory=1,LicenseInventory=1,CapacityKey=1
description : CAPACITY 1
capacityKeyId : 1
startDate : Mon Jan 01 13:33:20 UTC 2007
stopDate : Thu Dec 31 13:33:20 UTC 2099
id : CAPACITY-1
capacity : 10
hardLimit : 0
1 instance(s)
View backup (Configuration Version) of eNodeB DU Radio node and MGw based node(s)

Example Command:

cmedit get MeContext=LTE01ERBS07,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
Example Command Response:

FDN : MeContext=LTE01ERBS07,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
actionResult : {pathToDetailedInformation=, time=Date: 2014-10-06, Time: 21:28:49.638941, actionId=404, mainResult=EXECUTION_FAILED, configurationVersionName=BackupTest_07Oct_05, invokedAction=PUT_TO_FTP_SERVER}
timeForAutoCreatedCV : 04:00
currentUpgradePackage : MeContext=LTE01ERBS07,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051_1_R4D51
restoreConfirmationDeadline :
autoCreatedCVIsTurnedOn : true
additionalActionResultData : [{information=CV_IS_NOT_FOUND, additionalInformation=}]
currentMainActivity : IDLE
configAdmCountdown : 900
corruptedUpgradePackages : []
rollbackOn : true
ConfigurationVersionId : 1
rollbackInitTimerValue : 30
currentDetailedActivity : IDLE
startableConfigurationVersion : CV_7Oct_001
missingUpgradePackages : []
currentLoadedConfigurationVersion : CV_7Oct_001
rollbackList : [CV_7Oct_001, All2, All-in-one, Test-Roll1, oct-upload2, BackupTest_16Sept_001, 30Sep2014-Bkp-Job1-CV1, Backup_Job5_CV5, Backup_Job4_CV4, Backup_Job3_CV3, BackupTest_17Sept_001, BackupTest_16Sept_011, BackupTest_16Sept_002, BackupTest_16Sept01, BackupTest_10Sept_01, Test_Backup_01, BackupV4, BackupV2, BackupV1, BackupTest1]
configCountdownActivated : false
userLabel :
storedConfigurationVersions : [{identity=someIdentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupTest1, date=Tue Aug 26 06:06:59 2014, type=STANDARD, upgradePackageId=1558}, {identity=someIdentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupV1, date=Mon Sep 08 04:24:11 2014, type=STANDARD, upgradePackageId=1561}, {identity=someIdentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupV2, date=Mon Sep 08 04:24:57 2014, type=STANDARD, upgradePackageId=1561}, {identity=someIdentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupV4, date=Mon Sep 08 04:37:31 2014, type=STANDARD, upgradePackageId=1561}, {identity=null, operatorName=shmtest, status=OK, operatorComment=someComment, name=Test_Backup_01, date=Tue Sep 09 07:42:37 2014, type=STANDARD, upgradePackageId=1561}, {identity=null, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupTest_10Sept_01, date=Tue Sep 09 21:22:23 2014, type=STANDARD, upgradePackageId=1561}, {identity=someIdentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupTest_16Sept01, date=Mon Sep 15 22:33:10 2014, type=STANDARD, upgradePackageId=1560}, {identity=null, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupTest_16Sept_001, date=Tue Sep 16 02:21:17 2014, type=STANDARD, upgradePackageId=1560}, {identity=null, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupTest_16Sept_002, date=Tue Sep 16 04:29:32 2014, type=STANDARD, upgradePackageId=1560}, {identity=null, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupTest_16Sept_011, date=Tue Sep 16 06:17:41 2014, type=STANDARD, upgradePackageId=1560}, {identity=null, operatorName=shmtest, status=OK, operatorComment=someComment, name=BackupTest_17Sept_001, date=Wed Sep 17 03:03:25 2014, type=STANDARD, upgradePackageId=1560}, {identity=Backup_Job3_CV3, operatorName=shmtest, status=OK, operatorComment=Created by SHM job Backup_Job3, name=Backup_Job3_CV3, date=Mon Sep 29 05:38:05 2014, type=TEST, upgradePackageId=1560}, {identity=Backup_Job4_CV4, operatorName=shmtest, status=OK, operatorComment=Created by SHM job Backup_Job4, name=Backup_Job4_CV4, date=Mon Sep 29 05:59:40 2014, type=TEST, upgradePackageId=1560}, {identity=Backup_Job5_CV5, operatorName=shmtest, status=OK, operatorComment=Created by SHM job Backup_Job5, name=Backup_Job5_CV5, date=Mon Sep 29 06:57:52 2014, type=TEST, upgradePackageId=1560}, {identity=30Sep2014-Bkp-Job1-CV1, operatorName=shmtest, status=OK, operatorComment=Created by SHM job 30Sep2014-Backup-Job1, name=30Sep2014-Bkp-Job1-CV1, date=Mon Sep 29 22:18:10 2014, type=TEST, upgradePackageId=1560}, {identity=oct-upload2, operatorName=shmtest, status=OK, operatorComment=Created by SHM job oct-upload2, name=oct-upload2, date=Tue Sep 30 22:44:52 2014, type=TEST, upgradePackageId=1560}, {identity=Test-Roll1, operatorName=shmtest, status=OK, operatorComment=Created by SHM job Test-Roll1, name=Test-Roll1, date=Wed Oct 01 02:46:05 2014, type=TEST, upgradePackageId=1560}, {identity=All-in-one, operatorName=shmtest, status=OK, operatorComment=Created by SHM job All-in-one, name=All-in-one, date=Wed Oct 01 03:15:44 2014, type=TEST, upgradePackageId=1560}, {identity=All2, operatorName=shmtest, status=OK, operatorComment=Created by SHM job All2, name=All2, date=Wed Oct 01 03:50:50 2014, type=TEST, upgradePackageId=1560}, {identity=Id, operatorName=shmtest, status=OK, operatorComment=Created by SHM job Test_Backup_7Oct, name=CV_7Oct_001, date=Mon Oct 06 20:20:20 2014, type=STANDARD, upgradePackageId=1560}]
rollbackInitCounterValue : 5
1 instance(s)
View Inventory for ECIM Nodes
Note: License Management and Hardware Inventory are not applicable for LTE Pico Radio Node.

View software Version details (Upgrade Packages) of ECIM based node

Example Command:

cmedit get SubNetwork=subnet_SGSN-15B-WPP-V606,MeContext=SGSN-15B-WPP-V606,ManagedElement=SGSN-15B-WPP-V606,SystemFunctions=1,SwInventory=1,SwVersion=1
Example Command Response:

FDN :SubNetwork=subnet_SGSN-15B-WPP-V606,MeContext=SGSN-15B-WPP-V606,ManagedElement=SGSN-15B-WPP-V606,SystemFunctions=1,SwInventory=1,SwVersion=1
timeOfInstallation : 2015-09-18-T11:03:20
swVersionId : 1
timeOfDeactivation : 2015-09-18-T11:03:20
timeOfActivation : 2015-09-18-T11:03:20
consistsOf : [SubNetwork=subnet_SGSN-15B-WPP-V606,MeContext=SGSN-15B-WPP-V606,ManagedElement=SGSN-15B-WPP-V606,SystemFunctions=1,SwInventory=1,SwItem=1]
userLabel : SGSN-15B-V606
administrativeData : {productNumber=CXS101289, description=SGSNMME, productRevision=R50L01, productionDate=2015-09-18, type=SGSNMME, productName=SGSN-15B-V606}
1 instance(s)
View Software Items details (Load Modules) of ECIM based node

Example Command:

cmedit get SubNetwork=subnet_SGSN-15B-WPP-V606,MeContext=SGSN-15B-WPP-V606,ManagedElement=SGSN-15B-WPP-V606,SystemFunctions=1,SwInventory=1,SwItem=1
Example Command Response:

FDN : SubNetwork=subnet_SGSN-15B-WPP-V606,MeContext=SGSN-15B-WPP-V606,ManagedElement=SGSN-15B-WPP-V606,SystemFunctions=1,SwInventory=1,SwItem=1
swItemId : 1
additionalInfo : null
userLabel : SGSN-15B-V606
administrativeData : {productNumber=CXS101289, description=SGSNMME, productRevision=R50L01, productionDate=2015-09-18, type=SGSNMME, productName=SGSN-15B-V606}
                    
1 instance(s)
View License Key Summary Details of a ECIM based Node

Example Command:

cmedit get SubNetwork=subnet_NE03,MeContext=NE03,ManagedElement=NE03,SystemFunctions=1,Lm=1,KeyFileManagement=1,KeyFileInformation=1
Example Command Response

keyFileInformationId : 1
locatable : true
installationTime : 2016-03-31T07:44:01
sequenceNumber : 1014
productType : CXP102051
1 instance(s)
View Capacity Key Details

Example Command:

cmedit get SubNetwork=subnet_NE03,MeContext=NE03,ManagedElement=NE03,SystemFunctions=1,Lm=1,CapacityKey=1
Example Command Response:

FDN : SubNetwork=subnet_NE03,MeContext=NE03,ManagedElement=NE03,SystemFunctions=1,Lm=1,CapacityKey=1
shared : false
licensedCapacityLimitReached : true
grantedCapacityLevel : 100
expiration : 2016-09-21T12:32:30.945+05:30
name : CapacityKey01
state : null
validFrom : 2015-09-21T12:32:30.945+05:30
capacityKeyId : 1
licensedCapacityLimit : {noLimit=false, value=100}
keyId : Capacity01
productType : CXP1020511 
1 instance(s)
View FeatureKey Details

Example Command:

cmedit get SubNetwork=subnet_NE03,MeContext=NE03,ManagedElement=NE03,SystemFunctions=1,Lm=1,FeatureKey=1
Example Command Response:

FDN : SubNetwork=subnet_NE03,MeContext=NE03,ManagedElement=NE03,SystemFunctions=1,Lm=1,FeatureKey=1
shared : false
expiration : 2015-09-21T12:32:30.945+05:30
name : FeatureKey01
validFrom : 2015-09-21T12:32:30.945+05:30
state : null
featureKeyId : 1
keyId : Feature101
productType : CXP1020511 
1 instance(s)
View backup of a ECIM based node

Example Command:

cmedit get SubNetwork=subnet_SGSN-MME-15B-V505,MeContext=SGSN-MME-15B-V505,ManagedElement=SGSN-MME-15B-V505,SystemFunctions=1,BrM=1,BrmBackupManager=1,BrmBackup=BackupTest
Example Command Response:

FDN : SubNetwork=subnet_SGSN-MME-15B-V505,MeContext=SGSN-MME-15B-V505,ManagedElement=SGSN-MME-15B-V505,SystemFunctions=1,BrM=1,BrmBackupManager=1,BrmBackup=BackupTest
status : BRM_BACKUP_COMPLETE
backupName : BackupTest
creationTime : 2016-03-31T10:47:35
progressReport : {timeOfLastStatusUpdate=2016-03-31T10:47:42, result=SUCCESS, progressInfo=FINISHED, state=FINISHED, actionName=EXPORT, timeActionStarted=2016-03-31T10:47:41, progressPercentage=100, actionId=2, timeActionCompleted=2016-03-31T10:47:42, resultInfo=Backup "BackupTest" exported}
brmBackupId : BackupTest
creationType : MANUAL
swVersion : [{productNumber=CXS101289, description=, productRevision=R50L01, productionDate=2015-06-23T15:09:31, type=1, productName=SwVersion}]
1 instance(s)
View Hardware Details of a ECIM based node

Example Command:

cmedit get SubNetwork=subnet_SGSN-15B-WPP-V602,MeContext=SGSN-15B-WPP-V602,ManagedElement=SGSN-15B-WPP-V602,SystemFunctions=1,HwInventory=1,HwItem=1
Example Command Response:

FDN : SubNetwork=subnet_SGSN-15B-WPP-V602,MeContext=SGSN-15B-WPP-V602,ManagedElement=SGSN-15B-WPP-V602,SystemFunctions=1,HwInventory=1,HwItem=1 
 hwItemId : 1
licMgmtMoRef : null
vendorName : name
manualDataEntry : ACTIVE
swInvMoRef : null
serialNumber : TU8G
hwType : type
hwModel : model
hwUnitLocation :
hwCapability :
productIdentity : {productNumber=CXS101289, productRevision=E23NM1B319, productDesignation=}
equipmentMoRef : null
additionalInformation :
dateOfManufacture : Thu Nov 22 08:02:11 UTC 2007
dateOfLastService : Thu Nov 25 09:05:19 UTC 2019
hwName : name
1 instance(s)
_______________________________________________________________________________________________________________________________________________________
Tutorial: Manual sync of Inventory
< Back To Shm

ENM maintains an internal copy of the Inventory data for the node types like eNodeB DU Radio node and MGw. The inventory data involves the data related to Software, Hardware and License information. Under normal operating conditions a full synchronization of the inventory data will only occur when SHM supervision is first enabled. If for any reason it is necessary to force a manual synchronization of the inventory data, the sync action command on InventoryFunction MO can be run as described in step 1.

Note:Inventory synchronization is applicable only to the node types like eNodeB DU Radio node and MGw. In case of ECIM nodes the syncStatus attribute on InventoryFunction always defaults to UNSYNCHRONIZED. The inventory data gets synchronized through CM synchronization.

Manual Sync For Node types: eNodeB DU Radio node and MGw
Example command to do a manual sync of eNodeB DU Radio node and MGw based node(s) for Hardware Inventory

Example Command:

cmedit action NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1 synchronize.(invType=HARDWARE)
Example Command Response:

FDN : NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1
    lastSuccessfulSync : 2014-12-26 08:57:527
    inventoryFunctionId : 1
    syncStatus : SYNCHRONIZED
                
1 instance(s)
Example command to do a manual sync of eNodeB DU Radio node and MGw based node(s) for Software Inventory

Example Command:

cmedit action NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1 synchronize.(invType=SOFTWARE)
Example Command Response:

FDN : NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1
    lastSuccessfulSync : 2014-12-26 08:57:527
    inventoryFunctionId : 1
    syncStatus : SYNCHRONIZED
                    
1 instance(s)
Example command to do a manual sync of eNodeB DU Radio node and MGw based node(s) for License Inventory

Example Command:

cmedit action NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1 synchronize.(invType=LICENSE)
Example Command Response:

 FDN : NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1
    lastSuccessfulSync : 2014-12-26 08:57:527
    inventoryFunctionId : 1
    syncStatus : SYNCHRONIZED
                    
1 instance(s)
Example command to do a manual sync of eNodeB DU Radio node and MGw based node(s) for all inventories

Example Command:

cmedit action NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1 synchronize.(invType=ALL)
Example Command Response:

FDN : NetworkElement=LTE01ERBS07,SHMFunction=1,InventoryFunction=1
                    
1 instance(s)
Manual Sync for ECIM based Nodes
For ECIM based Nodes there is no specific Inventory Sync. Below Command is used to do CM Sync manually.

Example command to do a manual sync of ECIM based node

Example Command:

cmedit action NetworkElement=SGSN-MME-15B-V505,CmFunction=1 sync
Example Command Response:

SUCCESS FDN : NetworkElement=SGSN-MME-15B-V505,CmFunction=1
                    
1 instance(s)
_______________________________________________________________________________________________________________________________________________________
Enable Inventory Supervision
Context
ENM maintains an internal copy of the Inventory data for CPP based node types. This inventory data contains Software, Hardware and License information. Enabling Inventory Supervision will copy the current inventory data of the node into ENM. Enabling inventory Supervision ensures that the node will notify ENM of any inventory data changes that occur. This keeps ENM's internal copy of the inventory data in sync with the node.

Note: Inventory Supervision is applicable only for CPP based nodes. Changing the active attribute value to true (turning on inventory supervision) on InventorySupervision MO will have no effect on other node types. The inventory data gets synchronized through CM synchronization.

Workflow Outline

Enable Inventory Supervision
Verify Inventory Supervision is Enabled
Prerequisites
You are logged into ENM with shm_Administrator role.
CPP based nodes have been added to ENM.
Steps
Enable Inventory Supervision
Command Syntax to enable Inventory Supervision

cmedit set <FDN>,InventorySupervision=1 active=true
Command Example

cmedit set NetworkElement=LTE01D189ERBS00003,InventorySupervision=1 active=true
Command Result

SUCCESS FDN : NetworkElement=LTE01D189ERBS00003,InventorySupervision=1

1 instance(s) updated
Note: Inventory Supervision can also be enabled for multiple nodes or a collection of nodes as shown below:

Command Syntax to enable Inventory Supervision for multiple nodes

cmedit set <FDN1;FDN2;FDN3>,InventorySupervision=1 active=true
Command Syntax to enable Inventory Supervision for a collection of nodes

cmedit set --collection <collectionName> InventorySupervision=1 active=true
Verify Inventory Supervision is Enabled
Command Syntax to verify Inventory Supervision is Enabled

cmedit get <FDN>,InventorySupervision=1
Command Example

cmedit get NetworkElement=LTE01D189ERBS00003,InventorySupervision=1
Command Result

FDN : NetworkElement=LTE01D189ERBS00003,InventorySupervision=1
active : true
doInventorySync : false
inventorySupervisionId : 1
inventoryType : ALL

1 instance(s)
Note: To disable Inventory Supervision follow the steps in the Disable Inventory Supervision tutorial.
@@@@@manual shm software@@@@
_______________________________________________________________________________________________________________________________________________________
Import of Software Package into ENM
Drag and drop the file to be imported into the ENM CLI.

Example Drag and Drop Response:

CXP1020511_R4D26.zip added to workspace

Note 1: The target file being imported should exist.

Note 2: The target file must be of .zip, .tar or .Z format.

Import valid software package:

Example Command:

shm import -s file:CXP1020511_R4D26.zip
Example Command Response:

Import of Software Package 'CXP1020511_R4D26.zip' was successful.

Import valid software package with filename in quotes:

Example Command:

shm import -s file:"SGSNpackage1.zip"
Example Command Response:

Import of Software Package 'SGSNpackage1.zip' was successful.

Importing a software package resulting in an unknown error:

Example Command:

shm import -s file:CXP1020511_R4D26.zip
Example Command Response:

Error 13000 : Import of Software Package 'CXP1020511_R4D26.zip' failed, as there is an unexpected error occurred in the system. Please try again later or contact your system administrator.

Suggested Solution : Check the logs.

Import software package not having SMOinfo.xml file:

Example Command:

shm import -s file:CXP1020511_R4D26.zip
Example Command Response:

Error 13002 : Import of Software Package 'CXP1020511_R4D26.zip' failed, as the software package descriptor is not found.

Suggested Solution : Please check if the archive contains the descriptor file.

Note:Response is same for ECIM packages which contains nmsinfo.xml

Import software package having invalid SMOinfo.xml file:

Example Command:

shm import -s file:CXP1020511_R4D26.zip
Example Command Response:

Error 13003 : Import of Software Package 'CXP1020511_R4D26.zip' failed, as the software package descriptor [SMOinfo.xml] is malformed.

Suggested Solution : Check the syntax of the descriptor file.

Note:Response is same for ECIM packages which contains nmsinfo.xml

Import software package having invalid filename :

Example Command:

shm import -l file:SGSN1+].$.zip
Example Command Response:

Error 2001 : Command syntax error, cannot resolve the shm command

Suggested Solution : Please check online help for correct syntax.

Import software package having invalid product release date:

Example Command:

shm import -s file:CXP1020511_R4D26.zip
Example Command Response:

Error 13004 : Import of Software Package 'CXP1020511_R4D26.zip' failed, as the Release Date format is invalid.

Suggested Solution : Please check if the release date is not alphanumeric.

Import already existing software package:

Example Command:

shm import -s file:CXP1020511_R4D26.zip
Example Command Response:

Error 13005 : Import of Software Package 'CXP1020511_R4D26.zip' failed, as the software package was already imported.

Suggested Solution : Import a software package which is not imported already.
_______________________________________________________________________________________________________________________________________________________
Tutorial - Delete Upgrade Packages
< Back To Shm

Upgrade Package Details For eNodeB DU Radio Node and MGw Nodes
Obtain UpgradePackages for eNodeB DU Radio node and MGw based nodes

The following command provides the list of upgrade packages present on eNodeB DU Radio node and MGw node:

Command

cmedit get <Node FDN> UpgradePackage
Example Command

cmedit get SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008 UpgradePackage
Example Command Response

FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=1
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/19_R35EH
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/21_R38ES
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/22_R51CU
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXPLTE03ERBS00008_1
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXPLTE03ERBS00008_2
6 instance(s)
Delete Upgrade Package on eNodeB DU Radio node and MGw based node with SubNetwork

The following command deletes the upgrade package on eNodeB DU Radio node and MGw node with SubNetwork:

Use the retrieved Upgrade Package FDN in the following command

Command

cmedit delete <Upgrade Package FDN> --force
Example Command

cmedit delete SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/22_R51CU --force
Example Command Response

SUCCESS FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/22_R51CU
1 instance(s) deleted
NOTE -
The deletion can be confirmed by viewing available Upgrade Packages. See step 1 on how to view available Upgrade Packages.
If the deletion fails, check if the selected Upgrade Package has delete preventing CVs or Upgrade Packages. See steps 4 and 5.

To check if the selected Upgrade Package has any delete preventing CV on eNodeB DU Radio node and MGw based nodes

The following command provides the list of delete preventing CVs present on eNodeB DU Radio node and MGw nodes:

Command

cmedit get <Node FDN> UpgradePackage.deletePreventingCVs
Example Command

cmedit get SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008 UpgradePackage.deletePreventingCVs
Example Command Response

FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=1
deletePreventingCVs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/19_R35EH
deletePreventingCVs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/21_R38ES
deletePreventingCVs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXPLTE03ERBS00008_1
deletePreventingCVs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXPLTE03ERBS00008_2
deletePreventingCVs : []
5 instance(s)
Note - To delete ConfigurationVersion (CV) Click here

To check if the selected Upgrade Package has any delete preventing Upgrade Packages on eNodeB DU Radio node and MGw based nodes

The following command provides the list of delete preventing Upgrade Packages present on eNodeB DU Radio node and MGw nodes:

Command

cmedit get <Node FDN> UpgradePackage.deletePreventingUPs
Example Command

cmedit get SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008 UpgradePackage.deletePreventingUPs
Example Command Response

FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=1
deletePreventingUPs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/19_R35EH
deletePreventingUPs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXP102051/21_R38ES
deletePreventingUPs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXPLTE03ERBS00008_1
deletePreventingUPs : []
FDN : SubNetwork=LTE03ERBS00008,MeContext=LTE03ERBS00008,ManagedElement=1,SwManagement=1,UpgradePackage=CXPLTE03ERBS00008_2
deletePreventingUPs : []
5 instance(s)
Upgrade Package Details for ECIM Based Nodes
Obtain UpgradePackages for ECIM based node

The following command provides the list of upgrade pacakges present on ECIM node:

Command

cmedit get <NeName> UpgradePackage
Example Command

cmedit get SGSN-MME-15B-V505 UpgradePackage
Example Command Response

FDN : SubNetwork=subnet_SGSN-MME-15B-V505,MeContext=SGSN-MME-15B-V505,ManagedElement=SGSN-MME-15B-V505,SystemFunctions=1,SwM=1,UpgradePackage=TestPackage26
FDN : SubNetwork=subnet_SGSN-MME-15B-V505,MeContext=SGSN-MME-15B-V505,ManagedElement=SGSN-MME-15B-V505,SystemFunctions=1,SwM=1,UpgradePackage=TestPackage29 
2 instance(s) 
Delete Upgrade Package on ECIM based nodes

The following command deletes the upgrade package on ECIM based nodes:

Command

cmedit action <NeName> SwM removeUpgradePackage.(upgradePackage="<FDN>")
Example Command

cmedit action SGSN-MME-15B-V505 SwM removeUpgradePackage.(upgradePackage="SubNetwork=subnet_SGSN-MME-15B-V505,MeContext=SGSN-MME-15B-V505,ManagedElement=SGSN-MME-15B-V505,SystemFunctions=1,SwM=1,UpgradePackage=TestPackage26")
Example Command Response

SUCCESS FDN : SubNetwork=subnet_SGSN-MME-15B-V505,MeContext=SGSN-MME-15B-V505,ManagedElement=SGSN-MME-15B-V505,SystemFunctions=1,SwM=1
1 instance(s)
Note - The deletion can be confirmed by viewing available Upgrade Packages. See step 1 on how to view available Upgrade Packages.
_______________________________________________________________________________________________________________________________________________________
Tutorial: Delete ConfigurationVersion Available on Node
< Back To Shm

Perform the following steps to delete the Configuration Version (CV) that is present on the node for CPP based nodes

Fetch FDN details of ConfigurationVersion for CPP nodes

The following command provides the FDN details:

Command

cmedit get <NodeName> ConfigurationVersion
Example Command

cmedit get LTE02ERBS00005 ConfigurationVersion
Example Command Response

FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
1 instance(s)
Obtain ConfigurationVersion details from FDN

The following command provides the ConfigurationVersion details:

Use the above retrieved FDN in the following command.

Command

cmedit get <FDN>
Example Command

cmedit get SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
Example Command Response

FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
ConfigurationVersionId : 007
actionResult : {pathToDetailedInformation=, time=, actionId=1, mainResult=EXECUTED, configurationVersionName=, invokedAction=PUT_TO_FTP_SERVER}
additionalActionResultData : []
autoCreatedCVIsTurnedOn : true
configAdmCountdown : 130
corruptedUpgradePackages : []
currentDetailedActivity : IDLE
currentLoadedConfigurationVersion : backuptest1
currentMainActivity : IDLE
currentUpgradePackage : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,UpgradePackage=1
missingUpgradePackages : []
restoreConfirmationDeadline : CXPENM1201
rollbackInitCounterValue : 5
rollbackInitTimerValue : 30
rollbackList : [CXPENM101]
startableConfigurationVersion : backuptest1
rollbackOn : true
storedConfigurationVersions : [{identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest1, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest2, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest3, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest4, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest5, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest6, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest7, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=1, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM100, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM101, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201Yesterday, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201executing, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201Loaded, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=, operatorName=, status=OK, operatorComment=, name=UpRollback_1, date=Thu Apr 13 10:56:47 2017, type=OTHER, upgradePackageId=382}, {identity=, operatorName=, status=OK, operatorComment=, name=UpNodeReboot_NotToUse_2, date=Thu Apr 13 10:57:47 2017, type=OTHER, upgradePackageId=3628}, {identity=, operatorName=, status=OK, operatorComment=, name=UpFinal_CXP102051%1_R4D71_3, date=Thu Apr 13 11:05:42 2017, type=OTHER, upgradePackageId=3628}]
timeForAutoCreatedCV : 10:00
userLabel : BakupInventoryforENM
1 instance(s)
Delete ConfigurationVersion (CV) that is present on the node

The following command deletes the ConfigurationVersion on the node:

Command

cmedit get <NodeName> ConfigurationVersion
Example Command

cmedit get LTE02ERBS00005 ConfigurationVersion
Example Command Response

FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
Use the above retrieved FDN in the following command.

Command

cmedit action <FDN> delete.(configurationVersionName="<backupname>")
Example Command

cmedit action SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1 delete.(configurationVersionName="backuptest5")
Example Command Response

SUCCESS FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
1 instance(s)
NOTE - The deletion can be confirmed by looking at the Backup Administration of the corresponding node in SHM UI.
@@@@@manual shm other@@@@
_______________________________________________________________________________________________________________________________________________________
Tutorial: Backup Operations
< Back To Shm

Create a backup on the node

shm backup --nodes <NeName/FDN> --backupname <BackupName>
shm backup -n <NeName/FDN> -bn <BackupName>
NeName Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest01
Example Command Response

Backup is initiated on specified nodes with job name: Shm_Cli_BACKUP_administrator_1476786515616
FDN Example Command

shm backup -n NetworkElement=LTE02ERBS00002 -bn CliBackupTest23
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476797439589
Create a backup on multiple nodes

shm backup --nodes <NeName/FDN1;NeName/FDN2> --backupname <BackupName> or shm backup -n <NeName/FDN1;NeName/FDN2> -bn <BackupName>
shm backup --collection <CollectionName> --backupname <BackupName> or shm backup -co <CollectionName>  -bn <BackupName>
shm backup --savedsearch <SavedSearchName> --backupname <BackupName> or shm backup -ss <SavedSearchName>  -bn <BackupName>
NeName Example Command

shm backup -n LTE02ERBS00002;SGSN-16A-CP01-V101 -bn CliBackupTest04 -dt Domain/type
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476786765187
FDN Example Command

shm backup -n NetworkElement=LTE02ERBS00002;NetworkElement=LTE02ERBS00003 -bn CliBackupTest30
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476862636891
Collection Example Command

shm backup -co erbsCollection -bn CliBackupTest124
Example Command Response

Backup is initiated on specified collection with job name: Shm_Cli_BACKUP_administrator_1476798138776
SavedSearch Example Command

shm backup -ss saved_Search -bn CliBackupTest29
Example Command Response

Backup is initiated on specified SavedSearch with job name: Shm_Cli_BACKUP_administrator_1476807929933
Create a backup with Wild card

shm backup --nodes <NeName/FDN>* --backupname <BackupName>
shm backup -n <NeName/FDN>* -bn <BackupName>
Example Command

shm backup -n LTE02ERBS0* -bn CliBackupTest03
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476786595469
Create a backup on the node with the specified job name.

shm backup --nodes <NeName/FDN> --backupname <BackupName> --jobname <JobName>
shm backup -n <NeName/FDN> -bn <BackupName> -jn <JobName>
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest05 -jn CliJobTest01
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest01
When existing job name is specified, error message is displayed

Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest05 -jn CliJobTest01
Example Command Response

Error 13200 : Creation of job failed, as there is another job created with the same name.
Suggested Solution : Please check online help
Create a backup on the node with options job name and job description.

shm backup --nodes <NeName/FDN> --backupname <BackupName> --jobname <JobName> --jobdescr "<JobDescription>"
shm backup -n <NeName/FDN> -bn <BackupName> -jn <JobName> -jd "<JobDescription>"
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest06 -jn CliJobTest02 -jd "CliJobDescription"
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest02
Create a backup on the node with options job name and job comment.

shm backup --nodes <NeName/FDN> --backupname <BackupName> --jobname <JobName> --jobcomment "<JobComment>"
shm backup -n <NeName/FDN> -bn <BackupName> -jn <JobName> -jc "<JobComment>"
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest29 -jn CliJobTest29 -jc "CliJobComment"
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest29
Create a backup on the node with options job name and backup comment.

shm backup --nodes <NeName/FDN> --backupname <BackupName> --backupcomment "<BackupComment>" --jobname <JobName>
shm backup -n <NeName/FDN> -bn <BackupName> -bc "<BackupComment>" -jn <JobName>
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest29 -bc "backup Comment" -jn CliJobTest29 
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest29
Create a backup on the node with and upload to ENM

shm backup --nodes <NeName/FDN> --backupname <BackupName> --upload
shm backup -n <NeName/FDN> -bn <BackupName> -u
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest24 -u
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476799199735
Create a backup on the node with the specified backup type (Applicable for CPP nodes only)

shm backup --nodes <NeName/FDN> --backupname <BackupName> --type <BackupType>
shm backup -n <NeName/FDN> --backupname <BackupName> -ty <BackupType>
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest25 -ty STANDARD
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476799521741
Create a backup with the specified domainbackuptype (Applicable for ECIM nodes only)

shm backup --nodes <NeName/FDN> --backupname <BackupName> --domainbackuptype <domain/type>
shm backup -n <NeName/FDN> -bn <BackupName> -dt <domain/type>
Example Command

shm backup -n SGSN-16A-CP01-V101 -bn CliBackupTest26 -dt Domain/Type
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476800663071
Create a backup which is set as startable and first in rollback list

shm backup --nodes <NeName/FDN> --backupname <BackupName> --startable --firstinrollback
shm backup -n <NeName/FDN> --backupname <BackupName> -st -fr
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest27 -st -fr
Example Command Response

Backup is initiated on specified node(s) with job name: Shm_Cli_BACKUP_administrator_1476805266447
Create a backup with the options jobname, type, domainbackuptype, upload, startable and firstinrollback list

shm backup --nodes <NeName/FDN> --backupname <BackupName> --jobname <JobName> --type<BackupType> --domainbackuptype <domain/type> --upload --startable --firstinrollback
shm backup -n <NeName/FDN> -bn <BackupName> -jn <JobName> -ty <BackupType> -dt <domain/type> -u -st -fr
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest28 -jn CliJobTest26 -ty STANDARD -dt Domain/Type -u -st -fr
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest26
Create a scheduled backup job with the options jobname and begin

shm backup --nodes <NeName/FDN> --backupname <BackupName> --jobname <JobName> --begin <ScheduleStartTime>
shm backup -n <NeName/FDN> -bn <BackupName> -jn <JobName> -b <ScheduleStartTime>
Example Command

shm backup -n LTE02ERBS00002 -bn CliBackupTest11 -jn CliJobTest07 -b 2016-10-18T11:47:00
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest07
Create a periodic backup job with the options jobname and repeat

shm backup --nodes <NeName/FDN> --backupname <BackupName> --jobname <JobName> --repeat <CronExpression>
shm backup -n <NeName/FDN> -bn <BackupName> -jn <JobName> -rt <CronExpression>
Example Command - To trigger at 12pm every day

shm backup -n LTE02ERBS00002 -bn CliBackupTest12 -jn CliJobTest16 -rt 0 0 12 1/1 * ?
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest16
Example Command - To trigger at 9:15 AM on the 15th day of every month

shm backup -n LTE02ERBS00002 -bn CliBackupTest13 -jn CliJobTest17 -rt 0 15 9 15 * ?
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest17
Example Command - To trigger every minute starting at 2:00 PM every day

shm backup -n LTE02ERBS00002 -bn CliBackupTest14 -jn CliJobTest18 -rt 0 * 14 * * ?
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command.
Suggested Solution : Please check online help for correct syntax.
If periodicity is less than one day, error message is displayed

Example Command - To trigger at 2:10 PM and at 2:44 PM every Wednesday in the month of March

shm backup -n LTE02ERBS00002 -bn CliBackupTest15 -jn CliJobTest19 -rt 0 10,44 14 ? 3 WED
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command.
Suggested Solution : Please check online help for correct syntax.
If periodicity is less than one day, error message is displayed

Example Command - To trigger every minute starting at 2:00 PM and ending at 2:05 PM, every day

shm backup -n LTE02ERBS00002 -bn CliBackupTest16 -jn CliJobTest20 -rt 0 0-5 14 * * ?
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command.
Suggested Solution : Please check online help for correct syntax.
If periodicity is less than one day, error message is displayed

Create a periodic backup job with end date with the options jobname, repeat and end

shm backup --nodes <NeName/FDN> --backupname <BackupName> --jobname <JobName> --repeat <CronExpression> --end <EndTime>
shm backup -n <NeName/FDN> -bn <BackupName> -jn <JobName> -rt <CronExpression> -e <EndTime>
Example Command - To trigger at 11:58am every day ending on 2016-10-21 at 11:50am

shm backup -n LTE02ERBS00002 -bn CliBackupTest14 -jn CliJobTest10 -rt 0 58 11 1/1 * ? * -e 2016-10-21T11:50:00
Example Command Response

Backup is initiated on specified node(s) with job name: CliJobTest10
When shm backup is executed by the user with insufficient privileges, error message will be displayed.

Example Command

shm backup -n LTE02ERBS00006 -bn CliBackup009
Example Command Response

Error 13902 : Insufficient access rights to perform the operation
Suggested Solution : If operation is required to be performed by the current user, the user profile must be updated by the system administrator.
When user executes the command with incorrect syntax, error message is displayed.

Example Command

shm backup -n LTE02ERBS00006 -b CliBackup009
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
If optional parameters are repeated in the command.

Example Command:

shm backup -n LTE02ERBS00006 -bn CliBackup009 -bn CliBackup009
Example Command Response:

Error 13903 : Command Syntax error, Optional parameters are repeated
Suggested Solution : Please check online help for correct syntax
User must not enter any CLI command as input for any values in backup job. Otherwise, an error message is displayed.

Example Command

shm backup -n LTE02ERBS00003 -bn CliBackup007 -jn backup -dt Domain/Type -ty STANDARD -u -st -fr
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
_______________________________________________________________________________________________________________________________________________________
Tutorial: Restore Operations
< Back To Shm

Restore Operations for eNodeB DU Radio Node and MGw Nodes
Perform the following steps to restore Configuration Version (CV) that is present on the node with the state other than DOWNLOADED

Obtain the list of CVs present on the node
Set the required CV as startable on the node
Perform Manual Restart of the node
The steps are described further in detail below.

Obtain the list of CVs present on the Node

storedConfigurationVersions - It lists the stored configuration versions in the node. These CVs are stored and read from the file system.

The CV list is formatted as a sequence of ConfigurationVersionAttributes. Each structure contains one CV with the following fields:

- name

- identity

- type

- upgrade package id

- operator name

- operator comment

- date

- status

The following command lists the configuration versions present on eNodeB DU Radio node and MGw based nodes:

Command

cmedit get <Node FDN> ConfigurationVersion.(storedConfigurationVersions)
Example Command

cmedit get SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005 ConfigurationVersion.(storedConfigurationVersions)
Example Command Response

FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
storedConfigurationVersions : [{identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest1, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest2, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest3, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest4, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest5, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest6, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest7, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=1, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM100, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM101, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201Yesterday, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201executing, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201Loaded, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=, operatorName=, status=OK, operatorComment=, name=UpRollback_1, date=Thu Apr 13 10:56:47 2017, type=OTHER, upgradePackageId=382}, {identity=, operatorName=, status=OK, operatorComment=, name=UpNodeReboot_NotToUse_2, date=Thu Apr 13 10:57:47 2017, type=OTHER, upgradePackageId=3628}, {identity=, operatorName=, status=OK, operatorComment=, name=UpFinal_CXP102051%1_R4D71_3, date=Thu Apr 13 11:05:42 2017, type=OTHER, upgradePackageId=3628}] 
1 instance(s)
Set the required CV as Startable on the Node

Specifies the CV to use at the normal node restarts. Only a CV with status = OK can be set as startable.

A check must be made if the CV under consideration is already set as startable on the node. To confirm, execute the following command.

Command

cmedit get <Node Name> ConfigurationVersion
Example Command

cmedit get LTE02ERBS00007 ConfigurationVersion
Example Command Response

FDN : SubNetwork=LTE02ERBS00007,MeContext=LTE02ERBS00007,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
Use the retrieved FDN in the following command

Command

cmedit get <FDN> ConfigurationVersion.startableConfigurationVersion
Example Command

cmedit get SubNetwork=LTE02ERBS00007,MeContext=LTE02ERBS00007,ManagedElement=1,SwManagement=1,ConfigurationVersion=1 ConfigurationVersion.startableConfigurationVersion
Example Command Response

FDN : SubNetwork=LTE02ERBS00007,MeContext=LTE02ERBS00007,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
startableConfigurationVersion : Backup_14042017075438
1 instance(s)
If the CV is not found in startableConfigurationVersion detail above, then it can be set as startable using any of the following alternatives.

Set a CV as startable while creating the backup in SHM UI.

Refer to the section Backup Activities of Create BackUp Job Tutorials.

Set the CV as startable using manage backups in SHM UI.

Refer to the section Backup Operations of Backup Administration Tutorials.

Set the CV as startable using ENM CLI

Command

cmedit get <Node Name> ConfigurationVersion
Example Command

cmedit get LTE02ERBS00007 ConfigurationVersion
Example Command Response

FDN : SubNetwork=LTE02ERBS00007,MeContext=LTE02ERBS00007,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
Command

cmedit action <retrieved FDN> setStartable.(configurationVersionName=<cv_name>) 
Example Command

cmedit action SubNetwork=LTE02ERBS00007,MeContext=LTE02ERBS00007,ManagedElement=1,SwManagement=1,ConfigurationVersion=1 setStartable.(configurationVersionName=Backup_14042017075438)
Example Command Response

SUCCESS FDN : SubNetwork=LTE02ERBS00007,MeContext=LTE02ERBS00007,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
1 instance(s)
Perform Manual Restart of the Node

Perform Manual Restart by choosing anyone of the restart ranks such as warm, refresh, or cold

warm (optional) - If the restart rank is warm, it means the hanging software is released

refresh (optional) - If the restart rank is refresh, it means all software is reloaded

cold (optional) - If the restart rank is cold, it means the hanging hardware is released and soft memory errors are repaired

restartReason - It is one of the following predefined numeric values:

PLANNED_RECONFIGURATION

UNPLANNED_NODE_EXTERNAL_PROBLEMS

UNPLANNED_NODE_UPGRADE_PROBLEMS

UNPLANNED_O_AND_M_ISSUE

UNPLANNED_CYCLIC_RECOVERY

UNPLANNED_LOCKED_RESOURCES

UNPLANNED_COLD_WITH_HW_TEST

UNPLANNED_CALL_PROCESSING_DEGRADATION

UNPLANNED_LOW_COVERAGE

optRestartReason

optRestartReason(optional) - It is optional restart information comment which cannot exceed 80 characters.

help (optional) - It displays the general usage syntax of this operation

The following command performs manual restart:

Command

cmedit action <Node FDN> manualRestart.(restartRank="<RestartRank>",restartReason="<RestartReason>",restartInfo="<RestartInfo>") --force
Example Command

cmedit action SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1 manualRestart.(restartRank="RESTART_COLD", restartReason="PLANNED_RECONFIGURATION",restartInfo="Restart for CV restore") --force 
Example Command Response

SUCCESS FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1
1 instance(s)
Restore Operations for ECIM Nodes
Obtain the list of Backups present on the node

Command

cmedit get <NeName> BrmBackup
Example Command

cmedit get SGSN-16A-CP01-V101 BrmBackup
Example Command Response

FDN : SubNetwork=subnet_SGSN-16A-CP01-V101,MeContext=SGSN-16A-CP01-V101,ManagedElement=SGSN-16A-CP01-V101,SystemFunctions=1,BrM=1,BrmBackupManager=1,BrmBackup=Backup_14122016081346

FDN : SubNetwork=subnet_SGSN-16A-CP01-V101,MeContext=SGSN-16A-CP01-V101,ManagedElement=SGSN-16A-CP01-V101,SystemFunctions=1,BrM=1,BrmBackupManager=1,BrmBackup=Backup_15122016190643

FDN : SubNetwork=subnet_SGSN-16A-CP01-V101,MeContext=SGSN-16A-CP01-V101,ManagedElement=SGSN-16A-CP01-V101,SystemFunctions=1,BrM=1,BrmBackupManager=1,BrmBackup=Backup_15122016190808
3 instance(s)
Restore BackUp

Use one of the retrieved FDNs that you want to restore among the backups in the following command.

Command

cmedit action <FDN> restore
Example Command

cmedit action SubNetwork=subnet_SGSN-16A-CP01-V101,MeContext=SGSN-16A-CP01-V101,ManagedElement=SGSN-16A-CP01-V101,SystemFunctions=1,BrM=1,BrmBackupManager=1,BrmBackup=Backup_15122016190643 restore
Example Command Response

SUCCESS FDN : SubNetwork=subnet_SGSN-16A-CP01-V101,MeContext=SGSN-16A-CP01-V101,ManagedElement=SGSN-16A-CP01-V101,SystemFunctions=1,BrM=1,BrmBackupManager=1,BrmBackup=Backup_15122016190643
1 instance(s)
_______________________________________________________________________________________________________________________________________________________
Tutorial: Delete ConfigurationVersion Available on Node
< Back To Shm

Perform the following steps to delete the Configuration Version (CV) that is present on the node for CPP based nodes

Fetch FDN details of ConfigurationVersion for CPP nodes

The following command provides the FDN details:

Command

cmedit get <NodeName> ConfigurationVersion
Example Command

cmedit get LTE02ERBS00005 ConfigurationVersion
Example Command Response

FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
1 instance(s)
Obtain ConfigurationVersion details from FDN

The following command provides the ConfigurationVersion details:

Use the above retrieved FDN in the following command.

Command

cmedit get <FDN>
Example Command

cmedit get SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
Example Command Response

FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
ConfigurationVersionId : 007
actionResult : {pathToDetailedInformation=, time=, actionId=1, mainResult=EXECUTED, configurationVersionName=, invokedAction=PUT_TO_FTP_SERVER}
additionalActionResultData : []
autoCreatedCVIsTurnedOn : true
configAdmCountdown : 130
corruptedUpgradePackages : []
currentDetailedActivity : IDLE
currentLoadedConfigurationVersion : backuptest1
currentMainActivity : IDLE
currentUpgradePackage : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,UpgradePackage=1
missingUpgradePackages : []
restoreConfirmationDeadline : CXPENM1201
rollbackInitCounterValue : 5
rollbackInitTimerValue : 30
rollbackList : [CXPENM101]
startableConfigurationVersion : backuptest1
rollbackOn : true
storedConfigurationVersions : [{identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest1, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest2, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest3, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest4, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest5, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest6, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=backuptest7, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=1, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM100, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM101, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201Yesterday, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201executing, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=someidentity, operatorName=shmtest, status=OK, operatorComment=someComment, name=CXPENM1201Loaded, date=Thu Jun 21 17:32:05 2007, type=STANDARD, upgradePackageId=382}, {identity=, operatorName=, status=OK, operatorComment=, name=UpRollback_1, date=Thu Apr 13 10:56:47 2017, type=OTHER, upgradePackageId=382}, {identity=, operatorName=, status=OK, operatorComment=, name=UpNodeReboot_NotToUse_2, date=Thu Apr 13 10:57:47 2017, type=OTHER, upgradePackageId=3628}, {identity=, operatorName=, status=OK, operatorComment=, name=UpFinal_CXP102051%1_R4D71_3, date=Thu Apr 13 11:05:42 2017, type=OTHER, upgradePackageId=3628}]
timeForAutoCreatedCV : 10:00
userLabel : BakupInventoryforENM
1 instance(s)
Delete ConfigurationVersion (CV) that is present on the node

The following command deletes the ConfigurationVersion on the node:

Command

cmedit get <NodeName> ConfigurationVersion
Example Command

cmedit get LTE02ERBS00005 ConfigurationVersion
Example Command Response

FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
Use the above retrieved FDN in the following command.

Command

cmedit action <FDN> delete.(configurationVersionName="<backupname>")
Example Command

cmedit action SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1 delete.(configurationVersionName="backuptest5")
Example Command Response

SUCCESS FDN : SubNetwork=LTE02ERBS00005,MeContext=LTE02ERBS00005,ManagedElement=1,SwManagement=1,ConfigurationVersion=1
1 instance(s)
NOTE - The deletion can be confirmed by looking at the Backup Administration of the corresponding node in SHM UI.
_______________________________________________________________________________________________________________________________________________________
Tutorial: Node Restart Job
< Back To Shm

Restart a node

shm restart --nodes <NeName/FDN> --reason <ReasonValue>
shm restart -n <NeName/FDN> -rn <ReasonValue>
Example Command

shm restart -n LTE05ERBS00003 -rn PLANNED_RECONFIGURATION
Example Command Response



To execute the command after preview has been displayed the user can click Execute or issue the command again with the option '-- force'

On clicking Execute, the following response is displayed.



Example Command

shm restart -n LTE05ERBS00003 -rn PLANNED_RECONFIGURATION --force
Example Command Response

NodeRestart is initiated on the specified nodes with job name: Shm_Cli__NODERESTART_administrator_1475226246556
Restart a node with the specified job name

shm restart --nodes <NeName/FDN> --reason <ReasonValue> --jobname <JobName> --force
shm restart -n <NeName/FDN> -rn <ReasonValue> -jn <JobName> --force
Example Command

shm restart -n TESTERBS00006 -rn PLANNED_RECONFIGURATION -jn JOB_NAME_01 --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: JOB_NAME_01
When existing job name is specified, error message is displayed

Example Command

shm restart -n TESTERBS00006 -rn PLANNED_RECONFIGURATION -jn JOB_NAME_01 --force
Example Command Response

Error 13200 : Creation of job failed, as there is another job created with the same name.
Suggested Solution : Please check online help.
Restart multiple nodes

shm restart --nodes <NeName1;NeName2> --reason <ReasonValue> or shm restart -n <NeName1;NeName2> -rn <ReasonValue> --force
shm restart --collection <CollectionName> -rn <ReasonValue> or shm restart -co <CollectionName> -rn <ReasonValue> --force
shm restart --savedsearch <SavedSearchName> -rn <ReasonValue> or shm restart -ss <SavedSearchName> -rn <ReasonValue> --force
Example Command

shm restart --nodes TESTERBS00009;TESTERBS00010;TESTERBS00011 --reason PLANNED_RECONFIGURATION --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: Shm_Cli__NODERESTART_administrator_1475226928840
Example Command

shm restart -n NetworkElement=TESTERBS00005;NetworkElement=TESTERBS00006;NetworkElement=TESTERBS00007 -rn PLANNED_RECONFIGURATION --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: Shm_Cli__NODERESTART_administrator_1475226894995
Example Command

shm restart -co mycollection -rn UNPLANNED_CYCLIC_RECOVERY --force
Example Command Response

NodeRestart is initiated on specified collection with job name: Shm_Cli__NODERESTART_administrator_1475227026611
Example Command

shm restart -ss mySavedSearch -rn UNPLANNED_CYCLIC_RECOVERY --force
Example Command Response

NodeRestart is initiated on specified SavedSearch with job name: Shm_Cli__NODERESTART_administrator_1475227026611
Restart the node with Wild card nes

shm restart --nodes <NeName/FDN>* --reason <ReasonValue> --force
shm restart -n <NeName/FDN>* --rn <ReasonValue> --force
Example Command

shm restart -n LTE02ERBS0* -rn PLANNED_RECONFIGURATION --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: CliRestartTest
Restart the node with specified rank

shm restart --nodes <NeName/FDN> --reason <ReasonValue> --rank <rank_value> --force
shm restart -n <NeName/FDN> -rn <ReasonValue> -r <rank_value> --force
Example Command

shm restart -n TESTERBS00022 -rn PLANNED_RECONFIGURATION -r RESTART_COLD --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: Shm_Cli__NODERESTART_administrator_1475229770710
Restart the node with specified additional information

shm restart --nodes <NeName/FDN> --reason <ReasonValue> --addnlinfo <AdditionalInformation> --force
shm restart -n <NeName/FDN> -rn <ReasonValue> -i <AdditionalInformation> --force
Example Command

shm restart -n TESTERBS00026 -rn PLANNED_RECONFIGURATION -i noderestart_additionalInfo --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: Shm_Cli__NODERESTART_administrator_1475231506359
Restart the node with specified rank, additional information, job name and job description

shm restart --nodes <NeName/FDN> --reason <ReasonValue> --rank <rank_value> --addnlinfo <AdditionalInformation> --force  --jobname <JobName> --jobdescr "<job_description>"
shm restart -n <NeName/FDN> -rn <ReasonValue> -r <rank_value> -i <AdditionalInformation> --force -jn <JobName> --jd "<job_description>"
Example Command

shm restart -n TESTERBS00026 -rn PLANNED_RECONFIGURATION -r RESTART_WARM -i noderestart_additionalInfo --force -jn addInfo_test01 -jd "restartjobwithallparams"
Example Command Response

NodeRestart is initiated on specified nodes with job name: addInfo_test01
Create a scheduled node restart job with the options jobname and begin

shm restart --nodes <NeName/FDN> --reason <ReasonValue> --force –-jobname <JobName> --begin <ScheduleStartTime>
shm restart -n <NeName/FDN> -rn <ReasonValue> --force –jn <JobName> -b <ScheduleStartTime>
Example Command

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION --force -jn CliJobTest07 -b 2016-10-18T11:47:00
Example Command Response

NodeRestart is initiated on specified nodes with job name: CliJobTest07
Create a periodic node restart job with the options jobname and repeat

shm restart --nodes <NeName/FDN> --reason <ReasonValue> –-jobname <JobName> --repeat <CronExpression> --force
shm restart -n <NeName/FDN> -rn <ReasonValue> –jn <JobName> -rt <CronExpression> --force
Example Command - To trigger at 12pm every day

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn CliJobTest11 -rt 0 0 12 1/1 * ? * --force 
Example Command Response

NodeRestart is initiated on specified nodes with job name: CliJobTest11
Example Command - To trigger at 9:15 AM on the 15th day of every month

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn CliJobTest12 -rt 0 15 9 15 * ? * --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: CliJobTest12
Example Command - To trigger every minute starting at 2:00 PM every day

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn CliJobTest13 -rt 0 * 14 * * ? --force
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command.
Suggested Solution : Please check online help for correct syntax.
If periodicity is less than one day, error message is displayed

Example Command - To trigger at 2:10 PM and at 2:44 PM every Wednesday in the month of March

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn CliJobTest14 -rt 0 10,44 14 ? 3 WED --force
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command.
Suggested Solution : Please check online help for correct syntax.
If periodicity is less than one day, error message is displayed

Example Command - To trigger every minute starting at 2:00 PM and ending at 2:05 PM, every day

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn CliJobTest15 -rt 0 0-5 14 * * ? --force
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command.
Suggested Solution : Please check online help for correct syntax.
If periodicity is less than one day, error message is displayed

Create a periodic node restart job with end date with the options jobname, repeat and end

shm restart --nodes <NeName/FDN> --reason <ReasonValue> –-jobname <JobName> --repeat <CronExpression> --end <EndTime> --force
shm restart -n <NeName/FDN> -rn <ReasonValue> –jn <JobName> -rt <CronExpression> -e <EndTime> --force
Example Command - To trigger at 11:58am every day ending on 2016-10-21 at 11:50am

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn CliJobTest10 -rt 0 58 11 1/1 * ? * -e 2016-10-21T11:50:00 --force
Example Command Response

NodeRestart is initiated on specified nodes with job name: CliJobTest10
When shm restart is executed by the user with insufficient privileges, error message will be displayed.

Example Command

shm restart -n NetworkElement=TESTERBS00026 -rn PLANNED_RECONFIGURATION -r RESTART_WARM -i noderestart_additionalInfo -jn addInfo_test03 --force
Example Command Response

Error 13902 : Insufficient access rights to perform the operation
Suggested Solution : If operation is required to be performed by the current user, the user profile must be updated by the system administrator.
When user executes the command with incorrect syntax, error message is displayed.

Example Command

shm restart -N TESTERBS00020 --REA UNPLANNED_LOW_COVERAGE --force
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
If optional parameters are repeated in the command.

Example Command:

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn restartjob -jn restartjob --force
Example Command Response:

Error 13903 : Command Syntax error, Optional parameters are repeated
Suggested Solution : Please check online help for correct syntax
Example Command:

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION --force --force
Example Command Response:

Error 13903 : Command Syntax error, Optional parameters are repeated
Suggested Solution : Please check online help for correct syntax
When user executes the command with collection name contains *, error message is displayed.

Example Command

shm restart -co myCollection* -rn planned_reconfiguration --force
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
When user executes the command with saved search name contains *, error message is displayed.

Example Command

shm restart -ss mySavedSearch* -rn planned_reconfiguration --force
Example Command Response:

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
When user executes the command with job name as test/ other/ standard, error message is displayed.

Example Command

shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn test --force
shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn other --force
shm restart -n LTE02ERBS00002 -rn PLANNED_RECONFIGURATION -jn standard --force
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
When user executes the command with wrong restart reason, error message is displayed.

Example Command

shm restart -n LTE02ERBS00005 -rn PLANNING_RECONFIGURATION -jn restartjob --force
Example Command Response

Error 13250 : Invalid Restart Reason
Suggested Solution : Please check online help.
When user executes the command with wrong restart rank, error message is displayed.

Example Command

shm restart -n LTE02ERBS00005 -rn PLANNED_RECONFIGURATION -r restart_wa --force
Example Command Response

Error 13251 : Invalid Restart Rank
Suggested Solution : Please check online help.
User should not enter any CLI command keyword as an input for any optional values in restart job else error message is displayed.

Example Command

shm restart -n LTE02ERBS00005 -rn PLANNED_RECONFIGURATION -r restart --force
shm restart -n LTE02ERBS00005 -rn PLANNED_RECONFIGURATION -jn restart --force
shm restart -n LTE02ERBS00005 -rn PLANNED_RECONFIGURATION -i status --force
shm restart -n LTE02ERBS00005 -rn PLANNED_RECONFIGURATION -jd backup --force
Example Command Response

Error 2001 : Command Syntax error, cannot resolve the shm command
Suggested Solution : Please check online help for correct syntax.
_______________________________________________________________________________________________________________________________________________________
Tutorial: Node Restart Commands for Baseband Nodes
< Back To Shm

Restart a Baseband Radio Node
Obtain FieldReplaceableUnit for Baseband nodes

The following command provides the list of FieldReplaceableUnits present on Baseband nodes:

cmedit get <NeName> FieldReplaceableUnit

Example Command

cmedit get G2RBS_27 FieldReplaceableUnit
Example Command Response

FDN : MeContext=G2RBS_27,ManagedElement=G2RBS_27,Equipment=1,FieldReplaceableUnit=1
FDN : MeContext=G2RBS_27,ManagedElement=G2RBS_27,Equipment=1,FieldReplaceableUnit=2
Perform restart action on a FieldReplaceableUnit of a Baseband Radio node.

The following command performs restart action on the specified FieldReplaceableUnit FDN of a Baseband Radio node:

cmedit action <FDN> restartUnit.(restartRank=<Restart Rank>, restartReason=<Restart Reason>, restartInfo=<Restart Information>) --force
restartRank: The restart rank.
RESTART_WARM: Restarts the MO with the same software. The software is not reloaded from the disk. The traffic is affected least as warm restart is faster and no hardware is reset.
RESTART_COLD: Reloads the software from the disk, restarts the MO, and resets all hardware. The traffic of restart cold is more affected than that of restart warm.
RESTART_COLDWTEST: Reloads the software from the disk, restarts the MO, and resets and tests the hardware. The traffic is affected most.
restartReason: The reason for the restart.
PLANNED_RECONFIGURATION: Restart ordered to perform planned activities such as reconfigurations.
UNPLANNED_NODE_EXTERNAL_PROBLEMS: Restart ordered to resolve node external problems.
UNPLANNED_NODE_UPGRADE_PROBLEMS: Restart ordered to resolve upgrade problems.
UNPLANNED_O_AND_M_ISSUE: Restart ordered to resolve O&M issues.
UNPLANNED_CYCLIC_RECOVERY: Restart ordered to stop further auto recovery attempts.
UNPLANNED_LOCKED_RESOURCES: Restart ordered to release locked resources.
UNPLANNED_COLD_WITH_HW_TEST: Restart ordered to perform HW tests.
UNPLANNED_CALL_PROCESSING_DEGRADATION: Restart ordered to improve Call Set Up or Call Drop Rate.
UNPLANNED_LOW_COVERAGE: Restart ordered to improve Cell Availability.
OPERATOR_CLASSIFIED_PROBLEMS: Restart ordered to resolve procedural errors or office environmental problems.
restartInfo: A free text field where extra information can be added.
Example Command

cmedit action MeContext=G2RBS_27,ManagedElement=G2RBS_27,Equipment=1,FieldReplaceableUnit=1 restartUnit.(restartRank="RESTART_COLD", restartReason="PLANNED_RECONFIGURATION",restartInfo="Restart for node") --force
Example Command Response

SUCCESS FDN : MeContext=G2RBS_27,ManagedElement=G2RBS_27,Equipment=1,FieldReplaceableUnit=1
@@@@@manual config@@@@
Notes
The config command set allows a user to access the ENM Configuration Handling feature. ENM Configuration Handling allows a user to modify and validate configuration data in a non-live configuration area before activating the data to the network.

A live configuration is the ENM model of the current (live) configuration of the network. This is automatically created by ENM and cannot be deleted by a user.

A non-live configuration is the ENM model of a set of planned changes to the network. Non-live configurations can be created and deleted by the user.

Configuration Handling enables the user to perform the following:
List all configurations.
Create a non-live configuration. The non-live configuration is empty when created and the user must copy in the CM data for the network elements to be edited in the non-live configuration. The user can perform this in the following two ways:
Explicit copy: Using the copy command in this config command set.
Implicit copy: Whereby a Bulk CM import automatically copies the network elements impacted by the import file into the non-live configuration, if they are not already present.
Copy CM data for one or more network elements into a non-live configuration. Note that the copy command creates a static "snapshot" in the non-live configuration of the nodes at the time they were copied, and this is not updated if the source configuration subsequently changes. There is no link between the configurations. In particular, if nodes are copied from the live configuration, any subsequent changes in the live configuration will not be reflected in the non-live configuration.
Compare the CM data for one or more network elements in a non-live configuration against the live configuration or another non-live configuration.
Display the history of CM data changes made to one or more network elements in a non-live configuration.
Display the history of CM data changes made to one or more network elements in the live configuration made by activation of non-live configurations.
Activate the CM changes for one or more network elements from a non-live configuration to the live configuration and to the network. Note that the activate command only applies changes made in a non-live configuration to the live configuration and is not aware of differences between the non-live configuration and the live configuration. In particular, an individual change can only be successfully activated once, if the live configuration is subsequently updated to undo the change, the change will not be reapplied by activating the non-live configuration again.
Generate an import file which can be used to undo the configuration management changes resulting from the activation of non-live configurations.
Delete a non-live configuration. This automatically discards any unactivated CM changes in the non-live configuration.

_______________________________________________________________________________________________________________________________________________________
How to Create a Non-Live Configuration
Context
< Back To Config

This tutorial describes how to create a non-live configuration.
The specified configuration name cannot already exist. It must start with a letter, numeral or underscore.
It can contain any other combination of letters, numerals, underscores or hyphen-minus (Unicode: U+002D).
The following are examples of valid names:

• config_7
• Config7
• _config-7

The following are examples of invalid names:

• -config Begins with hyphen-minus
• config@ Invalid character '@'

Prerequisites
Non-Live Configurations exist.
Steps
Create a non-live configuration named config_1
config create config_1
The command creates an empty non-live configuration named config_1

List configurations
config list
The command returns a list of all configurations:

Name
Live
config_1
2 config(s)

_______________________________________________________________________________________________________________________________________________________
Tutorial: Copy Configurations
< Back To Config

Copy list of node names into an empty configuration

Example Command:

    config copy --ne ENODEB_1;ENODEB_2 --source config1 --target config2
Example Command Response:

    Copy nodes started with job ID 1
Enter command to check status of job using returned Job ID:

    config copy --status --job 1
Status Command Response:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
1
COMPLETED
2014-11-26T11:56:44
2014-11-26T11:56:49
0h 0m 5s
2
2
0
0
Enter command to check the verbose status of job using returned Job ID:

    config copy --status --job 1 --verbose
Status Command Response with Verbose:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
1
COMPLETED
2014-11-26T11:56:44
2014-11-26T11:56:49
0h 0m 5s
2
2
0
0
Node status
Node name
Copy status
Copy status message
FDN
ENODEB_1
COPIED
MeContext=ENODEB_1
ENODEB_2
COPIED
MeContext=ENODEB_2
Copy list of Collection names into an empty configuration

Example Command:

    config copy --collection collectionName_1;CollectionName_2 --source config1 --target config2
Example Command Response:

    Copy nodes started with job ID 1
Enter command to check status of job using returned Job ID:

    config copy --status --job 1
Status Command Response:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
1
COMPLETED
2017-03-23T10:56:44
2017-03-23T10:56:49
0h 0m 5s
2
2
0
0
Enter command to check the verbose status of job using returned Job ID:

    config copy --status --job 1 --verbose
Status Command Response with Verbose:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
1
COMPLETED
2017-03-23T10:56:44
2017-03-23T10:56:49
0h 0m 5s
2
2
0
0
Node status
Node name
Copy status
Copy status message
FDN
ENODEB_5
COPIED
MeContext=ENODEB_5
ENODEB_6
COPIED
MeContext=ENODEB_6
Copy into non-empty config

Example Command:

    config copy --ne ENODEB_2;ENODEB_3 -s config1 -t config2
Example Command Response:

    Copy nodes started with job ID 2
Enter command to check the verbose status of job using returned Job ID:

    config copy -st -j 2 -v
Status Command Response with Verbose:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
2
COMPLETED
2014-11-26T11:58:44
2014-11-26T11:58:49
0h 0m 4s
2
1
1
0
Node status
Node name
Copy status
Copy status message
FDN
ENODEB_3
COPIED
MeContext=ENODEB_3
ENODEB_2
NOT_COPIED
Node not copied because it already exists in the target configuration
MeContext=ENODEB_2
Copy using SubNetworks to identify the nodes

Example Command:

    config copy -s Live -t config2 -n SubNetwork=Ireland,SubNetwork=Athlone;SubNetwork=Ireland,SubNetwork=Dublin
Example Command Response:

    Copy nodes started with job ID 4
Example Command Response IF the Node Scope Exceeds the Recommended Limit:

    Warning: 1500 network elements matched. It is not recommended to copy more than 1000 network elements at a time as this puts a heavy load on ENM and is not guaranteed to succeed.
    
    Copy nodes started with job ID 4
Enter command to check the verbose status of job using returned Job ID:

    config copy -st -j 4 -v
Status Command Response with Verbose:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
4
COMPLETED
2014-11-26T12:02:21
2014-11-26T12:02:25
0h 0m 4s
2
2
0
0
Node status
Node Name
Copy Status
Copy status message
FDN
ENODEB_4
COPIED
SubNetwork=Ireland,SubNetwork=Athlone,MeContext=ENODEB_4
ENODEB_5
COPIED
SubNetwork=Ireland,SubNetwork=Dublin,MeContext=ENODEB_5
Example Command, specifying only parent SubNetwork:

    config copy -s Live -t config3 -n SubNetwork=Ireland
Example Command Response:

    Copy nodes started with job ID 5
Example Command Response IF the Node Scope Exceeds the Recommended Limit:

    Warning: 1500 network elements matched. It is not recommended to copy more than 1000 network elements at a time as this puts a heavy load on ENM and is not guaranteed to succeed.
    
    Copy nodes started with job ID 5
Enter command to check the verbose status of job using returned Job ID:

    config copy -st -j 5 -v
Status Command Response with Verbose:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
5
COMPLETED
2014-11-26T12:02:21
2014-11-26T12:02:25
0h 0m 4s
2
2
0
0
Node status
Node Name
Copy Status
Copy status message
FDN
ENODEB_5
COPIED
SubNetwork=Ireland,SubNetwork=Dublin,MeContext=ENODEB_5
ENODEB_4
COPIED
SubNetwork=Ireland,SubNetwork=Athlone,MeContext=ENODEB_4
Copy status

Enter command to check status of copy jobs:

    config copy --status
Status Command Response:

Job status
Job ID
Status
Start date/time
End date/time
Elapsed time
Expected nodes copied
Nodes copied
Nodes not copied
Nodes no match found
2
STOPPED DUE TO UPGRADE
2014-11-26T11:56:44
2014-11-26T11:56:49
0h 0m 5s
2
2
0
0
1
COMPLETED
2014-11-26T11:50:44
2014-11-26T11:50:49
0h 0m 5s
2
2
0
0
_______________________________________________________________________________________________________________________________________________________
Tutorial: Compare Configurations
< Back To Config

Compare two configurations to find differences among common network elements

Example Command:

config diff --target config1 --source config2
Example Command Response:

Diff Result
config1
config2
NODE_2
NODE_2
NODE_1
NODE_1
Config Diff Completed
Finding differences of specified network elements which exist in both configurations.

Example Command:

config diff --target config1 --source config2 --ne Node_1;Node_2 --verbose
Example Command Response:

Diff Result
NE Name
Grandparent RDN
Parent RDN
Object RDN
Attribute Name
config1
config2
Object FDN
NODE_1
MeContext=NODE_1
ManagedElement=1
neType
ERBS
MeContext=NODE_1,ManagedElement=1
NODE_2
SecM=1
CertM=1
NodeCredential=2
enrollmentTimer
60
20
ManagedElement=NODE_2,SystemFunctions=1,SecM=1,CertM=1,NodeCredential=2
Config Diff Completed
Finding differences of specified collections which exist in both configurations.

Example Command:

config diff --target config1 --source config2 --collection Collection_1;Collection_2 --verbose
Example Command Response:

Diff Result
NE Name
Grandparent RDN
Parent RDN
Object RDN
Attribute Name
config1
config2
Object FDN
NODE_1
MeContext=NODE_1
ManagedElement=1
neType
ERBS
MeContext=NODE_1,ManagedElement=1
NODE_2
SecM=1
CertM=1
NodeCredential=2
enrollmentTimer
60
20
ManagedElement=NODE_2,SystemFunctions=1,SecM=1,CertM=1,NodeCredential=2
NODE_4
MeContext=NODE_4
neType
NODE_4
MeContext=NODE_4
Config Diff Completed
Including all network elements in the comparison.

Example Command:

config diff --target config1 --source config2 --include --verbose
Example Command Response:

Diff Result
NE Name
Grandparent RDN
Parent RDN
Object RDN
Attribute Name
config1
config2
Object FDN
NODE_1
MeContext=NODE_1
ManagedElement=1
neType
ERBS
MeContext=NODE_1,ManagedElement=1
NODE_4
MeContext=NODE_4
neType
NODE_4
MeContext=NODE_4
NODE_2
MeContext=NODE_2
ManagedElement=1
ENodeBFunction=1
dnsLookupOnTai
ON
OFF
MeContext=NODE_2,ManagedElement=1,ENodeBFunction=1
NODE_3
MeContext=NODE_3
NODE_3
MeContext=NODE_3
NODE_5
ManagedElement=NODE_5
NODE_5
ManagedElement=NODE_5
Config Diff Completed
Display only common network element differences and no further detail on underlying managed objects.

Example Command:

config diff --target config1 --source config2
Example Command Response:

Diff Result
config1
config2
NODE_2
NODE_2
NODE_1
NODE_1
Config Diff Completed
Display all network element differences and no further detail on underlying managed objects.

Example Command:

config diff --target config1 --source config2 --include
Example Command Response:

Diff Result
config1
config2
NODE_2
NODE_2
NODE_1
NODE_1
NODE_3
NODE_4
Config Diff Completed
Display attribute differences of common network elements.

Example Command:

config diff --target config1 --source config2 --verbose
Example Command Response:

Diff Result
NE Name
Grandparent RDN
Parent RDN
Object RDN
Attribute Name
config1
config2
Object FDN
NODE_2
MeContext=NODE_2
ManagedElement=1
ENodeBFunction=1
dnsLookupOnTai
ON
OFF
MeContext=NODE_2,ManagedElement=1,ENodeBFunction=1
NODE_1
MeContext=NODE_1
ManagedElement=1
neType
ERBS
MeContext=NODE_1,ManagedElement=1
NODE_3
SecM=1
CertM=1
NodeCredential=2
enrollmentTimer
60
20
ManagedElement=NODE_3,SystemFunctions=1,SecM=1,CertM=1,NodeCredential=2
Config Diff Completed

_______________________________________________________________________________________________________________________________________________________
How to Activate Specific Network Elements in a Non-Live Configuration
Context
This tutorial describes the tasks to activate specific network elements in a non-live configuration.

Changes made in a non-live configuration are recorded. The activate command is used to apply these changes to the live configuration. When a change is made in a non-live configuration, it is recorded with an activation status “No activation attempted”. When an activation job is run, the status of each change attempted is updated to either “Activated” or “Activation failed”. This depends on whether the change is successfully applied to the live configuration or not.
When a configuration is activated, previous successful changes are not reapplied. This means that only changes with activation status “No activation attempted” or "Activation failed” are attempted. Further changes can be made in a configuration (after it is activated). These changes are applied when the configuration is reactivated.
Activation can only be made from a non-live configuration to the live configuration. Activation is not aware of differences between the non-live configuration and the live configuration. An individual change can only be successfully activated once. If the live configuration is subsequently updated to undo the change, the change will not be reapplied by activating the non-live configuration again.
When a node-specification option is used, the activation is restricted to the nodes matching the specification. No attempt is made to activate changes for nodes not matching the node-specification. The status of nodes not matching the node-specification does not change. A configuration does not have to be activated for all nodes at one time.
The change operations are activated in batches per Network Element (NE). If the number of operations on MOs on a single NE is greater than the predefined batch size (100), these operations are divided into multiple batches. If activation of any operation on any MO in a batch fails, all operations in this batch are marked as failed. The Change status message for a failed operation displays the operation(s), and MO(s) that caused the failure. Changes made in the other batches are then activated.
The order of NEs activated is not guaranteed, as the activations of NEs are executed in parallel. The change operations on MOs for an NE being activated is done in the same order as they were imported in the non-live configuration.
Prerequisites
There is a non-live configuration with changes to be activated.
Steps
View the changes in the non-live configuration to be activated
config history --source configName
The command returns the changes (if any) in the non-live configuration which are yet to be activated as in the following example:

Node name	Change Type	FDN
LTE02ERBS00069	MO created	MeContext=LTE02ERBS00069,ManagedElement=1,SwManagement=1,LoadModule=201
SGSN-MME_1	Attribute modification	ManagedElement=SGSN-MME_1,SystemFunctions=1,SecM=1,CertM=1,NodeCredential=2
Activate a node in the non-live configuration
config activate --source configName --ne SGSN-MME_1
The command begins an activation job and returns a successful message with a job ID as shown in the following example:

Activate configuration started with job ID 68
Check the status of the activation job:
config activate --status --job 68 --verbose
The command returns the status of a given activation job as shown in the following example:

Job ID	Status	Start date/time	End date/time	Elapsed time	User name	Configuration	Status detail
68	COMPLETED	2016-09-28T13:40:11	2016-09-28T13:40:12	0h 0m 1s	administrator	test	COMPLETED
Applied change results
Change type	Change status	Change status message	FDN	Additional data	Supplied arguments
Attribute Modification
COMPLETED
no additional data
ManagedElement=SGSN-MME_1,SystemFunctions=1,SecM=1,CertM=1,NodeCredential=2
1.0.0
{userLabel=modifiedUserLabel}
Result
The changes relating to the network element in the non-live configuration are applied to the live configuration.

Note: Where the status detail of a job includes "Some Applied change has failed", at least one change has not been applied to the network. Use the --verbose parameter option to see which changes were not applied successfully.

Note: Where the status detail of a job includes "Warning: History data not successfully stored", at least some of the configuration history information was not stored. The system keeps a record of the history of changes which have been applied to the network. This warning reports that storing of that history has not successful. This does not affect the applied changes, just the recording of the history of those changes. Therefore the use of config undo on this activation job will not be possible.
_______________________________________________________________________________________________________________________________________________________
How to Delete a Non-Live Configuration
Context
< Back To Config

This tutorial describes how to delete a non-live configuration and check the status of this deletion.

Prerequisites
Non-Live Configurations exist.
Steps
Check that no activations are ongoing on the non-live configuration named config_2
See How to Get the Statuses of Activations using a Time Filter
Delete a configuration named config_2
config delete config_2
The delete command is asynchronous and if a delete job is successfully started then a confirmation message with the job ID will be returned as shown in the following example:

Delete configuration started with job ID 2
Show the status of all delete jobs
config delete --status
The command returns a list of all delete jobs as shown in the following example:

Job ID	Status	Start date/time	End date/time	Elapsed time	Configuration	Status detail
2	COMPLETED	2015-10-15T11:05:01	2015-10-15T11:05:02	0h 0m 1s	config_2	COMPLETED
1	COMPLETED	2015-10-15T11:04:52	2015-10-15T11:04:54	0h 0m 2s	config_1	COMPLETED
Show the status of a specific delete job
config delete --status --job 2
The command returns the details of the the delete job with ID 2 as shown in the following example:

Job ID	Status	Start date/time	End date/time	Elapsed time	Configuration	Status detail
2	COMPLETED	2015-10-15T11:05:01	2015-10-15T11:05:02	0h 0m 1s	config_2	COMPLETED

_______________________________________________________________________________________________________________________________________________________
View the History of a Non-Live Configuration
Context
This tutorial describes the steps to view the history of changes in a non-live configuration.
Only pending changes will be displayed by default. Pending changes are those that have not been activated or the activation has failed.
If a change was made to an attribute which already had the same value, that change is displayed.

Prerequisites
There is a non-live configuration with changes yet to be activated.
Steps
View the changes in the non-live configuration to be activated
config history --source configName
The command returns the changes (if any) in the non-live configuration named configName which are yet to be activated as in the following example:

Configuration history
Node name	Change type	FDN
ERBS1	Attribute modification	MeContext=ERBS1,ManagedElement=1,ENodeBFunction=1
ERBS3	MIB root created	MeContext=ERBS3
SGSN-MME_1	Attribute modification	ManagedElement=SGSN-MME_1,SystemFunctions=1,SecM=1,CertM=1,NodeCredential=1
LTE02ERBS00069	MO deleted	MeContext=LTE02ERBS00069,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=LTE02ERBS00069-3
4 change(s)
Use the verbose option to get more detail
config history --source configName --verbose
Configuration history
Node name	Change type	FDN	Supplied arguments	Created time	Activated time	User name
ERBS1	Attribute modification	MeContext=ERBS1,ManagedElement=1,ENodeBFunction=1	{userLabel=newUserLabel}	2015-08-23T12:03:30	2015-08-23T12:06:00	enmUser
ERBS3	MIB root created	MeContext=ERBS3	{SubNetworkId:ERBS3}	2015-08-23T12:04:05	2015-08-23T12:06:00	enmUser
SGSN-MME_1	Attribute modification	ManagedElement=SGSN-MME_1,SystemFunctions=1,SecM=1,CertM=1,NodeCredential=1	{userLabel=newUserLabel}	2015-08-23T12:04:46	2015-08-23T12:06:00	enmUser
LTE02ERBS00069	MO deleted	MeContext=LTE02ERBS00069,ManagedElement=1,ENodeBFunction=1,EUtranCellFDD=LTE02ERBS00069-3	{}	2015-08-23T12:05:52	2015-08-23T12:06:00	enmUser
4 change(s)
_______________________________________________________________________________________________________________________________________________________
Undo Changes to the Live Configuration made by the Activation of a Non-Live Configuration
Context
This tutorial describes the steps required to undo changes made to the live configuration by the activation of a non-live configuration.
The default value for the optional file type parameter depends on the Dynamic CM Value Package license. If the Dynamic CM Value Package license is not installed, the default value is 3GPP. If the Dynamic CM Value Package license is installed, the default value is dynamic.

Prerequisites
Changes have been made to the live configuration by activating a non-live configuration

Steps
Select activation job to undo
The purpose of this step is to determine which activation job should be selected to revoke.

Get the Statuses of Activations using a Time Filter
Select the correct activation job to be revoked. Using the job ID of this job, use the following tutorial to check the history of this job to confirm that it contains the intended operations to be revoked

View the History of Changes to the Live Configuration Made by a Specific Activation
Result : The correct activation job to undo has been identified. The job contains the operations to be revoked.

Create an undo import file for the chosen activation job
The purpose of this step is to create a bulk import file which contains the operations required to undo the job selected in step 1

config undo --activationjob 80
The command begins an undo job. A successful message with a job ID as shown in the following example:

Undo job started with job ID 81
Result : The bulk import file to revoke the selected job has been created.

Check the status of the undo job
The purpose of this step is to check that the undo job has been completed, and contains all required changes.

Note : Some operations are not supported by undo. If unsupported operations are in the selected Bulk Import job, there will be a difference between the "Total operations" and "Undo operations" columns. Refer to the description of "Undo operations" below.

config undo --status --job 81
The command in this example returns the status of an undo job with the job ID 81 as shown in the following example:

Job Status
Job ID	Status	Start date/time	End date/time	Elapsed time	Total operations	Undo operations	User name	File name	Additional information
81	COMPLETED	2016-10-27T12-12-54	2016-10-27T12-12-57	0h 0m 3s	1	1	enmUser	/ericsson/batch/undo/undo_2016-10-27T12-12-54_81.xml	Application:Activate,JobID:80
The Total operations field lists the number of operations applied to the network due to the activation job. Exact details of those operations can be displayed using the config history command for the live configuration.
The Undo operations field lists the number of operations included in the undo file. This number can be less than the Total operations field, since some operations are not currently supported. The supported operations are Managed Object creation, MIB root creation, attribute modification and Managed Object deletion on NRM (Network Resource Model) Managed Objects. Attribute modification on Topology Model Managed Objects is also supported, but only with Dynamic File Format. The deletion of system created Managed Objects is not supported. More information can be found in the "Context Description" section of config undo. For unsupported operations, 'totalExcludedUnsupportedOperations' counter is incremented in the logs. The log entry for an undo job can be found in Log Viewer by searching for the label CM_REVOCATION. The log entry contains the counters that identify the number of excluded unsupported operations and the number of excluded Managed Objects. These counters are 'totalExcludedUnsupportedOperations', 'totalExcludedNonNrmMos', and 'totalExcludedSystemCreatedMos'.
The File name describes the name and location of the undo file. In this example the dynamic license is not active therefore the filetype is 3GPP. This is denoted by the file's XML extension.
The Additional information field lists the application source of the original changes for which this undo job is generating the undo file. Undo of both activation and import to live are supported.
The Additional information field also includes the reason for failure, for undo jobs that have failed.
For undo jobs where all operations have been excluded, the job is considered failed. The Additional information field includes 'No operations to undo' as the reason for failure. The undo file is not available for download.
If a job fails with Failure Reason:Incomplete History data available for job., this could indicate that the specified activation job is not yet complete. Wait for the activation job to complete and retry the command.
Download the undo file and add to the workspace
The purpose of this step is to download the undo file and add it to the workspace so that it can be used in a bulk import job.

config undo --download --job 81
The command downloads the undo file to the local client as displayed:

downloading...
Note : The downloaded file can be viewed to confirm it contains the required changes.

Move the undo file to the workspace by dragging and dropping onto the client browser, the following confirmation message is displayed:

undo_2016-10-27T12-12-54_81.xml added to workspace
Import the file into the live configuration
The purpose of this step is to apply the undo operations to the Live configuration.

cmedit import -f file:<undoFileName> -ft <fileType> -t Live
The command begins an import job and returns a successful message with a job ID as displayed:

Import started with job ID 2
Check the status of the import job
The purpose of this step is to check that the import job has been completed, and contains all required changes.

cmedit import --status --job 2 --verbose
The command in this example returns the status of an import job with the job ID 2 as displayed:

Job Status
Job ID	Status	Start date/time	End date/time	Elapsed Time	Nodes copied	Nodes not copied	Managed objects created	Managed objects updated	Managed objects deleted	Actions performed	Failure Information	File Name	Configuration
2	COMPLETED	2016-10-27T12:20:06	2016-10-27T12:20:08	0h 0m 2s	0	0	0	1	0	0		undo_2016-10-27T12-12-54_81.xml	Live
Job Operation Details
Import status message	Operation Type	Update Time	FDN
SUCCESS	UPDATE	2016-10-27T12:20:08	MeContext=LTE02ERBS00069,ManagedElement=1,ENodeBFunction=1
Retrieved import job details successfully
Result : If the Bulk Import job completes successfully, the changes are applied to the live configuration. If the the Bulk Import job has failed due to Instance Validation, there are incompatible with the Live configuration. For example if the Bulk Import is trying to create a child MO for a parent MO that has been deleted since the Bulk Import selected in step 1 was applied. In this case review the changes that have failed using

cmedit import --status --job 2 --verbose
If the failure reason is found in the "Failure Information" column, if these are now unnecessary due to changes in the Live configuration, rerun the import command with the following parameters

cmedit import -f file:<undoFileName> -ft <fileType> -t Live --validate noinstance --error operation
Remove the undo job with job ID 81
config undo --remove --job 81
The command removes the undo job with a message as in the following example:

Undo job was successfully removed.
@@@@@manual 










@@@@@manual alias@@@@
Tutorial: Creating ,Executing and Managing Aliases
< Back To CLI

Refer to alias help page for alias syntax and context description

Use Case 1 : Creating alias
Alias with no argument

alias "ls" "cmedit get * NetworkElement"
Example Command Response:

alias created
Alias with one argument

alias "del_1 $1" "cmedit delete * ENodeBFunction.userLabel==$1"
Example Command Response:

alias created
Alias with one argument used multiple times

alias "del_2 $1" "cmedit delete * ENodeBFunction.(userLabel==$1, zzzTemporary2==$1)"
Example Command Response:

alias created
Alias with multiple arguments

alias "create_MC $1 $2 $3" "cmedit create MeContext=$1 MeContextId=$1,neType=$2,platformType=CPP -ns=OSS_TOP -version=$3"
Example Command Response:

alias created
Use Case 2 : Executing alias
Alias with no argument

Specify the name of the alias (for example "ls") with no argument and press enter.

ls
As shown above, the alias will be executed and the response will be printed out in the CLI. Note: The alias will be replaced by the aliased command.

cmedit get * NetworkElement

FDN : NetworkElement=LTE01ERBS00001

FDN : NetworkElement=LTE01ERBS00002

FDN : NetworkElement=LTE01ERBS00003


3 instance(s)
Alias with argument (s)

Specify the name of the alias with required number of argument-values and press enter.

create_MC LTE200ERBS00003 ERBS 3.0.0
As shown above, the alias will be executed and the response will be printed out in the CLI. Note: The alias was replaced by the aliased command after substituting the argument values.

cmedit create MeContext=LTE200ERBS00003 MeContextId=LTE200ERBS00003,neType=ERBS,platformType=CPP -ns=OSS_TOP -version=3.0.0

FDN : MeContext=LTE200ERBS00003
neType : ERBS
MeContextId : LTE200ERBS00003
platformType : CPP

1 instance(s) updated
Use Case 3 : Finding alias
Finding a specific alias

cmedit get * CliAlias.name==aliases CliAlias.* -t
Example Command Response:

CliAlias
arguments   command                 commandContext  name        userId
            get * CliAlias.* -t     cmedit          aliases


1 instance(s)
Finding all aliases

cmedit get * CliAlias.* -t
Example Command Response:

CliAlias
arguments   command                 commandContext  name        userId
            get * CliAlias.* -t     cmedit          aliases
            delete * CliAlias       cmedit          unalias


2 instance(s)
Note: It is also possible to make aliases for these commands. For example, one can make an alias named "aliases" as shown below; to find all aliases.

alias "aliases" "cmedit get * CliAlias.* -t"
Example Command Response:

alias created
Execute the alias command

aliases
Example Command Response:

cmedit get * CliAlias.* -t

    CliAlias
arguments   command                 commandContext  name        userId
            get * CliAlias.* -t     cmedit          aliases
            delete * CliAlias       cmedit          unalias


2 instance(s)
Use Case 4 : Deleting alias
Deleting a specific alias and Confirmation Request.

cmedit delete * CliAlias.name==aliases
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
PO : CliAlias:null
 
1 Object(s) will be deleted by this commands. 
 
Execute
 
Response (after confirmation)

SUCCESS PO : CliAlias:null
 
1 instance(s) deleted
 
Note: This command was forced for execution following automatic Preview Mode
 
Deleting all aliases and Confirmation Request.

cmedit delete * CliAlias.name==*
Response (with confirmation request)

WARNING: Continuing in Preview Mode. Please confirm if you want to continue command execution.
 
PO : CliAlias:null
 
PO : CliAlias:null
 
2 Object(s) will be deleted by this commands. 
 
Execute
 
Response (after confirmation)

SUCCESS PO : CliAlias:null
 
SUCCESS PO : CliAlias:null
 
2 instance(s) deleted
 
Note: This command was forced for execution following automatic Preview Mode
 
Deleting all aliases using preview option.

cmedit delete * CliAlias.name==* --preview
Response

Command Preview - List of Affected MO(s):
 
PO : CliAlias:null
 
PO : CliAlias:null
 
2 Object(s) will be deleted by this command.
 
Note: It is also possible to make aliases for these commands. For example, one can make an alias named "unaliases" as shown below; to delete all aliases.

alias "unalias" "cmedit delete * CliAlias.name==* CliAlias -t"
Example Command Response:

alias created